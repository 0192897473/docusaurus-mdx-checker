"use strict";(self.webpackChunkjest_website=self.webpackChunkjest_website||[]).push([[797],{6294:(e,n,t)=>{t.d(n,{Z:()=>a});t(7378);var s=t(7614);const i={tableOfContentsInline:"tableOfContentsInline_pY9K"};var c=t(4246);function a(e){let{toc:n,minHeadingLevel:t,maxHeadingLevel:a}=e;return(0,c.jsx)("div",{className:i.tableOfContentsInline,children:(0,c.jsx)(s.Z,{toc:n,minHeadingLevel:t,maxHeadingLevel:a,className:"table-of-contents",linkClassName:null})})}},7614:(e,n,t)=>{t.d(n,{Z:()=>p});var s=t(7378),i=t(9899);function c(e){const n=e.map((e=>({...e,parentIndex:-1,children:[]}))),t=Array(7).fill(-1);n.forEach(((e,n)=>{const s=t.slice(2,e.level);e.parentIndex=Math.max(...s),t[e.level]=n}));const s=[];return n.forEach((e=>{const{parentIndex:t,...i}=e;t>=0?n[t].children.push(i):s.push(i)})),s}function a(e){let{toc:n,minHeadingLevel:t,maxHeadingLevel:s}=e;return n.flatMap((e=>{const n=a({toc:e.children,minHeadingLevel:t,maxHeadingLevel:s});return function(e){return e.level>=t&&e.level<=s}(e)?[{...e,children:n}]:n}))}function l(e){const n=e.getBoundingClientRect();return n.top===n.bottom?l(e.parentNode):n}function r(e,n){let{anchorTopOffset:t}=n;const s=e.find((e=>l(e).top>=t));if(s){return function(e){return e.top>0&&e.bottom<window.innerHeight/2}(l(s))?s:e[e.indexOf(s)-1]??null}return e[e.length-1]??null}function d(){const e=(0,s.useRef)(0),{navbar:{hideOnScroll:n}}=(0,i.L)();return(0,s.useEffect)((()=>{e.current=n?0:document.querySelector(".navbar").clientHeight}),[n]),e}function o(e){const n=(0,s.useRef)(void 0),t=d();(0,s.useEffect)((()=>{if(!e)return()=>{};const{linkClassName:s,linkActiveClassName:i,minHeadingLevel:c,maxHeadingLevel:a}=e;function l(){const e=function(e){return Array.from(document.getElementsByClassName(e))}(s),l=function(e){let{minHeadingLevel:n,maxHeadingLevel:t}=e;const s=[];for(let i=n;i<=t;i+=1)s.push(`h${i}.anchor`);return Array.from(document.querySelectorAll(s.join()))}({minHeadingLevel:c,maxHeadingLevel:a}),d=r(l,{anchorTopOffset:t.current}),o=e.find((e=>d&&d.id===function(e){return decodeURIComponent(e.href.substring(e.href.indexOf("#")+1))}(e)));e.forEach((e=>{!function(e,t){t?(n.current&&n.current!==e&&n.current.classList.remove(i),e.classList.add(i),n.current=e):e.classList.remove(i)}(e,e===o)}))}return document.addEventListener("scroll",l),document.addEventListener("resize",l),l(),()=>{document.removeEventListener("scroll",l),document.removeEventListener("resize",l)}}),[e,t])}var h=t(1191),x=t(4246);function u(e){let{toc:n,className:t,linkClassName:s,isChild:i}=e;return n.length?(0,x.jsx)("ul",{className:i?void 0:t,children:n.map((e=>(0,x.jsxs)("li",{children:[(0,x.jsx)(h.Z,{to:`#${e.id}`,className:s??void 0,dangerouslySetInnerHTML:{__html:e.value}}),(0,x.jsx)(u,{isChild:!0,toc:e.children,className:t,linkClassName:s})]},e.id)))}):null}const j=s.memo(u);function p(e){let{toc:n,className:t="table-of-contents table-of-contents__left-border",linkClassName:l="table-of-contents__link",linkActiveClassName:r,minHeadingLevel:d,maxHeadingLevel:h,...u}=e;const p=(0,i.L)(),m=d??p.tableOfContents.minHeadingLevel,f=h??p.tableOfContents.maxHeadingLevel,b=function(e){let{toc:n,minHeadingLevel:t,maxHeadingLevel:i}=e;return(0,s.useMemo)((()=>a({toc:c(n),minHeadingLevel:t,maxHeadingLevel:i})),[n,t,i])}({toc:n,minHeadingLevel:m,maxHeadingLevel:f});return o((0,s.useMemo)((()=>{if(l&&r)return{linkClassName:l,linkActiveClassName:r,minHeadingLevel:m,maxHeadingLevel:f}}),[l,r,m,f])),(0,x.jsx)(j,{toc:b,className:t,linkClassName:l,...u})}},7260:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>u,frontMatter:()=>l,metadata:()=>d,toc:()=>h});var s=t(4246),i=t(1670),c=t(9563),a=t(6294);const l={id:"api",title:"\u5168\u5c40\u8bbe\u5b9a"},r=void 0,d={unversionedId:"api",id:"version-29.6/api",title:"\u5168\u5c40\u8bbe\u5b9a",description:"Jest\u4f1a\u5c06\u8fd9\u4e9b\u65b9\u6cd5\u548c\u5bf9\u8c61\u6ce8\u5165\u5230\u6d4b\u8bd5\u6587\u4ef6\u7684\u5168\u5c40\u73af\u5883\u91cc\uff0c \u6240\u4ee5\u4f60\u5728\u4f7f\u7528\u7684\u65f6\u5019\u4e0d\u518d\u9700\u8981\u8fdb\u884crequire\u6216\u8005import\u3002 \u5982\u679c\u4f60\u4e60\u60ef\u7f16\u5199\u660e\u786e\u7684\u5bfc\u5165\uff0c\u4f60\u53ef\u4ee5\u5728\u6d4b\u8bd5\u6587\u4ef6\u9876\u90e8\u6dfb\u52a0 import {describe, expect, test} from '@jest/globals'\u3002",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/version-29.6/GlobalAPI.md",sourceDirName:".",slug:"/api",permalink:"/zh-Hans/docs/api",draft:!1,unlisted:!1,editUrl:"https://crowdin.com/project/jest-v2/zh-CN",tags:[],version:"29.6",frontMatter:{id:"api",title:"\u5168\u5c40\u8bbe\u5b9a"},sidebar:"api",next:{title:"Expect \u65ad\u8a00",permalink:"/zh-Hans/docs/expect"}},o={},h=[{value:"\u65b9\u6cd5",id:"\u65b9\u6cd5",level:2},{value:"\u53c2\u8003",id:"\u53c2\u8003",level:2},{value:"<code>afterAll(fn, timeout)</code>",id:"afterallfn-timeout",level:3},{value:"<code>afterEach(fn, timeout)</code>",id:"aftereachfn-timeout",level:3},{value:"<code>beforeAll(fn, timeout)</code>",id:"beforeallfn-timeout",level:3},{value:"<code>beforeEach(fn, timeout)</code>",id:"beforeeachfn-timeout",level:3},{value:"<code>describe(name, fn)</code>",id:"describename-fn",level:3},{value:"<code>describe.each(table)(name, fn, timeout)</code>",id:"describeeachtablename-fn-timeout",level:3},{value:"1. <code>describe.each(table)(name, fn, timeout)</code>",id:"1-describeeachtablename-fn-timeout",level:4},{value:"2. <code>describe.each`table`(name, fn, timeout)</code>",id:"2-describeeachtablename-fn-timeout",level:4},{value:"<code>describe.only(name, fn)</code>",id:"describeonlyname-fn",level:3},{value:"<code>describe.only.each(table)(name, fn)</code>",id:"describeonlyeachtablename-fn",level:3},{value:"<code>describe.only.each(table)(name, fn)</code>",id:"describeonlyeachtablename-fn-1",level:4},{value:"<code>describe.only.each`table`(name, fn)</code>",id:"describeonlyeachtablename-fn-2",level:4},{value:"<code>describe.skip(name, fn)</code>",id:"describeskipname-fn",level:3},{value:"<code>describe.skip.each(table)(name, fn)</code>",id:"describeskipeachtablename-fn",level:3},{value:"<code>describe.skip.each(table)(name, fn)</code>",id:"describeskipeachtablename-fn-1",level:4},{value:"<code>describe.skip.each`table`(name, fn)</code>",id:"describeskipeachtablename-fn-2",level:4},{value:"<code>test(name, fn, timeout)</code>",id:"testname-fn-timeout",level:3},{value:"<code>test.concurrent(name, fn, timeout)</code>",id:"testconcurrentname-fn-timeout",level:3},{value:"<code>test.concurrent.each(table)(name, fn, timeout)</code>",id:"testconcurrenteachtablename-fn-timeout",level:3},{value:"1. <code>test.concurrent.each(table)(name, fn, timeout)</code>",id:"1-testconcurrenteachtablename-fn-timeout",level:4},{value:"2. <code>test.concurrent.each`table`(name, fn, timeout)</code>",id:"2-testconcurrenteachtablename-fn-timeout",level:4},{value:"<code>test.concurrent.only.each(table)(name, fn)</code>",id:"testconcurrentonlyeachtablename-fn",level:3},{value:"<code>test.concurrent.only.each(table)(name, fn)</code>",id:"testconcurrentonlyeachtablename-fn-1",level:4},{value:"<code>test.only.each`table`(name, fn)</code>",id:"testonlyeachtablename-fn",level:4},{value:"<code>test.concurrent.skip.each(table)(name, fn)</code>",id:"testconcurrentskipeachtablename-fn",level:3},{value:"<code>test.concurrent.skip.each(table)(name, fn)</code>",id:"testconcurrentskipeachtablename-fn-1",level:4},{value:"<code>test.concurrent.skip.each`table`(name, fn)</code>",id:"testconcurrentskipeachtablename-fn-2",level:4},{value:"<code>test.each(table)(name, fn, timeout)</code>",id:"testeachtablename-fn-timeout",level:3},{value:"1. <code>test.each(table)(name, fn, timeout)</code>",id:"1-testeachtablename-fn-timeout",level:4},{value:"2. <code>test.each`table`(name, fn, timeout)</code>",id:"2-testeachtablename-fn-timeout",level:4},{value:"<code>test.failing(name, fn, timeout)</code>",id:"testfailingname-fn-timeout",level:3},{value:"<code>test.failing.each(name, fn, timeout)</code>",id:"testfailingeachname-fn-timeout",level:3},{value:"<code>test.only.failing(name, fn, timeout)</code>",id:"testonlyfailingname-fn-timeout",level:3},{value:"<code>test.skip.failing(name, fn, timeout)</code>",id:"testskipfailingname-fn-timeout",level:3},{value:"<code>1. test.only(name, fn, timeout)</code>",id:"1-testonlyname-fn-timeout",level:3},{value:"<code>test.only.each(table)(name, fn)</code>",id:"testonlyeachtablename-fn-1",level:3},{value:"<code>test.only.each(table)(name, fn)</code>",id:"testonlyeachtablename-fn-2",level:4},{value:"<code>test.only.each`table`(name, fn)</code>",id:"testonlyeachtablename-fn-3",level:4},{value:"<code>test.skip(name, fn)</code>",id:"testskipname-fn",level:3},{value:"<code>test.skip.each(table)(name, fn)</code>",id:"testskipeachtablename-fn",level:3},{value:"<code>test.skip.each(table)(name, fn)</code>",id:"testskipeachtablename-fn-1",level:4},{value:"<code>test.skip.each`table`(name, fn)</code>",id:"testskipeachtablename-fn-2",level:4},{value:"<code>test.todo(name)</code>",id:"testtodoname",level:3},{value:"TypeScript Usage",id:"typescript-usage",level:2},{value:"<code>.each</code>",id:"each",level:3},{value:"\u5bf9\u8c61\u6570\u7ec4",id:"\u5bf9\u8c61\u6570\u7ec4",level:4},{value:"\u4e8c\u7ef4\u6570\u7ec4",id:"\u4e8c\u7ef4\u6570\u7ec4",level:4},{value:"\u6a21\u677f\u5b57\u7b26\u4e32",id:"\u6a21\u677f\u5b57\u7b26\u4e32",level:4}];function x(e){const n=Object.assign({p:"p",code:"code",h2:"h2",hr:"hr",h3:"h3",pre:"pre",h4:"h4",ul:"ul",li:"li",a:"a",strong:"strong",admonition:"admonition"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Jest\u4f1a\u5c06\u8fd9\u4e9b\u65b9\u6cd5\u548c\u5bf9\u8c61\u6ce8\u5165\u5230\u6d4b\u8bd5\u6587\u4ef6\u7684\u5168\u5c40\u73af\u5883\u91cc\uff0c \u6240\u4ee5\u4f60\u5728\u4f7f\u7528\u7684\u65f6\u5019\u4e0d\u518d\u9700\u8981\u8fdb\u884crequire\u6216\u8005import\u3002 \u5982\u679c\u4f60\u4e60\u60ef\u7f16\u5199\u660e\u786e\u7684\u5bfc\u5165\uff0c\u4f60\u53ef\u4ee5\u5728\u6d4b\u8bd5\u6587\u4ef6\u9876\u90e8\u6dfb\u52a0 ",(0,s.jsx)(n.code,{children:"import {describe, expect, test} from '@jest/globals'"}),"\u3002"]}),"\n","\n",(0,s.jsx)(c.ZP,{}),"\n",(0,s.jsx)(n.h2,{id:"\u65b9\u6cd5",children:"\u65b9\u6cd5"}),"\n","\n","\n",(0,s.jsx)(a.Z,{toc:h.slice(1)}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"\u53c2\u8003",children:"\u53c2\u8003"}),"\n",(0,s.jsx)(n.h3,{id:"afterallfn-timeout",children:(0,s.jsx)(n.code,{children:"afterAll(fn, timeout)"})}),"\n",(0,s.jsx)(n.p,{children:"\u6587\u4ef6\u5185\u6240\u6709\u6d4b\u8bd5\u5b8c\u6210\u540e\u6267\u884c\u7684\u94a9\u5b50\u51fd\u6570\u3002 \u5982\u679c\u4f20\u5165\u7684\u56de\u8c03\u51fd\u6570\u8fd4\u56de\u503c\u662f promise \u6216\u8005 generator\uff0cJest \u4f1a\u7b49\u5f85 promise resolve \u518d\u7ee7\u7eed\u6267\u884c\u3002"}),"\n",(0,s.jsx)(n.p,{children:"\u53ef\u9009\u5730\u4f20\u5165\u7b2c\u4e8c\u4e2a\u53c2\u6570 timeout\uff08\u6beb\u79d2\uff09 \u6307\u5b9a\u51fd\u6570\u6267\u884c\u8d85\u65f6\u65f6\u95f4\u3002 The default timeout is 5 seconds."}),"\n",(0,s.jsx)(n.p,{children:"\u4f7f\u7528 afterAll \u975e\u5e38\u65b9\u4fbf\u4f60\u6e05\u7406\u4e00\u4e9b\u5728\u6d4b\u8bd5\u7528\u4f8b\u4e4b\u95f4\u5171\u4eab\u7684\u5168\u5c40\u72b6\u6001\u3002"}),"\n",(0,s.jsx)(n.p,{children:"\u4f8b\u5982\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const globalDatabase = makeGlobalDatabase();\n\nfunction cleanUpDatabase(db) {\n  db.cleanUp();\n}\n\nafterAll(() => {\n  cleanUpDatabase(globalDatabase);\n});\n\ntest('can find things', () => {\n  return globalDatabase.find('thing', {}, results => {\n    expect(results.length).toBeGreaterThan(0);\n  });\n});\n\ntest('can insert a thing', () => {\n  return globalDatabase.insert('thing', makeThing(), response => {\n    expect(response.success).toBeTruthy();\n  });\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["\u4e0a\u8ff0\u4ee3\u7801\u4e2d ",(0,s.jsx)(n.code,{children:"afterAll"})," \u786e\u4fdd\u4e86\u5168\u90e8\u6d4b\u8bd5\u5b8c\u6210\u540e\u8c03\u7528 ",(0,s.jsx)(n.code,{children:"cleanUpDatabase"})," \u5b8c\u6210\u6e05\u7406\u64cd\u4f5c\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u5982\u679c ",(0,s.jsx)(n.code,{children:"afterAll"})," \u5b9a\u4e49\u5728 ",(0,s.jsx)(n.code,{children:"describe"})," \u5757\u7684\u5185\u90e8\uff0c\u5b83\u5c06\u4f1a\u5728 describe \u5757\u7ed3\u675f\u65f6\u6267\u884c\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u5982\u679c\u4f60\u60f3\u6bcf\u4e2a\u6d4b\u8bd5\u5b8c\u6210\u65f6\u90fd\u8fd0\u884c\u4e00\u904d\u94a9\u5b50\uff0c\u8bf7\u4f7f\u7528 ",(0,s.jsx)(n.code,{children:"afterEach"})]}),"\n",(0,s.jsx)(n.h3,{id:"aftereachfn-timeout",children:(0,s.jsx)(n.code,{children:"afterEach(fn, timeout)"})}),"\n",(0,s.jsx)(n.p,{children:"\u6587\u4ef6\u5185\u6bcf\u4e2a\u6d4b\u8bd5\u5b8c\u6210\u540e\u6267\u884c\u7684\u94a9\u5b50\u51fd\u6570\u3002 \u5982\u679c\u4f20\u5165\u7684\u56de\u8c03\u51fd\u6570\u8fd4\u56de\u503c\u662f promise \u6216\u8005 generator\uff0cJest \u4f1a\u7b49\u5f85 promise resolve \u518d\u7ee7\u7eed\u6267\u884c\u3002"}),"\n",(0,s.jsx)(n.p,{children:"\u53ef\u9009\u5730\u4f20\u5165\u7b2c\u4e8c\u4e2a\u53c2\u6570 timeout\uff08\u6beb\u79d2\uff09 \u6307\u5b9a\u51fd\u6570\u6267\u884c\u8d85\u65f6\u65f6\u95f4\u3002 The default timeout is 5 seconds."}),"\n",(0,s.jsx)(n.p,{children:"\u4f7f\u7528 afterEach \u4f1a\u975e\u5e38\u65b9\u4fbf\u4f60\u6e05\u7406\u4e00\u4e9b\u5728\u6bcf\u4e2a\u6d4b\u8bd5\u4e2d\u521b\u5efa\u7684\u4e34\u65f6\u72b6\u6001\u3002"}),"\n",(0,s.jsx)(n.p,{children:"\u4f8b\u5982\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const globalDatabase = makeGlobalDatabase();\n\nfunction cleanUpDatabase(db) {\n  db.cleanUp();\n}\n\nafterEach(() => {\n  cleanUpDatabase(globalDatabase);\n});\n\ntest('can find things', () => {\n  return globalDatabase.find('thing', {}, results => {\n    expect(results.length).toBeGreaterThan(0);\n  });\n});\n\ntest('can insert a thing', () => {\n  return globalDatabase.insert('thing', makeThing(), response => {\n    expect(response.success).toBeTruthy();\n  });\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["\u4e0a\u8ff0\u4ee3\u7801\u4e2d\uff0c",(0,s.jsx)(n.code,{children:"afterEach"})," \u786e\u4fdd\u4e86\u6bcf\u4e00\u6b21\u6d4b\u8bd5\u7ed3\u675f\u540e\u90fd\u8c03\u7528\u4e00\u6b21 ",(0,s.jsx)(n.code,{children:"cleanUpDatabase"}),"\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u5982\u679c ",(0,s.jsx)(n.code,{children:"afterEach"})," \u5b9a\u4e49\u5728 ",(0,s.jsx)(n.code,{children:"describe"})," \u5757\u7684\u5185\u90e8\uff0c\u5b83\u4f1a\u5728\u8be5 describe \u5757\u5185\u7684\u6bcf\u4e00\u4e2a\u6d4b\u8bd5\u7ed3\u675f\u65f6\u6267\u884c\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u5982\u679c\u4f60\u53ea\u60f3\u5728\u6240\u6709\u6d4b\u8bd5\u5b8c\u6210\u540e\u6267\u884c\u4e00\u904d\u94a9\u5b50\uff0c\u8bf7\u4f7f\u7528 ",(0,s.jsx)(n.code,{children:"afterAll"}),"\u3002"]}),"\n",(0,s.jsx)(n.h3,{id:"beforeallfn-timeout",children:(0,s.jsx)(n.code,{children:"beforeAll(fn, timeout)"})}),"\n",(0,s.jsx)(n.p,{children:"\u6587\u4ef6\u5185\u6240\u6709\u6d4b\u8bd5\u5f00\u59cb\u524d\u6267\u884c\u7684\u94a9\u5b50\u51fd\u6570\u3002 \u5982\u679c\u4f20\u5165\u7684\u56de\u8c03\u51fd\u6570\u8fd4\u56de\u503c\u662f promise \u6216\u8005 generator\uff0cJest \u4f1a\u7b49\u5f85 promise resolve \u518d\u7ee7\u7eed\u6267\u884c\u3002"}),"\n",(0,s.jsx)(n.p,{children:"\u53ef\u9009\u5730\u4f20\u5165\u7b2c\u4e8c\u4e2a\u53c2\u6570 timeout\uff08\u6beb\u79d2\uff09 \u6307\u5b9a\u51fd\u6570\u6267\u884c\u8d85\u65f6\u65f6\u95f4\u3002 The default timeout is 5 seconds."}),"\n",(0,s.jsx)(n.p,{children:"\u4f7f\u7528 beforeAll \u4f1a\u975e\u5e38\u65b9\u4fbf\u4f60\u8bbe\u7f6e\u4e00\u4e9b\u5728\u6d4b\u8bd5\u7528\u4f8b\u4e4b\u95f4\u5171\u4eab\u7684\u5168\u5c40\u72b6\u6001\u3002"}),"\n",(0,s.jsx)(n.p,{children:"\u4f8b\u5982\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const globalDatabase = makeGlobalDatabase();\n\nbeforeAll(() => {\n  // \u6e05\u7a7a\u6570\u636e\u5e93\u5e76\u6dfb\u52a0\u51e0\u6761\u6570\u636e\n  // Jest \u4f1a\u7b49\u5f85 promise resolve \u518d\u53bb\u6267\u884c\u6d4b\u8bd5\n  return globalDatabase.clear().then(() => {\n  return globalDatabase.insert({testData: 'foo'});\n  });\n});\n\n// \u56e0\u4e3a\u6211\u4eec\u5728\u5f00\u59cb\u524d\u8bbe\u7f6e\u4e86\u4e00\u4e2a\u5168\u5c40\u5171\u4eab\u7684\u6570\u636e\u5e93\n// \u6240\u4ee5\u6211\u4eec\u6d4b\u8bd5\u65f6\u4e0d\u80fd\u4fee\u6539\u6570\u636e\u5e93\u7684\u6570\u636e\ntest('can find things', () => {\n  return globalDatabase.find('thing', {}, results => {\n    expect(results.length).toBeGreaterThan(0);\n  });\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["\u4e0a\u8ff0\u4ee3\u7801\u4e2d ",(0,s.jsx)(n.code,{children:"beforeAll"})," \u786e\u4fdd\u5728\u6240\u6709\u6d4b\u8bd5\u8fd0\u884c\u4e4b\u524d\u5b8c\u6210\u6570\u636e\u5e93\u7684\u521d\u59cb\u5316\u64cd\u4f5c\u3002 \u5982\u679c\u521d\u59cb\u5316\u64cd\u4f5c\u662f\u540c\u6b65\u7684\uff0c\u4f60\u53ef\u4ee5\u4e0d\u7528 ",(0,s.jsx)(n.code,{children:"beforeAll"})," \u76f4\u63a5\u6267\u884c\u3002 \u5173\u952e\u662f Jest \u4f1a\u7b49\u5f85 promise resolve\uff0c\u6240\u4ee5\u53ef\u4ee5\u8fdb\u884c\u5f02\u6b65\u7684\u521d\u59cb\u5316\u64cd\u4f5c\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u5982\u679c ",(0,s.jsx)(n.code,{children:"beforeAll"})," \u5b9a\u4e49\u5728 ",(0,s.jsx)(n.code,{children:"describe"})," \u5757\u7684\u5185\u90e8\uff0c\u5b83\u5c06\u4f1a\u5728 describe \u5757\u5f00\u59cb\u524d\u6267\u884c\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u5982\u679c\u8981\u5728\u6bcf\u6b21\u6d4b\u8bd5\u5f00\u59cb\u4e4b\u524d\u6267\u884c\u67d0\u4e9b\u64cd\u4f5c\uff0c\u800c\u4e0d\u662f\u5728\u6bcf\u6b21\u6d4b\u8bd5\u5f00\u59cb\u4e4b\u524d\u6267\u884c\uff0c\u8bf7\u4f7f\u7528",(0,s.jsx)(n.code,{children:"beforeEach"}),"\u3002"]}),"\n",(0,s.jsx)(n.h3,{id:"beforeeachfn-timeout",children:(0,s.jsx)(n.code,{children:"beforeEach(fn, timeout)"})}),"\n",(0,s.jsx)(n.p,{children:"\u6587\u4ef6\u5185\u6bcf\u4e2a\u6d4b\u8bd5\u5f00\u59cb\u524d\u6267\u884c\u7684\u94a9\u5b50\u51fd\u6570\u3002 \u5982\u679c\u4f20\u5165\u7684\u56de\u8c03\u51fd\u6570\u8fd4\u56de\u503c\u662f promise \u6216\u8005 generator\uff0cJest \u4f1a\u7b49\u5f85 promise resolve \u518d\u7ee7\u7eed\u6267\u884c\u6d4b\u8bd5\u3002"}),"\n",(0,s.jsx)(n.p,{children:"\u53ef\u9009\u5730\u4f20\u5165\u7b2c\u4e8c\u4e2a\u53c2\u6570 timeout\uff08\u6beb\u79d2\uff09 \u6307\u5b9a\u51fd\u6570\u6267\u884c\u8d85\u65f6\u65f6\u95f4\u3002 The default timeout is 5 seconds."}),"\n",(0,s.jsx)(n.p,{children:"\u4f7f\u7528 beforeEach \u975e\u5e38\u65b9\u4fbf\u4f60\u91cd\u65b0\u8bbe\u7f6e\u4e00\u4e9b\u5168\u5c40\u72b6\u6001\u5728\u6bcf\u4e2a\u6d4b\u8bd5\u5f00\u59cb\u524d\u3002"}),"\n",(0,s.jsx)(n.p,{children:"\u4f8b\u5982\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const globalDatabase = makeGlobalDatabase();\n\nbeforeEach(() => {\n  // Clears the database and adds some testing data.\n  // Jest \u4f1a\u7b49\u5f85 promise resolve \u518d\u53bb\u6267\u884c\u6d4b\u8bd5\n  return globalDatabase.clear().then(() => {\n    return globalDatabase.insert({testData: 'foo'});\n  });\n});\n\ntest('can find things', () => {\n  return globalDatabase.find('thing', {}, results => {\n    expect(results.length).toBeGreaterThan(0);\n  });\n});\n\ntest('can insert a thing', () => {\n  return globalDatabase.insert('thing', makeThing(), response => {\n    expect(response.success).toBeTruthy();\n  });\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["\u4e0a\u8ff0\u4ee3\u7801\u4e2d ",(0,s.jsx)(n.code,{children:"beforeEach"})," \u786e\u4fdd\u4e86\u6bcf\u4e2a\u6d4b\u8bd5\u5f00\u59cb\u524d\u4f1a\u91cd\u7f6e\u6570\u636e\u5e93\u6570\u636e\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u5982\u679c ",(0,s.jsx)(n.code,{children:"beforeEach"})," \u5b9a\u4e49\u5728 ",(0,s.jsx)(n.code,{children:"describe"})," \u5757\u5185\uff0c\u5b83\u5c06\u4f1a\u5728\u8be5 ",(0,s.jsx)(n.code,{children:"describe"})," \u5757\u5185\u7684\u6bcf\u4e2a\u6d4b\u8bd5\u8fd0\u884c\u4e4b\u524d\u6267\u884c\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u5982\u679c\u4f60\u9700\u8981\u5728\u8fd0\u884c\u6240\u6709\u6d4b\u8bd5\u4e4b\u524d\u6267\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u4ee3\u7801, \u8bf7\u4f7f\u7528 ",(0,s.jsx)(n.code,{children:"beforeAll"}),"\u3002"]}),"\n",(0,s.jsx)(n.h3,{id:"describename-fn",children:(0,s.jsx)(n.code,{children:"describe(name, fn)"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"describe(name, fn)"})," \u662f\u4e00\u4e2a\u5c06\u591a\u4e2a\u76f8\u5173\u7684\u6d4b\u8bd5\u7ec4\u5408\u5728\u4e00\u8d77\u7684\u5757\u3002 \u6bd4\u5982\uff0c\u73b0\u5728\u6709\u4e00\u4e2a",(0,s.jsx)(n.code,{children:"myBeverage"}),"\u5bf9\u8c61\uff0c\u63cf\u8ff0\u4e86\u67d0\u79cd\u996e\u6599\u597d\u559d\u4f46\u662f\u4e0d\u9178\uff0c\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u6d4b\u8bd5\uff1a"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const myBeverage = {\n  delicious: true,\n  sour: false,\n};\n\ndescribe('my beverage', () => {\n  test('is delicious', () => {\n    expect(myBeverage.delicious).toBeTruthy();\n  });\n\n  test('is not sour', () => {\n    expect(myBeverage.sour).toBeFalsy();\n  });\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["\u6ce8\u610f\uff1a\u8fd9\u4e0d\u662f\u5f3a\u5236\u7684\uff0c\u4f60\u751a\u81f3\u53ef\u4ee5\u76f4\u63a5\u628a ",(0,s.jsx)(n.code,{children:"test"})," \u5757\u76f4\u63a5\u5199\u5728\u6700\u5916\u5c42\u3002 \u4f46\u662f\u5982\u679c\u4f60\u4e60\u60ef\u6309\u7ec4\u7f16\u5199\u6d4b\u8bd5\uff0c\u4f7f\u7528 ",(0,s.jsx)(n.code,{children:"describe"})," \u5305\u88f9\u76f8\u5173\u6d4b\u8bd5\u7528\u4f8b\u66f4\u52a0\u53cb\u597d\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u5982\u679c\u4f60\u6709\u591a\u5c42\u7ea7\u7684\u6d4b\u8bd5\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5d4c\u5957\u4f7f\u7528 ",(0,s.jsx)(n.code,{children:"describe"})," \u5757\uff1a"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const binaryStringToNumber = binString => {\n  if (!/^[01]+$/.test(binString)) {\n    throw new CustomError('Not a binary number.');\n  }\n\n  return parseInt(binString, 2);\n};\n\ndescribe('binaryStringToNumber', () => {\n  describe('given an invalid binary string', () => {\n    test('composed of non-numbers throws CustomError', () => {\n      expect(() => binaryStringToNumber('abc')).toThrow(CustomError);\n    });\n\n    test('with extra whitespace throws CustomError', () => {\n      expect(() => binaryStringToNumber('  100')).toThrow(CustomError);\n    });\n  });\n\n  describe('given a valid binary string', () => {\n    test('returns the correct number', () => {\n      expect(binaryStringToNumber('100')).toBe(4);\n    });\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"describeeachtablename-fn-timeout",children:(0,s.jsx)(n.code,{children:"describe.each(table)(name, fn, timeout)"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"describe.each"})," \u53ef\u4ee5\u7528\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\u53bb\u6d4b\u8bd5\u540c\u4e00\u6d4b\u8bd5\u7528\u4f8b\u3002 \u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u53ea\u7528\u7f16\u5199\u4e00\u6b21\u6d4b\u8bd5\u4ee3\u7801\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"describe.each"})," \u6709\u4e24\u79cd\u4f7f\u7528\u65b9\u5f0f\uff1a"]}),"\n",(0,s.jsxs)(n.h4,{id:"1-describeeachtablename-fn-timeout",children:["1. ",(0,s.jsx)(n.code,{children:"describe.each(table)(name, fn, timeout)"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"table"}),": ",(0,s.jsx)(n.code,{children:"\u6570\u7ec4\u7c7b\u578b"}),"\u3002table\u91cc\u7684\u6570\u636e\u5c06\u6309\u7167\u987a\u5e8f\u4f5c\u4e3a\u53c2\u6570\u4f20\u7ed9 fn \u51fd\u6570 If you pass in a 1D array of primitives, internally it will be mapped to a table i.e. ",(0,s.jsx)(n.code,{children:"[1, 2, 3] -> [[1], [2], [3]]"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"name"}),": ",(0,s.jsx)(n.code,{children:"\u5b57\u7b26\u4e32\u7c7b\u578b"})," \uff0c\u4ee3\u8868\u6d4b\u8bd5\u5957\u4ef6\u7684\u6807\u9898"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u6839\u636e\u6ce8\u5165\u53c2\u6570\u7684\u4f4d\u7f6e\u751f\u6210\u76f8\u5e94\u7684\u6d4b\u8bd5\u6807\u9898\uff0c\u53c2\u8003 ",(0,s.jsxs)(n.a,{href:"https://nodejs.org/api/util.html#util_util_format_format_args",children:[(0,s.jsx)(n.code,{children:"printf"})," formatting"]}),"\uff1a","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%p"})," - ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/pretty-format",children:"pretty-format"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%s"}),"- String."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%d"}),"- Number."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%i"})," - Integer."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%f"})," - Floating point value."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%j"})," - JSON."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%o"})," - Object."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%#"})," - Index of the test case."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%%"})," - single percent sign ('%'). \u5b83\u4e0d\u4f7f\u7528\u53c2\u6570\u3002"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\u6216\u8005\u6839\u636e\u6ce8\u5165\u5bf9\u8c61\uff08",(0,s.jsx)(n.code,{children:"$variable"}),"\uff09\u4e0a\u7684\u5c5e\u6027\u751f\u6210\u76f8\u5e94\u7684\u6d4b\u8bd5\u6807\u9898\uff0c\u5982\uff1a","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["To inject nested object values use you can supply a keyPath i.e. ",(0,s.jsx)(n.code,{children:"$variable.path.to.value"})]}),"\n",(0,s.jsxs)(n.li,{children:["\u4f7f\u7528 ",(0,s.jsx)(n.code,{children:"$#"})," \u6ce8\u5165\u5f53\u524d\u6d4b\u8bd5\u7528\u4f8b\u7684\u987a\u5e8f\u7f16\u53f7"]}),"\n",(0,s.jsxs)(n.li,{children:["You cannot use ",(0,s.jsx)(n.code,{children:"$variable"})," with the ",(0,s.jsx)(n.code,{children:"printf"})," formatting except for ",(0,s.jsx)(n.code,{children:"%%"})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"fn"}),": ",(0,s.jsx)(n.code,{children:"Function"})," the suite of tests to be run, this is the function that will receive the parameters in each row as function arguments."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["\u53ef\u9009\u5730\u4f20\u5165\u7b2c\u4e09\u4e2a\u53c2\u6570",(0,s.jsx)(n.code,{children:"timeout"}),"\uff08\u6beb\u79d2\uff09\u6307\u5b9a\u8be5\u6d4b\u8bd5\u5957\u4ef6\u6bcf\u6b21\u8fd0\u884c\u7684\u6700\u957f\u65f6\u95f4\u3002 The default timeout is 5 seconds."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"\u793a\u4f8b\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"describe.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test(`returned value not be greater than ${expected}`, () => {\n    expect(a + b).not.toBeGreaterThan(expected);\n  });\n\n  test(`returned value not be less than ${expected}`, () => {\n    expect(a + b).not.toBeLessThan(expected);\n  });\n});\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"describe.each([\n  {a: 1, b: 1, expected: 2},\n  {a: 1, b: 2, expected: 3},\n  {a: 2, b: 1, expected: 3},\n])('.add($a, $b)', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test(`returned value not be greater than ${expected}`, () => {\n    expect(a + b).not.toBeGreaterThan(expected);\n  });\n\n  test(`returned value not be less than ${expected}`, () => {\n    expect(a + b).not.toBeLessThan(expected);\n  });\n});\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"2-describeeachtablename-fn-timeout",children:["2. ",(0,s.jsx)(n.code,{children:"describe.each`table`(name, fn, timeout)"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"table"}),": ",(0,s.jsx)(n.code,{children:"Tagged Template Literal"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["First row of variable name column headings separated with ",(0,s.jsx)(n.code,{children:"|"})]}),"\n",(0,s.jsxs)(n.li,{children:["One or more subsequent rows of data supplied as template literal expressions using ",(0,s.jsx)(n.code,{children:"${value}"})," syntax."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"name"}),": ",(0,s.jsx)(n.code,{children:"String"})," the title of the test suite, use ",(0,s.jsx)(n.code,{children:"$variable"})," to inject test data into the suite title from the tagged template expressions, and ",(0,s.jsx)(n.code,{children:"$#"})," for the index of the row.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["To inject nested object values use you can supply a keyPath i.e. ",(0,s.jsx)(n.code,{children:"$variable.path.to.value"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"fn"}),": ",(0,s.jsx)(n.code,{children:"Function"})," the suite of tests to be run, this is the function that will receive the test data object."]}),"\n",(0,s.jsxs)(n.li,{children:["\u53ef\u9009\u5730\u4f20\u5165\u7b2c\u4e09\u4e2a\u53c2\u6570",(0,s.jsx)(n.code,{children:"timeout"}),"\uff08\u6beb\u79d2\uff09\u6307\u5b9a\u8be5\u6d4b\u8bd5\u5957\u4ef6\u6bcf\u6b21\u8fd0\u884c\u7684\u6700\u957f\u65f6\u95f4\u3002 The default timeout is 5 seconds."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"\u793a\u4f8b\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"describe.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test(`returned value not be greater than ${expected}`, () => {\n    expect(a + b).not.toBeGreaterThan(expected);\n  });\n\n  test(`returned value not be less than ${expected}`, () => {\n    expect(a + b).not.toBeLessThan(expected);\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"describeonlyname-fn",children:(0,s.jsx)(n.code,{children:"describe.only(name, fn)"})}),"\n",(0,s.jsxs)(n.p,{children:["\u522b\u540d\uff1a",(0,s.jsx)(n.code,{children:"fdescribe(name, fn)"})]}),"\n",(0,s.jsxs)(n.p,{children:["\u8fd0\u884c\u67d0\u4e2a\u6307\u5b9a\u7684",(0,s.jsx)(n.code,{children:"describe"}),"\u5757\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 ",(0,s.jsx)(n.code,{children:" describe.only"}),"\uff1a"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"describe.only('my beverage', () => {\n  test('is delicious', () => {\n    expect(myBeverage.delicious).toBeTruthy();\n  });\n\n  test('is not sour', () => {\n    expect(myBeverage.sour).toBeFalsy();\n  });\n});\n\ndescribe('my other beverage', () => {\n  // ... will be skipped\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"describeonlyeachtablename-fn",children:(0,s.jsx)(n.code,{children:"describe.only.each(table)(name, fn)"})}),"\n",(0,s.jsxs)(n.p,{children:["\u522b\u540d\uff1a ",(0,s.jsx)(n.code,{children:"fdescribe.each(table)(name, fn)"})," \u6216 ",(0,s.jsx)(n.code,{children:"fit(name, fn)"})]}),"\n",(0,s.jsxs)(n.p,{children:["\u7528\u591a\u7ec4\u6570\u7ec4\u6d4b\u8bd5\u67d0\u4e2a\u7279\u5b9a\u7684\u6d4b\u8bd5\u5957\u4ef6\uff0c\u4f7f\u7528 ",(0,s.jsx)(n.code,{children:"describe.only.each"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"describe.only.each"})," \u6709\u4e24\u79cd\u4f7f\u7528\u65b9\u5f0f\uff1a"]}),"\n",(0,s.jsx)(n.h4,{id:"describeonlyeachtablename-fn-1",children:(0,s.jsx)(n.code,{children:"describe.only.each(table)(name, fn)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"describe.only.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"describeonlyeachtablename-fn-2",children:(0,s.jsx)(n.code,{children:"describe.only.each`table`(name, fn)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"describe.only.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', ({a, b, expected}) => {\n  test('passes', () => {\n    expect(a + b).toBe(expected);\n  });\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"describeskipname-fn",children:(0,s.jsx)(n.code,{children:"describe.skip(name, fn)"})}),"\n",(0,s.jsxs)(n.p,{children:["\u522b\u540d\uff1a",(0,s.jsx)(n.code,{children:"xdescribe(name, fn)"})]}),"\n",(0,s.jsxs)(n.p,{children:["\u5982\u679c\u60f3\u8df3\u8fc7\u7279\u5b9a\u7684 ",(0,s.jsx)(n.code,{children:"describe"})," \u5757\uff0c\u53ef\u4ee5\u4f7f\u7528",(0,s.jsx)(n.code,{children:"describe.skip"}),"\uff1a"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"describe('my beverage', () => {\n  test('is delicious', () => {\n    expect(myBeverage.delicious).toBeTruthy();\n  });\n\n  test('is not sour', () => {\n    expect(myBeverage.sour).toBeFalsy();\n  });\n});\n\ndescribe.skip('my other beverage', () => {\n  // ... will be skipped\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"describe.skip"})," \u5e38\u7528\u4e8e\u4ee3\u66ff\u6ce8\u91ca\u6389\u7528\u4f8b\uff0c\u8fd9\u6837\u505a\u66f4\u663e\u5e72\u51c0\u3002 \u8bf7\u6ce8\u610f\uff0c ",(0,s.jsx)(n.code,{children:"describe"})," \u5757\u4ecd\u4f1a\u8fd0\u884c\u3002 \u5982\u679c\u6709\u540c\u6837\u8981\u8df3\u8fc7\u7684\u521d\u59cb\u5316\u4ee3\u7801\uff0c\u8bf7\u653e\u5728 ",(0,s.jsx)(n.code,{children:"beforeAll"})," \u6216 ",(0,s.jsx)(n.code,{children:"beforeEach"})," \u5185\u3002"]}),"\n",(0,s.jsx)(n.h3,{id:"describeskipeachtablename-fn",children:(0,s.jsx)(n.code,{children:"describe.skip.each(table)(name, fn)"})}),"\n",(0,s.jsxs)(n.p,{children:["\u522b\u540d\uff1a ",(0,s.jsx)(n.code,{children:"xdescribe.each(table)(name, fn)"})," \u6216 ",(0,s.jsx)(n.code,{children:"fit(name, fn)"})]}),"\n",(0,s.jsxs)(n.p,{children:["\u8df3\u8fc7\u7528\u591a\u7ec4\u6570\u7ec4\u6d4b\u8bd5\u67d0\u4e2a\u7279\u5b9a\u7684\u6d4b\u8bd5\u5957\u4ef6\uff0c\u4f7f\u7528 ",(0,s.jsx)(n.code,{children:"describe.skip.each"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"describe.skip.each"})," \u6709\u4e24\u79cd\u4f7f\u7528\u65b9\u5f0f\uff1a"]}),"\n",(0,s.jsx)(n.h4,{id:"describeskipeachtablename-fn-1",children:(0,s.jsx)(n.code,{children:"describe.skip.each(table)(name, fn)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"describe.skip.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected); // will not be run\n  });\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"describeskipeachtablename-fn-2",children:(0,s.jsx)(n.code,{children:"describe.skip.each`table`(name, fn)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"describe.skip.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', ({a, b, expected}) => {\n  test('will not be run', () => {\n    expect(a + b).toBe(expected); // will not be run\n  });\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"testname-fn-timeout",children:(0,s.jsx)(n.code,{children:"test(name, fn, timeout)"})}),"\n",(0,s.jsxs)(n.p,{children:["\u522b\u540d\uff1a",(0,s.jsx)(n.code,{children:"it(name, fn, timeout)"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"test"}),"\u662f\u5c06\u8fd0\u884c\u6d4b\u8bd5\u7684\u65b9\u6cd5\u3002 \u4f8b\u5982\uff0c\u73b0\u5728\u6709\u4e00\u4e2a\u51fd\u6570",(0,s.jsx)(n.code,{children:"inchesOfRain()"}),"\uff0c\u8fd4\u56de\u503c\u5e94\u8be5\u4e3a\u96f6\u3002 \u4f60\u7684\u6574\u4e2a\u6d4b\u8bd5\u53ef\u80fd\u662f\uff1a"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('did not rain', () => {\n  expect(inchesOfRain()).toBe(0);\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u6d4b\u8bd5\u540d\u79f0; \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5305\u542b\u6d4b\u8bd5\u671f\u671b\u7684\u51fd\u6570\u3002 \u53ef\u9009\u5730\u4f20\u5165\u7b2c\u4e09\u4e2a\u53c2\u6570 timeout\uff08\u6beb\u79d2\uff09 \u6307\u5b9a\u6d4b\u8bd5\u8d85\u65f6\u65f6\u95f4\u3002 The default timeout is 5 seconds."}),"\n",(0,s.jsxs)(n.p,{children:["If a ",(0,s.jsx)(n.strong,{children:"promise is returned"})," from ",(0,s.jsx)(n.code,{children:"test"}),", Jest will wait for the promise to resolve before letting the test complete. \u4f8b\u5982\uff0c\u5047\u8bbe",(0,s.jsx)(n.code,{children:"fetchBeverageList()"}),"\u8fd4\u56de\u4e00\u4e2a\u5e94\u8be5\u89e3\u6790\u4e3a\u5177\u6709",(0,s.jsx)(n.code,{children:"lemon"}),"\u7684\u5217\u8868\u7684\u627f\u8bfa\u3002 You can test this with:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('has lemon in it', () => {\n  return fetchBeverageList().then(list => {\n    expect(list).toContain('lemon');\n  });\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Even though the call to ",(0,s.jsx)(n.code,{children:"test"})," will return right away, the test doesn't complete until the promise resolves. For more details, see ",(0,s.jsx)(n.a,{href:"/zh-Hans/docs/asynchronous",children:"Testing Asynchronous Code"})," page."]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["Jest will also wait if you ",(0,s.jsx)(n.strong,{children:"provide an argument to the test function"}),", usually called ",(0,s.jsx)(n.code,{children:"done"}),". This could be handy when you want to test ",(0,s.jsx)(n.a,{href:"/zh-Hans/docs/asynchronous#callbacks",children:"callbacks"}),"."]})}),"\n",(0,s.jsx)(n.h3,{id:"testconcurrentname-fn-timeout",children:(0,s.jsx)(n.code,{children:"test.concurrent(name, fn, timeout)"})}),"\n",(0,s.jsxs)(n.p,{children:["\u522b\u540d\uff1a ",(0,s.jsx)(n.code,{children:"it.concurt(name, fn, timeout)"})]}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"test.concurrent"})," is considered experimental - see ",(0,s.jsx)(n.a,{href:"https://github.com/jestjs/jest/labels/Area%3A%20Concurrent",children:"here"})," for details on missing features and other issues."]})}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"test.concurrent"})," if you want the test to run concurrently."]}),"\n",(0,s.jsx)(n.p,{children:"The first argument is the test name; the second argument is an asynchronous function that contains the expectations to test. \u53ef\u9009\u5730\u4f20\u5165\u7b2c\u4e09\u4e2a\u53c2\u6570 timeout\uff08\u6beb\u79d2\uff09 \u6307\u5b9a\u6d4b\u8bd5\u8d85\u65f6\u65f6\u95f4\u3002 The default timeout is 5 seconds."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test.concurrent('addition of 2 numbers', async () => {\n  expect(5 + 3).toBe(8);\n});\n\ntest.concurrent('subtraction 2 numbers', async () => {\n  expect(5 - 3).toBe(2);\n});\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["Use the ",(0,s.jsx)(n.a,{href:"Configuration.md/#maxconcurrency-number",children:(0,s.jsx)(n.code,{children:"maxConcurrency"})})," configuration option to prevent Jest from executing more than the specified amount of tests at the same time."]})}),"\n",(0,s.jsx)(n.h3,{id:"testconcurrenteachtablename-fn-timeout",children:(0,s.jsx)(n.code,{children:"test.concurrent.each(table)(name, fn, timeout)"})}),"\n",(0,s.jsxs)(n.p,{children:["\u522b\u540d\uff1a ",(0,s.jsx)(n.code,{children:"it.combut.each(table)(name, fn, timeout)"})]}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"test.concurrent.each"})," if you keep duplicating the same test with different data. ",(0,s.jsx)(n.code,{children:"test.each"})," allows you to write the test once and pass data in, the tests are all run asynchronously. ",(0,s.jsx)(n.code,{children:"test.each"})," allows you to write the test once and pass data in, the tests are all run asynchronously."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"test.concurrent.each"})," is available with two APIs:"]}),"\n",(0,s.jsxs)(n.h4,{id:"1-testconcurrenteachtablename-fn-timeout",children:["1. ",(0,s.jsx)(n.code,{children:"test.concurrent.each(table)(name, fn, timeout)"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"table"}),": ",(0,s.jsx)(n.code,{children:"\u6570\u7ec4"})," of Arrays with the arguments that are passed into the test ",(0,s.jsx)(n.code,{children:"fn"})," for each row. If you pass in a 1D array of primitives, internally it will be mapped to a table i.e. ",(0,s.jsx)(n.code,{children:"[1, 2, 3] -> [[1], [2], [3]]"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"name"}),": ",(0,s.jsx)(n.code,{children:"\u5b57\u7b26\u4e32"})," the title of the test block.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u6839\u636e\u6ce8\u5165\u53c2\u6570\u7684\u4f4d\u7f6e\u751f\u6210\u76f8\u5e94\u7684\u6d4b\u8bd5\u6807\u9898\uff0c\u53c2\u8003 ",(0,s.jsxs)(n.a,{href:"https://nodejs.org/api/util.html#util_util_format_format_args",children:[(0,s.jsx)(n.code,{children:"printf"})," formatting"]}),"\uff1a","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%p"})," - ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/pretty-format",children:"pretty-format"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%s"}),"- String."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%d"}),"- Number."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%i"})," - Integer."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%f"})," - Floating point value."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%j"})," - JSON."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%o"})," - Object."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%#"})," - Index of the test case."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%%"})," - single percent sign ('%'). \u5b83\u4e0d\u4f7f\u7528\u53c2\u6570\u3002"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"fn"}),": ",(0,s.jsx)(n.code,{children:"Function"})," the test to be run, this is the function that will receive the parameters in each row as function arguments, ",(0,s.jsx)(n.strong,{children:"this will have to be an asynchronous function"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["\u53ef\u9009\u5730\u4f20\u5165\u7b2c\u4e09\u4e2a\u53c2\u6570",(0,s.jsx)(n.code,{children:"timeout"}),"\uff08\u6beb\u79d2\uff09\u6307\u5b9a\u8be5\u6d4b\u8bd5\u5957\u4ef6\u6bcf\u6b21\u8fd0\u884c\u7684\u6700\u957f\u65f6\u95f4\u3002 The default timeout is 5 seconds."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"\u793a\u4f8b\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test.concurrent.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', async (a, b, expected) => {\n  expect(a + b).toBe(expected);\n});\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"2-testconcurrenteachtablename-fn-timeout",children:["2. ",(0,s.jsx)(n.code,{children:"test.concurrent.each`table`(name, fn, timeout)"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"table"}),": ",(0,s.jsx)(n.code,{children:"Tagged Template Literal"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["First row of variable name column headings separated with ",(0,s.jsx)(n.code,{children:"|"})]}),"\n",(0,s.jsxs)(n.li,{children:["One or more subsequent rows of data supplied as template literal expressions using ",(0,s.jsx)(n.code,{children:"${value}"})," syntax."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"name"}),": ",(0,s.jsx)(n.code,{children:"\u5b57\u7b26\u4e32"})," the title of the test, use ",(0,s.jsx)(n.code,{children:"$variable"})," to inject test data into the test title from the tagged template expressions.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["To inject nested object values use you can supply a keyPath i.e. ",(0,s.jsx)(n.code,{children:"$variable.path.to.value"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"fn"}),": ",(0,s.jsx)(n.code,{children:"Function"})," the test to be run, this is the function that will receive the test data object, ",(0,s.jsx)(n.strong,{children:"this will have to be an asynchronous function"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["\u53ef\u9009\u5730\u4f20\u5165\u7b2c\u4e09\u4e2a\u53c2\u6570",(0,s.jsx)(n.code,{children:"timeout"}),"\uff08\u6beb\u79d2\uff09\u6307\u5b9a\u8be5\u6d4b\u8bd5\u5957\u4ef6\u6bcf\u6b21\u8fd0\u884c\u7684\u6700\u957f\u65f6\u95f4\u3002 The default timeout is 5 seconds."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"\u793a\u4f8b\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test.concurrent.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', async ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"testconcurrentonlyeachtablename-fn",children:(0,s.jsx)(n.code,{children:"test.concurrent.only.each(table)(name, fn)"})}),"\n",(0,s.jsxs)(n.p,{children:["\u522b\u540d\uff1a ",(0,s.jsx)(n.code,{children:"it.context.only.each(table)(name, fn)"})]}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"test.concurrent.only.each"})," if you want to only run specific tests with different test data concurrently."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"test.concurrent.only.each"})," is available with two APIs:"]}),"\n",(0,s.jsx)(n.h4,{id:"testconcurrentonlyeachtablename-fn-1",children:(0,s.jsx)(n.code,{children:"test.concurrent.only.each(table)(name, fn)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test.concurrent.only.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', async (a, b, expected) => {\n  expect(a + b).toBe(expected);\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"testonlyeachtablename-fn",children:(0,s.jsx)(n.code,{children:"test.only.each`table`(name, fn)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test.concurrent.only.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', async ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"testconcurrentskipeachtablename-fn",children:(0,s.jsx)(n.code,{children:"test.concurrent.skip.each(table)(name, fn)"})}),"\n",(0,s.jsxs)(n.p,{children:["\u522b\u540d\uff1a ",(0,s.jsx)(n.code,{children:"it.assurt.skip.each(table)(name, fn)"})]}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"test.concurrent.skip.each"})," if you want to stop running a collection of asynchronous data driven tests."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"test.concurrent.skip.each"})," is available with two APIs:"]}),"\n",(0,s.jsx)(n.h4,{id:"testconcurrentskipeachtablename-fn-1",children:(0,s.jsx)(n.code,{children:"test.concurrent.skip.each(table)(name, fn)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test.concurrent.skip.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', async (a, b, expected) => {\n  expect(a + b).toBe(expected); // will not be run\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"testconcurrentskipeachtablename-fn-2",children:(0,s.jsx)(n.code,{children:"test.concurrent.skip.each`table`(name, fn)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test.concurrent.skip.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', async ({a, b, expected}) => {\n  expect(a + b).toBe(expected); // will not be run\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"testeachtablename-fn-timeout",children:(0,s.jsx)(n.code,{children:"test.each(table)(name, fn, timeout)"})}),"\n",(0,s.jsxs)(n.p,{children:["\u522b\u540d\uff1a ",(0,s.jsx)(n.code,{children:"it.each(table)(name, fn)"})," \u548c ",(0,s.jsx)(n.code,{children:"it.each`table`(name, fn)"})]}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"test.each"})," if you keep duplicating the same test with different data. ",(0,s.jsx)(n.code,{children:"test.each"})," allows you to write the test once and pass data in. ",(0,s.jsx)(n.code,{children:"test.each"})," allows you to write the test once and pass data in."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"test.each"})," is available with two APIs:"]}),"\n",(0,s.jsxs)(n.h4,{id:"1-testeachtablename-fn-timeout",children:["1. ",(0,s.jsx)(n.code,{children:"test.each(table)(name, fn, timeout)"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"table"}),": ",(0,s.jsx)(n.code,{children:"\u6570\u7ec4"})," of Arrays with the arguments that are passed into the test ",(0,s.jsx)(n.code,{children:"fn"})," for each row. If you pass in a 1D array of primitives, internally it will be mapped to a table i.e. ",(0,s.jsx)(n.code,{children:"[1, 2, 3] -> [[1], [2], [3]]"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"name"}),": ",(0,s.jsx)(n.code,{children:"\u5b57\u7b26\u4e32"})," the title of the test block.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u6839\u636e\u6ce8\u5165\u53c2\u6570\u7684\u4f4d\u7f6e\u751f\u6210\u76f8\u5e94\u7684\u6d4b\u8bd5\u6807\u9898\uff0c\u53c2\u8003 ",(0,s.jsxs)(n.a,{href:"https://nodejs.org/api/util.html#util_util_format_format_args",children:[(0,s.jsx)(n.code,{children:"printf"})," formatting"]}),"\uff1a","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%p"})," - ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/pretty-format",children:"pretty-format"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%s"}),"- String."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%d"}),"- Number."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%i"})," - Integer."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%f"})," - Floating point value."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%j"})," - JSON."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%o"})," - Object."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%#"})," - Index of the test case."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%%"})," - single percent sign ('%'). \u5b83\u4e0d\u4f7f\u7528\u53c2\u6570\u3002"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\u6216\u8005\u6839\u636e\u6ce8\u5165\u5bf9\u8c61\uff08",(0,s.jsx)(n.code,{children:"$variable"}),"\uff09\u4e0a\u7684\u5c5e\u6027\u751f\u6210\u76f8\u5e94\u7684\u6d4b\u8bd5\u6807\u9898\uff0c\u5982\uff1a","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["To inject nested object values use you can supply a keyPath i.e. ",(0,s.jsx)(n.code,{children:"$variable.path.to.value"})]}),"\n",(0,s.jsxs)(n.li,{children:["\u4f7f\u7528 ",(0,s.jsx)(n.code,{children:"$#"})," \u6ce8\u5165\u5f53\u524d\u6d4b\u8bd5\u7528\u4f8b\u7684\u987a\u5e8f\u7f16\u53f7"]}),"\n",(0,s.jsxs)(n.li,{children:["You cannot use ",(0,s.jsx)(n.code,{children:"$variable"})," with the ",(0,s.jsx)(n.code,{children:"printf"})," formatting except for ",(0,s.jsx)(n.code,{children:"%%"})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"fn"}),": ",(0,s.jsx)(n.code,{children:"Function"})," the test to be run, this is the function that will receive the parameters in each row as function arguments."]}),"\n",(0,s.jsxs)(n.li,{children:["\u53ef\u9009\u5730\u4f20\u5165\u7b2c\u4e09\u4e2a\u53c2\u6570",(0,s.jsx)(n.code,{children:"timeout"}),"\uff08\u6beb\u79d2\uff09\u6307\u5b9a\u8be5\u6d4b\u8bd5\u5957\u4ef6\u6bcf\u6b21\u8fd0\u884c\u7684\u6700\u957f\u65f6\u95f4\u3002 The default timeout is 5 seconds."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"\u793a\u4f8b\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  expect(a + b).toBe(expected);\n});\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test.each([\n  {a: 1, b: 1, expected: 2},\n  {a: 1, b: 2, expected: 3},\n  {a: 2, b: 1, expected: 3},\n])('.add($a, $b)', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"2-testeachtablename-fn-timeout",children:["2. ",(0,s.jsx)(n.code,{children:"test.each`table`(name, fn, timeout)"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"table"}),": ",(0,s.jsx)(n.code,{children:"Tagged Template Literal"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["First row of variable name column headings separated with ",(0,s.jsx)(n.code,{children:"|"})]}),"\n",(0,s.jsxs)(n.li,{children:["One or more subsequent rows of data supplied as template literal expressions using ",(0,s.jsx)(n.code,{children:"${value}"})," syntax."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"name"}),": ",(0,s.jsx)(n.code,{children:"\u5b57\u7b26\u4e32"})," the title of the test, use ",(0,s.jsx)(n.code,{children:"$variable"})," to inject test data into the test title from the tagged template expressions.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["To inject nested object values use you can supply a keyPath i.e. ",(0,s.jsx)(n.code,{children:"$variable.path.to.value"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"fn"}),": ",(0,s.jsx)(n.code,{children:"Function"})," the test to be run, this is the function that will receive the test data object."]}),"\n",(0,s.jsxs)(n.li,{children:["\u53ef\u9009\u5730\u4f20\u5165\u7b2c\u4e09\u4e2a\u53c2\u6570",(0,s.jsx)(n.code,{children:"timeout"}),"\uff08\u6beb\u79d2\uff09\u6307\u5b9a\u8be5\u6d4b\u8bd5\u5957\u4ef6\u6bcf\u6b21\u8fd0\u884c\u7684\u6700\u957f\u65f6\u95f4\u3002 The default timeout is 5 seconds."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"\u793a\u4f8b\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"testfailingname-fn-timeout",children:(0,s.jsx)(n.code,{children:"test.failing(name, fn, timeout)"})}),"\n",(0,s.jsxs)(n.p,{children:["\u522b\u540d\uff1a ",(0,s.jsx)(n.code,{children:"it.failing(name, fn, timeout)"})]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["This is only available with the default ",(0,s.jsx)(n.a,{href:"https://github.com/jestjs/jest/tree/main/packages/jest-circus",children:"jest-circus"})," runner."]})}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"test.failing"})," when you are writing a test and expecting it to fail. These tests will behave the other way normal tests do. If ",(0,s.jsx)(n.code,{children:"failing"})," test will throw any errors then it will pass. If it does not throw it will fail."]}),"\n",(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsxs)(n.p,{children:["You can use this type of test i.e. when writing code in a BDD way. In that case the tests will not show up as failing until they pass. Then you can just remove the ",(0,s.jsx)(n.code,{children:"failing"})," modifier to make them pass."]}),(0,s.jsx)(n.p,{children:"It can also be a nice way to contribute failing tests to a project, even if you don't know how to fix the bug."})]}),"\n",(0,s.jsx)(n.p,{children:"\u793a\u4f8b\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test.failing('it is not equal', () => {\n  expect(5).toBe(6); // this test will pass\n});\n\ntest.failing('it is equal', () => {\n  expect(10).toBe(10); // this test will fail\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"testfailingeachname-fn-timeout",children:(0,s.jsx)(n.code,{children:"test.failing.each(name, fn, timeout)"})}),"\n",(0,s.jsxs)(n.p,{children:["Also under the alias: ",(0,s.jsx)(n.code,{children:"it.failing.each(table)(name, fn)"})," and ",(0,s.jsx)(n.code,{children:"it.failing.each`table`(name, fn)"})]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["This is only available with the default ",(0,s.jsx)(n.a,{href:"https://github.com/jestjs/jest/tree/main/packages/jest-circus",children:"jest-circus"})," runner."]})}),"\n",(0,s.jsxs)(n.p,{children:["You can also run multiple tests at once by adding ",(0,s.jsx)(n.code,{children:"each"})," after ",(0,s.jsx)(n.code,{children:"failing"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"\u793a\u4f8b\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test.failing.each([\n  {a: 1, b: 1, expected: 2},\n  {a: 1, b: 2, expected: 3},\n  {a: 2, b: 1, expected: 3},\n])('.add($a, $b)', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"testonlyfailingname-fn-timeout",children:(0,s.jsx)(n.code,{children:"test.only.failing(name, fn, timeout)"})}),"\n",(0,s.jsxs)(n.p,{children:["\u522b\u540d\uff1a ",(0,s.jsx)(n.code,{children:"it.only.failing(name, fn, timeout)"})," \u548c ",(0,s.jsx)(n.code,{children:"fit.failing(name, fn, timeout)"})]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["This is only available with the default ",(0,s.jsx)(n.a,{href:"https://github.com/jestjs/jest/tree/main/packages/jest-circus",children:"jest-circus"})," runner."]})}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"test.only.failing"})," if you want to only run a specific failing test."]}),"\n",(0,s.jsx)(n.h3,{id:"testskipfailingname-fn-timeout",children:(0,s.jsx)(n.code,{children:"test.skip.failing(name, fn, timeout)"})}),"\n",(0,s.jsxs)(n.p,{children:["\u522b\u540d\uff1a ",(0,s.jsx)(n.code,{children:"it.skip.failing(name, fn, timeout)"}),"\u3001",(0,s.jsx)(n.code,{children:"xit.failing(name, fn, timeout)"}),"\u3001",(0,s.jsx)(n.code,{children:"xtest.failing(name, fn, timeout)"})]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["This is only available with the default ",(0,s.jsx)(n.a,{href:"https://github.com/jestjs/jest/tree/main/packages/jest-circus",children:"jest-circus"})," runner."]})}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"test.skip.failing"})," if you want to skip running a specific failing test."]}),"\n",(0,s.jsx)(n.h3,{id:"1-testonlyname-fn-timeout",children:(0,s.jsx)(n.code,{children:"1. test.only(name, fn, timeout)"})}),"\n",(0,s.jsxs)(n.p,{children:["Also under the aliases: ",(0,s.jsx)(n.code,{children:"it.only(name, fn, timeout)"}),", and ",(0,s.jsx)(n.code,{children:"fit(name, fn, timeout)"})]}),"\n",(0,s.jsxs)(n.p,{children:["\u5f53\u4f60\u7ef4\u62a4\u4e00\u4e2a\u5f88\u5927\u7684\u4ee3\u7801\u5e93\u65f6\uff0c\u6709\u65f6\u53ef\u80fd\u4f1a\u53d1\u73b0\u4e00\u4e2a\u7531\u4e8e\u67d0\u79cd\u539f\u56e0\u88ab\u6682\u65f6\u7834\u574f\u7684\u6d4b\u8bd5\u3002 If you want to skip running this test, but you don't want to delete this code, you can use ",(0,s.jsx)(n.code,{children:"test.skip"})," to specify some tests to skip."]}),"\n",(0,s.jsx)(n.p,{children:"\u53ef\u9009\u5730\u4f20\u5165\u7b2c\u4e8c\u4e2a\u53c2\u6570 timeout\uff08\u6beb\u79d2\uff09 \u6307\u5b9a\u51fd\u6570\u6267\u884c\u8d85\u65f6\u65f6\u95f4\u3002 The default timeout is 5 seconds."}),"\n",(0,s.jsx)(n.p,{children:"\u6bd4\u5982\u8bf4\uff0c\u4f60\u6709\u8fd9\u4e9b\u6d4b\u8bd5\ufe30"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test.only('it is raining', () => {\n  expect(inchesOfRain()).toBeGreaterThan(0);\n});\n\ntest('it is not snowing', () => {\n  expect(inchesOfSnow()).toBe(0);\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:['Only the "it is raining" test will run in that test file, since it is run with ',(0,s.jsx)(n.code,{children:"test.only"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Usually you wouldn't check code using ",(0,s.jsx)(n.code,{children:"test.only"})," into source control - you would use it for debugging, and remove it once you have fixed the broken tests."]}),"\n",(0,s.jsx)(n.h3,{id:"testonlyeachtablename-fn-1",children:(0,s.jsx)(n.code,{children:"test.only.each(table)(name, fn)"})}),"\n",(0,s.jsxs)(n.p,{children:["Also under the aliases: ",(0,s.jsx)(n.code,{children:"it.only.each(table)(name, fn)"}),", ",(0,s.jsx)(n.code,{children:"fit.each(table)(name, fn)"}),", ",(0,s.jsx)(n.code,{children:"it.only.each`table`(name, fn)"})," and ",(0,s.jsx)(n.code,{children:"fit.each`table`(name, fn)"})]}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"test.only.each"})," if you want to only run specific tests with different test data."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"test.only.each"})," is available with two APIs:"]}),"\n",(0,s.jsx)(n.h4,{id:"testonlyeachtablename-fn-2",children:(0,s.jsx)(n.code,{children:"test.only.each(table)(name, fn)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test.only.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  expect(a + b).toBe(expected);\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"testonlyeachtablename-fn-3",children:(0,s.jsx)(n.code,{children:"test.only.each`table`(name, fn)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test.only.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"testskipname-fn",children:(0,s.jsx)(n.code,{children:"test.skip(name, fn)"})}),"\n",(0,s.jsxs)(n.p,{children:["Also under the aliases: ",(0,s.jsx)(n.code,{children:"it.skip(name, fn)"}),", ",(0,s.jsx)(n.code,{children:"xit(name, fn)"}),", and ",(0,s.jsx)(n.code,{children:"xtest(name, fn)"})]}),"\n",(0,s.jsxs)(n.p,{children:["\u5f53\u4f60\u7ef4\u62a4\u4e00\u4e2a\u5f88\u5927\u7684\u4ee3\u7801\u5e93\u65f6\uff0c\u6709\u65f6\u53ef\u80fd\u4f1a\u53d1\u73b0\u67d0\u4e2a\u6d4b\u8bd5\uff0c\u4f1a\u56e0\u67d0\u4e9b\u539f\u56e0\u800c\u6682\u65f6\u5931\u8d25\u3002 \u5982\u679c\u4f60\u60f3\u8df3\u8fc7\u8fd0\u884c\u8fd9\u4e2a\u6d4b\u8bd5\uff0c\u4f46\u4f60\u4e0d\u60f3\u5220\u9664\u8fd9\u4e2a\u4ee3\u7801\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528",(0,s.jsx)(n.code,{children:"test.skip"}),"\u6765\u6307\u5b9a\u4e00\u4e9b\u8981\u8df3\u8fc7\u7684\u6d4b\u8bd5\u3002"]}),"\n",(0,s.jsx)(n.p,{children:"\u6bd4\u5982\u8bf4\uff0c\u4f60\u6709\u8fd9\u4e9b\u6d4b\u8bd5\ufe30"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('it is raining', () => {\n  expect(inchesOfRain()).toBeGreaterThan(0);\n});\n\ntest.skip('it is not snowing', () => {\n  expect(inchesOfSnow()).toBe(0);\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["When you are debugging a large test file, you will often only want to run a subset of tests. You can use ",(0,s.jsx)(n.code,{children:".only"})," to specify which tests are the only ones you want to run in that test file."]}),"\n",(0,s.jsxs)(n.p,{children:["\u60a8\u53ef\u4ee5\u7b80\u5355\u5730\u6ce8\u91ca\u6d4b\u8bd5\uff0c\u4f46\u4f7f\u7528 ",(0,s.jsx)(n.code,{children:"test.skip"})," \u901a\u5e38\u4f1a\u66f4\u597d\u4e00\u70b9\uff0c\u56e0\u4e3a\u5b83\u5c06\u4fdd\u7559\u7f29\u8fdb\u548c\u8bed\u6cd5\u9ad8\u4eae\u3002"]}),"\n",(0,s.jsx)(n.h3,{id:"testskipeachtablename-fn",children:(0,s.jsx)(n.code,{children:"test.skip.each(table)(name, fn)"})}),"\n",(0,s.jsxs)(n.p,{children:["Also under the aliases: ",(0,s.jsx)(n.code,{children:"it.skip.each(table)(name, fn)"}),", ",(0,s.jsx)(n.code,{children:"xit.each(table)(name, fn)"}),", ",(0,s.jsx)(n.code,{children:"xtest.each(table)(name, fn)"}),", ",(0,s.jsx)(n.code,{children:"it.skip.each`table`(name, fn)"}),", ",(0,s.jsx)(n.code,{children:"xit.each`table`(name, fn)"})," and ",(0,s.jsx)(n.code,{children:"xtest.each`table`(name, fn)"})]}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"test.skip.each"})," if you want to stop running a collection of data driven tests."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"test.skip.each"})," is available with two APIs:"]}),"\n",(0,s.jsx)(n.h4,{id:"testskipeachtablename-fn-1",children:(0,s.jsx)(n.code,{children:"test.skip.each(table)(name, fn)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test.skip.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  expect(a + b).toBe(expected); // will not be run\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"testskipeachtablename-fn-2",children:(0,s.jsx)(n.code,{children:"test.skip.each`table`(name, fn)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test.skip.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected); // will not be run\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"testtodoname",children:(0,s.jsx)(n.code,{children:"test.todo(name)"})}),"\n",(0,s.jsxs)(n.p,{children:["Also under the alias: ",(0,s.jsx)(n.code,{children:"it.todo(name)"})]}),"\n",(0,s.jsxs)(n.p,{children:["\u7528 ",(0,s.jsx)(n.code,{children:"test.todo"})," \u6765\u8868\u793a\u4f60\u8ba1\u5212\u8981\u5199\u8fd9\u4e9b\u6d4b\u8bd5\u3002 Use ",(0,s.jsx)(n.code,{children:"test.todo"})," when you are planning on writing tests. These tests will be highlighted in the summary output at the end so you know how many tests you still need todo."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const add = (a, b) => a + b;\n\ntest.todo('add should be associative');\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"test.todo"})," will throw an error if you pass it a test callback function. Use ",(0,s.jsx)(n.a,{href:"#testskipname-fn",children:(0,s.jsx)(n.code,{children:"test.skip"})})," instead, if you already implemented the test, but do not want it to run."]})}),"\n",(0,s.jsx)(n.h2,{id:"typescript-usage",children:"TypeScript Usage"}),"\n",(0,s.jsx)(c.ZP,{}),"\n",(0,s.jsx)(n.h3,{id:"each",children:(0,s.jsx)(n.code,{children:".each"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:".each"})," modifier offers few different ways to define a table of the test cases. Some of the APIs have caveats related with the type inference of the arguments which are passed to ",(0,s.jsx)(n.code,{children:"describe"})," or ",(0,s.jsx)(n.code,{children:"test"})," callback functions. Let's take a look at each of them."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["For simplicity ",(0,s.jsx)(n.code,{children:"test.each"})," is picked for the examples, but the type inference is identical in all cases where ",(0,s.jsx)(n.code,{children:".each"})," modifier can be used: ",(0,s.jsx)(n.code,{children:"describe.each"}),", ",(0,s.jsx)(n.code,{children:"test.concurrent.only.each"}),", ",(0,s.jsx)(n.code,{children:"test.skip.each"}),", etc."]})}),"\n",(0,s.jsx)(n.h4,{id:"\u5bf9\u8c61\u6570\u7ec4",children:"\u5bf9\u8c61\u6570\u7ec4"}),"\n",(0,s.jsxs)(n.p,{children:["The array of objects API is most verbose, but it makes the type inference a painless task. A ",(0,s.jsx)(n.code,{children:"table"})," can be inlined:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import {test} from '@jest/globals';\n\ntest.each([\n  {name: 'a', path: 'path/to/a', count: 1, write: true},\n  {name: 'b', path: 'path/to/b', count: 3},\n])('inline table', ({name, path, count, write}) => {\n  // arguments are typed as expected, e.g. `write: boolean | undefined`\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"Or declared separately as a variable:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import {test} from '@jest/globals';\n\nconst table = [\n  {a: 1, b: 2, expected: 'three', extra: true},\n  {a: 3, b: 4, expected: 'seven', extra: false},\n  {a: 5, b: 6, expected: 'eleven'},\n];\n\ntest.each(table)('table as a variable', ({a, b, expected, extra}) => {\n  // again everything is typed as expected, e.g. `extra: boolean | undefined`\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"\u4e8c\u7ef4\u6570\u7ec4",children:"\u4e8c\u7ef4\u6570\u7ec4"}),"\n",(0,s.jsx)(n.p,{children:"The array of arrays style will work smoothly with inlined tables:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import {test} from '@jest/globals';\n\ntest.each([\n  [1, 2, 'three', true],\n  [3, 4, 'seven', false],\n  [5, 6, 'eleven'],\n])('inline table example', (a, b, expected, extra) => {\n  // arguments are typed as expected, e.g. `extra: boolean | undefined`\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"However, if a table is declared as a separate variable, it must be typed as an array of tuples for correct type inference (this is not needed only if all elements of a row are of the same type):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import {test} from '@jest/globals';\n\nconst table: Array<[number, number, string, boolean?]> = [\n  [1, 2, 'three', true],\n  [3, 4, 'seven', false],\n  [5, 6, 'eleven'],\n];\n\ntest.each(table)('table as a variable example', (a, b, expected, extra) => {\n  // without the annotation types are incorrect, e.g. `a: number | string | boolean`\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"\u6a21\u677f\u5b57\u7b26\u4e32",children:"\u6a21\u677f\u5b57\u7b26\u4e32"}),"\n",(0,s.jsx)(n.p,{children:"If all values are of the same type, the template literal API will type the arguments correctly:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import {test} from '@jest/globals';\n\ntest.each`\n  a    | b    | expected\n  ${1} | ${2} | ${3}\n  ${3} | ${4} | ${7}\n  ${5} | ${6} | ${11}\n`('template literal example', ({a, b, expected}) => {\n  // all arguments are of type `number`\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"Otherwise it will require a generic type argument:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import {test} from '@jest/globals';\n\ntest.each<{a: number; b: number; expected: string; extra?: boolean}>`\n  a    | b    | expected    | extra\n  ${1} | ${2} | ${'three'}  | ${true}\n  ${3} | ${4} | ${'seven'}  | ${false}\n  ${5} | ${6} | ${'eleven'}\n`('template literal example', ({a, b, expected, extra}) => {\n  // without the generic argument in this case types would default to `unknown`\n});\n"})})]})}const u=function(e={}){const{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(x,e)})):x(e)}},9563:(e,n,t)=>{t.d(n,{ZP:()=>a});var s=t(4246),i=t(1670);function c(e){const n=Object.assign({admonition:"admonition",p:"p",pre:"pre",code:"code",a:"a"},(0,i.ah)(),e.components);return(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)(n.p,{children:"The TypeScript examples from this page will only work as documented if you explicitly import Jest APIs:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import {expect, jest, test} from '@jest/globals';\n"})}),(0,s.jsxs)(n.p,{children:["Consult the ",(0,s.jsx)(n.a,{href:"/zh-Hans/docs/getting-started#using-typescript",children:"Getting Started"})," guide for details on how to setup Jest with TypeScript."]})]})}const a=function(e={}){const{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(c,e)})):c(e)}},1670:(e,n,t)=>{t.d(n,{Zo:()=>l,ah:()=>c});var s=t(7378);const i=s.createContext({});function c(e){const n=s.useContext(i);return s.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}const a={};function l({components:e,children:n,disableParentContext:t}){let l;return l=t?"function"==typeof e?e({}):e||a:c(e),s.createElement(i.Provider,{value:l},n)}}}]);