"use strict";(self.webpackChunkjest_website=self.webpackChunkjest_website||[]).push([[597],{1366:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>x,contentTitle:()=>d,default:()=>j,frontMatter:()=>l,metadata:()=>h,toc:()=>u});var s=t(4246),i=t(1670),r=t(8447),c=t(2599),o=t(9066),a=t(6294);const l={id:"expect",title:"Expect"},d=void 0,h={unversionedId:"expect",id:"version-29.6/expect",title:"Expect",description:'\u30c6\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\u6642\u306b\u3001\u5024\u304c\u7279\u5b9a\u306e\u6761\u4ef6\u306b\u5408\u81f4\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u5fc5\u8981\u304c\u3088\u304f\u3042\u308b\u3067\u3057\u3087\u3046\u3002 expect \u306b\u3088\u3063\u3066\u69d8\u3005\u306a\u4e8b\u67c4\u3092\u691c\u8a3c\u3059\u308b\u305f\u3081\u306e\u6570\u591a\u304f\u306e"\u30de\u30c3\u30c1\u30e3"\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002',source:"@site/i18n/ja/docusaurus-plugin-content-docs/version-29.6/ExpectAPI.md",sourceDirName:".",slug:"/expect",permalink:"/ja/docs/expect",draft:!1,unlisted:!1,editUrl:"https://crowdin.com/project/jest-v2/ja",tags:[],version:"29.6",frontMatter:{id:"expect",title:"Expect"},sidebar:"api",previous:{title:"\u5168\u4f53",permalink:"/ja/docs/api"},next:{title:"\u30e2\u30c3\u30af\u95a2\u6570",permalink:"/ja/docs/mock-function-api"}},x={},u=[{value:"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9",id:"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9",level:2},{value:"Expect",id:"expect",level:2},{value:"<code>expect(value)</code>",id:"expectvalue",level:3},{value:"\u4fee\u98fe\u5b50",id:"\u4fee\u98fe\u5b50",level:2},{value:"<code>.not</code>",id:"not",level:3},{value:"<code>.resolves</code>",id:"resolves",level:3},{value:"<code>.rejects</code>",id:"rejects",level:3},{value:"Matchers",id:"matchers",level:2},{value:"<code>.toBe(value)</code>",id:"tobevalue",level:3},{value:"<code>.toHaveBeenCalled()</code>",id:"tohavebeencalled",level:3},{value:"<code>.toHaveBeenCalledTimes(number)</code>",id:"tohavebeencalledtimesnumber",level:3},{value:"<code>.toHaveBeenCalledWith(arg1, arg2, ...)</code>",id:"tohavebeencalledwitharg1-arg2-",level:3},{value:"<code>.toHaveBeenLastCalledWith(arg1, arg2, ...)</code>",id:"tohavebeenlastcalledwitharg1-arg2-",level:3},{value:"<code>.toHaveBeenNthCalledWith(nthCall, arg1, arg2, ....)</code>",id:"tohavebeennthcalledwithnthcall-arg1-arg2-",level:3},{value:"<code>.toHaveReturned()</code>",id:"tohavereturned",level:3},{value:"<code>.toHaveReturnedTimes(number)</code>",id:"tohavereturnedtimesnumber",level:3},{value:"<code>.toHaveReturnedWith(value)</code>",id:"tohavereturnedwithvalue",level:3},{value:"<code>.toHaveLastReturnedWith(value)</code>",id:"tohavelastreturnedwithvalue",level:3},{value:"<code>.toHaveNthReturnedWith(nthCall, value)</code>",id:"tohaventhreturnedwithnthcall-value",level:3},{value:"<code>.toHaveLength(number)</code>",id:"tohavelengthnumber",level:3},{value:"<code>.toHaveProperty(keyPath, value?)</code>",id:"tohavepropertykeypath-value",level:3},{value:"<code>.toBeCloseTo(number, numDigits?)</code>",id:"tobeclosetonumber-numdigits",level:3},{value:"<code>.toBeDefined()</code>",id:"tobedefined",level:3},{value:"<code>.toBeFalsy()</code>",id:"tobefalsy",level:3},{value:"<code>.toBeGreaterThan(number | bigint)</code>",id:"tobegreaterthannumber--bigint",level:3},{value:"<code>.toBeGreaterThanOrEqual(number | bigint)</code>",id:"tobegreaterthanorequalnumber--bigint",level:3},{value:"<code>.toBeLessThan(number | bigint)</code>",id:"tobelessthannumber--bigint",level:3},{value:"<code>.toBeLessThanOrEqual(number | bigint)</code>",id:"tobelessthanorequalnumber--bigint",level:3},{value:"<code>.toBeInstanceOf(Class)</code>",id:"tobeinstanceofclass",level:3},{value:"<code>.toBeNull()</code>",id:"tobenull",level:3},{value:"<code>.toBeTruthy()</code>",id:"tobetruthy",level:3},{value:"<code>.toBeUndefined()</code>",id:"tobeundefined",level:3},{value:"<code>.toBeNaN()</code>",id:"tobenan",level:3},{value:"<code>.toContain(item)</code>",id:"tocontainitem",level:3},{value:"<code>.toContainEqual(item)</code>",id:"tocontainequalitem",level:3},{value:"<code>.toEqual(value)</code>",id:"toequalvalue",level:3},{value:"<code>.toMatch(regexp | string)</code>",id:"tomatchregexp--string",level:3},{value:"<code>.toMatchObject(object)</code>",id:"tomatchobjectobject",level:3},{value:"<code>.toMatchSnapshot(propertyMatchers?, hint?)</code>",id:"tomatchsnapshotpropertymatchers-hint",level:3},{value:"<code>.toMatchInlineSnapshot(propertyMatchers?, inlineSnapshot)</code>",id:"tomatchinlinesnapshotpropertymatchers-inlinesnapshot",level:3},{value:"<code>.toStrictEqual(value)</code>",id:"tostrictequalvalue",level:3},{value:"<code>.toThrow(error?)</code>",id:"tothrowerror",level:3},{value:"<code>.toThrowErrorMatchingSnapshot(hint?)</code>",id:"tothrowerrormatchingsnapshothint",level:3},{value:"<code>.toThrowErrorMatchingInlineSnapshot(inlineSnapshot)</code>",id:"tothrowerrormatchinginlinesnapshotinlinesnapshot",level:3},{value:"Asymmetric Matchers",id:"asymmetric-matchers",level:2},{value:"<code>expect.anything()</code>",id:"expectanything",level:3},{value:"<code>expect.any(constructor)</code>",id:"expectanyconstructor",level:3},{value:"<code>expect.arrayContaining(array)</code>",id:"expectarraycontainingarray",level:3},{value:"<code>expect.not.arrayContaining(array)</code>",id:"expectnotarraycontainingarray",level:3},{value:"<code>expect.closeTo(number, numDigits?)</code>",id:"expectclosetonumber-numdigits",level:3},{value:"<code>expect.objectContaining(object)</code>",id:"expectobjectcontainingobject",level:3},{value:"<code>expect.not.objectContaining(object)</code>",id:"expectnotobjectcontainingobject",level:3},{value:"<code>expect.stringContaining(string)</code>",id:"expectstringcontainingstring",level:3},{value:"<code>expect.not.stringContaining(string)</code>",id:"expectnotstringcontainingstring",level:3},{value:"<code>expect.stringMatching(string | regexp)</code>",id:"expectstringmatchingstring--regexp",level:3},{value:"<code>expect.not.stringMatching(string | regexp)</code>",id:"expectnotstringmatchingstring--regexp",level:3},{value:"Assertion Count",id:"assertion-count",level:2},{value:"<code>expect.assertions(number)</code>",id:"expectassertionsnumber",level:3},{value:"<code>expect.hasAssertions()</code>",id:"expecthasassertions",level:3},{value:"Extend Utilities",id:"extend-utilities",level:2},{value:"<code>expect.addEqualityTesters(testers)</code>",id:"expectaddequalitytesterstesters",level:3},{value:"Custom equality testers API",id:"custom-equality-testers-api",level:4},{value:"<code>this.equals(a, b, customTesters?)</code>",id:"thisequalsa-b-customtesters",level:4},{value:"Matchers vs Testers",id:"matchers-vs-testers",level:4},{value:"Recursive custom equality testers",id:"recursive-custom-equality-testers",level:4},{value:"<code>expect.addSnapshotSerializer(serializer)</code>",id:"expectaddsnapshotserializerserializer",level:3},{value:"<code>expect.extend(matchers)</code>",id:"expectextendmatchers",level:3},{value:"Async Matchers",id:"async-matchers",level:4},{value:"Custom Matchers API",id:"custom-matchers-api",level:4},{value:"<code>this.isNot</code>",id:"thisisnot",level:4},{value:"<code>this.promise</code>",id:"thispromise",level:4},{value:"<code>this.equals(a, b, customTesters?)</code>",id:"thisequalsa-b-customtesters-1",level:4},{value:"<code>this.expand</code>",id:"thisexpand",level:4},{value:"<code>this.utils</code>",id:"thisutils",level:4},{value:"<code>this.customTesters</code>",id:"thiscustomtesters",level:4},{value:"Custom snapshot matchers",id:"custom-snapshot-matchers",level:4},{value:"async",id:"async",level:4},{value:"Bail out",id:"bail-out",level:4}];function p(e){const n=Object.assign({p:"p",code:"code",admonition:"admonition",a:"a",h2:"h2",hr:"hr",h3:"h3",pre:"pre",strong:"strong",ul:"ul",li:"li",em:"em",h4:"h4"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["\u30c6\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\u6642\u306b\u3001\u5024\u304c\u7279\u5b9a\u306e\u6761\u4ef6\u306b\u5408\u81f4\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u5fc5\u8981\u304c\u3088\u304f\u3042\u308b\u3067\u3057\u3087\u3046\u3002 ",(0,s.jsx)(n.code,{children:"expect"}),' \u306b\u3088\u3063\u3066\u69d8\u3005\u306a\u4e8b\u67c4\u3092\u691c\u8a3c\u3059\u308b\u305f\u3081\u306e\u6570\u591a\u304f\u306e"\u30de\u30c3\u30c1\u30e3"\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002']}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["For additional Jest matchers maintained by the Jest Community check out ",(0,s.jsx)(n.a,{href:"https://github.com/jest-community/jest-extended",children:(0,s.jsx)(n.code,{children:"jest-extended"})}),"."]})}),"\n","\n",(0,s.jsx)(o.ZP,{}),"\n",(0,s.jsx)(n.h2,{id:"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9",children:"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9"}),"\n","\n","\n",(0,s.jsx)(a.Z,{toc:u.slice(1)}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"expect",children:"Expect"}),"\n",(0,s.jsx)(n.h3,{id:"expectvalue",children:(0,s.jsx)(n.code,{children:"expect(value)"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"expect"})," \u306f\u5024\u3092\u30c6\u30b9\u30c8\u3057\u305f\u3044\u6642\u306b\u6bce\u56de\u4f7f\u7528\u3059\u308b\u95a2\u6570\u3067\u3059\u3002 ",(0,s.jsx)(n.code,{children:"expect"}),' \u306e\u307f\u3092\u547c\u3073\u51fa\u3059\u3068\u3044\u3046\u3053\u3068\u306f\u307b\u3068\u3093\u3069\u3042\u308a\u307e\u305b\u3093\u3002 \u4ee3\u308f\u308a\u306b\u3001 \u5024\u306b\u3064\u3044\u3066\u4f55\u3089\u304b\u306e\u4e8b\u3092\u30a2\u30b5\u30fc\u30c8\u3059\u308b"\u30de\u30c3\u30c1\u30e3"\u95a2\u6570\u3068\u3068\u3082\u306b',(0,s.jsx)(n.code,{children:"expect"})," \u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3057\u3087\u3046\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u3053\u306e\u4e8b\u306f\u4f8b\u3092\u898b\u308c\u3070\u7c21\u5358\u306b\u7406\u89e3\u3067\u304d\u307e\u3059\u3002 ",(0,s.jsx)(n.code,{children:"'grapefruit'"}),"\u3068\u3044\u3046\u6587\u5b57\u5217\u3092\u8fd4\u3059\u306f\u305a\u306e",(0,s.jsx)(n.code,{children:"bestLaCroixFlavor()"}),"\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308b\u3068\u3057\u307e\u3057\u3087\u3046\u3002 \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30c6\u30b9\u30c8\u3059\u308b\u3067\u3057\u3087\u3046:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('the best flavor is grapefruit', () => {\n  expect(bestLaCroixFlavor()).toBe('grapefruit');\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["\u3053\u306e\u30b1\u30fc\u30b9\u3067\u306f\u3001 ",(0,s.jsx)(n.code,{children:"toBe"}),"\u304c\u30de\u30c3\u30c1\u30e3\u95a2\u6570\u3067\u3059\u3002 \u69d8\u3005\u306a\u4e8b\u3092\u30c6\u30b9\u30c8\u3059\u308b\u306e\u3092\u624b\u52a9\u3051\u3059\u308b\u6570\u591a\u304f\u306e\u7570\u306a\u308b\u30de\u30c3\u30c1\u30e3\u95a2\u6570\u304c\u3042\u308a\u3001\u4ee5\u4e0b\u306b\u307e\u3068\u3081\u3089\u308c\u3066\u3044\u307e\u3059\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"expect"}),"\u3078\u306e\u5f15\u6570\u306f\u30b3\u30fc\u30c9\u304c\u751f\u6210\u3059\u308b\u5024\u3067\u3042\u308b\u3079\u304d\u3067\u3042\u308a\u3001\u3044\u304b\u306a\u308b\u30de\u30c3\u30c1\u30e3\u3078\u306e\u5f15\u6570\u306f\u6b63\u89e3\u306e\u5024\u3067\u3042\u308b\u3079\u304d\u3067\u3059\u3002 \u305d\u308c\u3089\u3092\u6df7\u540c\u3057\u3066\u4f7f\u7528\u3059\u308c\u3070\u3001\u30c6\u30b9\u30c8\u306f\u52d5\u4f5c\u3059\u308b\u3082\u306e\u306e\u3001\u5931\u6557\u3057\u305f\u30c6\u30b9\u30c8\u304b\u3089\u51fa\u529b\u3055\u308c\u308b\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u304a\u304b\u3057\u306a\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002"]}),"\n",(0,s.jsx)(n.h2,{id:"\u4fee\u98fe\u5b50",children:"\u4fee\u98fe\u5b50"}),"\n",(0,s.jsx)(n.h3,{id:"not",children:(0,s.jsx)(n.code,{children:".not"})}),"\n",(0,s.jsxs)(n.p,{children:["\u4f55\u304b\u3092\u30c6\u30b9\u30c8\u3059\u308b\u65b9\u6cd5\u304c\u5206\u304b\u3063\u3066\u3044\u308b\u306a\u3089\u3001 ",(0,s.jsx)(n.code,{children:".not"}),"\u306b\u3088\u3063\u3066\u305d\u306e\u53cd\u5bfe\u306e\u4e8b\u3092\u30c6\u30b9\u30c8\u3067\u304d\u307e\u3059\u3002 \u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u306f\u3001\u30e9\u30af\u30ed\u30ef\u98f2\u6599\u3067\u4e00\u756a\u7f8e\u5473\u3057\u3044\u306e\u306f\u30b3\u30b3\u30ca\u30c3\u30c4\u5473\u3067\u306f\u306a\u3044\u3053\u3068\u3092\u30c6\u30b9\u30c8\u3067\u3057\u307e\u3059\u3002"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('the best flavor is not coconut', () => {\n  expect(bestLaCroixFlavor()).not.toBe('coconut');\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"resolves",children:(0,s.jsx)(n.code,{children:".resolves"})}),"\n",(0,s.jsxs)(n.p,{children:["\u8ffd\u52a0\u306e\u30de\u30c3\u30c1\u30e3\u3092\u30c1\u30a7\u30fc\u30f3\u3059\u308b\u305f\u3081\u306b\u306b\u5b8c\u4e86\u3057\u305fpromise\u306e\u5024\u3092\u53d6\u308a\u51fa\u3059\u306b\u306f",(0,s.jsx)(n.code,{children:"resolves"}),"\u3092\u4f7f\u7528\u3057\u3066\u4e0b\u3055\u3044\u3002 promise\u304creject\u3055\u308c\u305f\u5834\u5408\u306f\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u306f\u5931\u6557\u3057\u307e\u3059\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u4f8b\u3048\u3070\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u306fpromise\u304c\u5b8c\u4e86\u3057\u305f\u7d50\u679c\u306e\u5024\u304c",(0,s.jsx)(n.code,{children:"'lemon'"}),"\u3067\u3042\u308b\u3053\u3068\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('resolves to lemon', () => {\n  // make sure to add a return statement\n  return expect(Promise.resolve('lemon')).resolves.toBe('lemon');\n});\n"})}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsxs)(n.p,{children:["Promise \u3092\u30c6\u30b9\u30c8\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u30c6\u30b9\u30c8\u306f\u307e\u3060\u975e\u540c\u671f\u3067\u3059\u3002 \u3053\u306e\u305f\u3081\u306b\u3001\u30e9\u30c3\u30d7\u3055\u308c\u3066\u3044\u306a\u3044\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u3092\u8fd4\u3059\u3053\u3068\u3067\u3001",(0,s.jsx)(n.a,{href:"/ja/docs/asynchronous#promises",children:"Jest \u306b\u51e6\u7406\u304c\u5b8c\u4e86\u3059\u308b\u307e\u3067\u5f85\u3064\u3088\u3046\u306b\u4f1d\u3048\u308b"}),"\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u3059\u3002"]}),(0,s.jsxs)(n.p,{children:["\u307e\u305f\u3001",(0,s.jsx)(n.code,{children:"async/await"})," \u3092",(0,s.jsx)(n.code,{children:".resolves"}),"\u3068\u7d44\u307f\u5408\u308f\u305b\u3066\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('resolves to lemon', async () => {\n  await expect(Promise.resolve('lemon')).resolves.toBe('lemon');\n  await expect(Promise.resolve('lemon')).resolves.not.toBe('octopus');\n});\n"})})]}),"\n",(0,s.jsx)(n.h3,{id:"rejects",children:(0,s.jsx)(n.code,{children:".rejects"})}),"\n",(0,s.jsxs)(n.p,{children:["\u8ffd\u52a0\u306e\u30de\u30c3\u30c1\u30e3\u3092\u30c1\u30a7\u30fc\u30f3\u3059\u308b\u305f\u3081\u306b\u306breject\u3055\u308c\u305fpromise\u306e\u7406\u7531\u3092\u53d6\u308a\u51fa\u3059\u306b\u306f ",(0,s.jsx)(n.code,{children:".rejects"}),"\u3092\u4f7f\u7528\u3057\u3066\u4e0b\u3055\u3044\u3002 promise\u304c\u5b8c\u4e86\u3057\u305f\u5834\u5408\u306f\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u306f\u5931\u6557\u3057\u307e\u3059\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u4f8b\u3048\u3070\u3001\u3053\u306e\u30b3\u30fc\u30c9\u306f Promise \u304c\u7406\u7531",(0,s.jsx)(n.code,{children:"'octopus'"})," \u4ed8\u304d\u3067 reject \u3055\u308c\u305f\u4e8b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('rejects to octopus', () => {\n  // make sure to add a return statement\n  return expect(Promise.reject(new Error('octopus'))).rejects.toThrow(\n    'octopus',\n  );\n});\n"})}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsxs)(n.p,{children:["Promise \u3092\u30c6\u30b9\u30c8\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u30c6\u30b9\u30c8\u306f\u307e\u3060\u975e\u540c\u671f\u3067\u3059\u3002 \u3053\u306e\u305f\u3081\u306b\u3001\u30e9\u30c3\u30d7\u3055\u308c\u3066\u3044\u306a\u3044\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u3092\u8fd4\u3059\u3053\u3068\u3067\u3001",(0,s.jsx)(n.a,{href:"/ja/docs/asynchronous#promises",children:"Jest \u306b\u51e6\u7406\u304c\u5b8c\u4e86\u3059\u308b\u307e\u3067\u5f85\u3064\u3088\u3046\u306b\u4f1d\u3048\u308b"}),"\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u3059\u3002"]}),(0,s.jsxs)(n.p,{children:["\u307e\u305f\u3001",(0,s.jsx)(n.code,{children:"async/await"})," \u3092",(0,s.jsx)(n.code,{children:".rejects"}),"\u3068\u7d44\u307f\u5408\u308f\u305b\u3066\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('rejects to octopus', async () => {\n  await expect(Promise.reject(new Error('octopus'))).rejects.toThrow('octopus');\n});\n"})})]}),"\n",(0,s.jsx)(n.h2,{id:"matchers",children:"Matchers"}),"\n",(0,s.jsx)(n.h3,{id:"tobevalue",children:(0,s.jsx)(n.code,{children:".toBe(value)"})}),"\n",(0,s.jsxs)(n.p,{children:["\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u5024\u3092\u6bd4\u8f03\u3057\u305f\u308a\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u53c2\u7167ID\u3092\u78ba\u8a8d\u3057\u305f\u308a\u3059\u308b\u306b\u306f\u3001 ",(0,s.jsx)(n.code,{children:".toBe"})," \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 It calls ",(0,s.jsx)(n.code,{children:"Object.is"})," to compare values, which is even better for testing than ",(0,s.jsx)(n.code,{children:"==="})," strict equality operator."]}),"\n",(0,s.jsxs)(n.p,{children:["\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u306f ",(0,s.jsx)(n.code,{children:"can"})," \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u3044\u304f\u3064\u304b\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u691c\u8a3c\u3057\u307e\u3059\u3002"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const can = {\n  name: 'pamplemousse',\n  ounces: 12,\n};\n\ndescribe('the can', () => {\n  test('has 12 ounces', () => {\n    expect(can.ounces).toBe(12);\n  });\n\n  test('has a sophisticated name', () => {\n    expect(can.name).toBe('pamplemousse');\n  });\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306b ",(0,s.jsx)(n.code,{children:".toBe"})," \u3092\u4f7f\u7528\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 \u4f8b\u3048\u3070\u3001JavaScript\u3067\u306f\u6570\u5024\u306e\u4e38\u3081\u306b\u3088\u3063\u3066",(0,s.jsx)(n.code,{children:"0.2 + 0.1"}),"\u3068 ",(0,s.jsx)(n.code,{children:"0.3"}),"\u306f\u53b3\u5bc6\u306b\u306f\u7b49\u4fa1\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u6d6e\u52d5\u5c0f\u6570\u70b9\u304c\u3042\u308b\u5834\u5408\u306f\u3001\u4ee3\u308f\u308a\u306b",(0,s.jsx)(n.code,{children:".toBeCloseTo"}),"\u3092\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:".toBe"})," \u30de\u30c3\u30c1\u30e3\u30fc \u306f \u53c2\u7167ID\u3092\u30c1\u30a7\u30c3\u30af",(0,s.jsx)(n.strong,{children:"\u3057\u307e\u3059"}),"\u304c\u3001\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u304c\u5931\u6557\u3057\u305f\u5834\u5408\u3001 \u5024\u306e\u518d\u5e30\u7684\u306a\u6bd4\u8f03\u3092** \u5831\u544a\u3057\u307e\u3059**\u3002 \u7279\u306b\u30ec\u30dd\u30fc\u30c8\u304c\u5927\u304d\u3044\u5834\u5408\u306b\u306f\u3001\u30d7\u30ed\u30d1\u30c6\u30a3\u9593\u306e\u5dee\u5206\u306f\u3001\u30c6\u30b9\u30c8\u304c\u5931\u6557\u3059\u308b\u7406\u539f\u56e0\u3092\u89e3\u660e\u3059\u308b\u3053\u3068\u306b\u5bc4\u4e0e\u3057\u307e\u305b\u3093\u3002 \u305d\u3046\u3059\u308b\u3068\u3001\u6bd4\u8f03\u51e6\u7406\u3092 ",(0,s.jsx)(n.code,{children:"expect"})," \u95a2\u6570\u306e\u4e2d\u306b\u79fb\u3059\u3053\u3068\u3067\u3057\u3087\u3046 \u4f8b\u3048\u3070\u3001\u8981\u7d20\u304c\u540c\u3058\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30a2\u30b5\u30fc\u30c8\u3059\u308b\u306b\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["rewrite ",(0,s.jsx)(n.code,{children:"expect(received).toBe(expected)"})," as ",(0,s.jsx)(n.code,{children:"expect(Object.is(received, expected)).toBe(true)"})]}),"\n",(0,s.jsxs)(n.li,{children:["rewrite ",(0,s.jsx)(n.code,{children:"expect(received).not.toBe(expected)"})," as ",(0,s.jsx)(n.code,{children:"expect(Object.is(received, expected)).toBe(false)"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"tohavebeencalled",children:(0,s.jsx)(n.code,{children:".toHaveBeenCalled()"})}),"\n",(0,s.jsxs)(n.p,{children:["\u6b21\u306e\u5225\u540d\u3067\u3082\u540c\u69d8\u3068\u306a\u308a\u307e\u3059: ",(0,s.jsx)(n.code,{children:".toBeCalled()"})]}),"\n",(0,s.jsxs)(n.p,{children:["\u30e2\u30c3\u30af\u95a2\u6570\u304c\u7279\u5b9a\u306e\u5f15\u6570\u3092\u4e0e\u3048\u3089\u308c\u3066\u547c\u3073\u51fa\u3055\u308c\u305f\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u306b\u306f ",(0,s.jsx)(n.code,{children:".toHaveBeenCalledWith"})," \u3092\u4f7f\u7528\u3057\u3066\u4e0b\u3055\u3044\u3002 The arguments are checked with the same algorithm that ",(0,s.jsx)(n.code,{children:".toEqual"})," uses."]}),"\n",(0,s.jsxs)(n.p,{children:["For example, let's say you have a ",(0,s.jsx)(n.code,{children:"drinkAll(drink, flavour)"})," function that takes a ",(0,s.jsx)(n.code,{children:"drink"})," function and applies it to all available beverages. You might want to check that ",(0,s.jsx)(n.code,{children:"drink"})," gets called for ",(0,s.jsx)(n.code,{children:"'lemon'"}),", but not for ",(0,s.jsx)(n.code,{children:"'octopus'"}),", because ",(0,s.jsx)(n.code,{children:"'octopus'"})," flavour is really weird and why would anything be octopus-flavoured? \u3053\u306e\u30c6\u30b9\u30c8\u30b9\u30a4\u30fc\u30c8\u3067\u30c6\u30b9\u30c8\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function drinkAll(callback, flavour) {\n  if (flavour !== 'octopus') {\n    callback(flavour);\n  }\n}\n\ndescribe('drinkAll', () => {\n  test('drinks something lemon-flavoured', () => {\n    const drink = jest.fn();\n    drinkAll(drink, 'lemon');\n    expect(drink).toHaveBeenCalled();\n  });\n\n  test('does not drink something octopus-flavoured', () => {\n    const drink = jest.fn();\n    drinkAll(drink, 'octopus');\n    expect(drink).not.toHaveBeenCalled();\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"tohavebeencalledtimesnumber",children:(0,s.jsx)(n.code,{children:".toHaveBeenCalledTimes(number)"})}),"\n",(0,s.jsxs)(n.p,{children:["\u6b21\u306e\u5225\u540d\u3067\u3082\u540c\u69d8\u3068\u306a\u308a\u307e\u3059: ",(0,s.jsx)(n.code,{children:".toBeCalledTimes(number)"})]}),"\n",(0,s.jsxs)(n.p,{children:["\u30e2\u30c3\u30af\u95a2\u6570\u304c\u671f\u5f85\u3057\u305f\u56de\u6570\u3060\u3051\u547c\u3070\u308c\u305f\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u306b\u306f",(0,s.jsx)(n.code,{children:".toHaveBeenCalledTimes"})," \u3092\u4f7f\u7528\u3057\u3066\u4e0b\u3055\u3044\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u4f8b\u3048\u3070",(0,s.jsx)(n.code,{children:"drink"}),"\u95a2\u6570\u3092\u5f15\u6570\u306b\u53d6\u3063\u3066\u6e21\u3055\u308c\u305f\u98f2\u307f\u7269\u306e\u914d\u5217\u306b\u9069\u7528\u3059\u308b ",(0,s.jsx)(n.code,{children:"drinkEach(drink, Array<flavor>)"})," \u95a2\u6570\u304c\u3042\u308b\u3068\u3057\u307e\u3057\u3087\u3046\u3002 \uff44rink\u95a2\u6570\u304c\u6b63\u3057\u3044\u56de\u6570\u3060\u3051\u547c\u3070\u308c\u305f\u3053\u3068\u3092\u78ba\u8a8d\u3057\u305f\u3044\u3067\u3057\u3087\u3046\u3002 \u3053\u306e\u30c6\u30b9\u30c8\u30b9\u30a4\u30fc\u30c8\u3067\u30c6\u30b9\u30c8\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('drinkEach drinks each drink', () => {\n  const drink = jest.fn();\n  drinkEach(drink, ['lemon', 'octopus']);\n  expect(drink).toHaveBeenCalledTimes(2);\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"tohavebeencalledwitharg1-arg2-",children:(0,s.jsx)(n.code,{children:".toHaveBeenCalledWith(arg1, arg2, ...)"})}),"\n",(0,s.jsxs)(n.p,{children:["\u6b21\u306e\u5225\u540d\u3067\u3082\u540c\u69d8\u3068\u306a\u308a\u307e\u3059: ",(0,s.jsx)(n.code,{children:".toBeCalledWith()"})]}),"\n",(0,s.jsxs)(n.p,{children:["\u30e2\u30c3\u30af\u95a2\u6570\u304c\u7279\u5b9a\u306e\u5f15\u6570\u3092\u4e0e\u3048\u3089\u308c\u3066\u547c\u3073\u51fa\u3055\u308c\u305f\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u306b\u306f ",(0,s.jsx)(n.code,{children:".toHaveBeenCalledWith"})," \u3092\u4f7f\u7528\u3057\u3066\u4e0b\u3055\u3044\u3002 The arguments are checked with the same algorithm that ",(0,s.jsx)(n.code,{children:".toEqual"})," uses."]}),"\n",(0,s.jsxs)(n.p,{children:["\u4f8b\u3048\u3070 ",(0,s.jsx)(n.code,{children:"register"})," \u95a2\u6570\u3067\u98f2\u307f\u7269\u3092\u767b\u9332\u3067\u304d\u3001",(0,s.jsx)(n.code,{children:"applyToAll(f)"})," \u306f \u95a2\u6570",(0,s.jsx)(n.code,{children:"f"})," \u3092\u5168\u3066\u306e\u767b\u9332\u3055\u308c\u305f\u98f2\u307f\u7269\u306b\u9069\u7528\u3059\u308b\u3082\u306e\u3068\u3057\u307e\u3057\u3087\u3046\u3002 \u3053\u306e\u632f\u308b\u821e\u3044\u3092\u78ba\u8a8d\u3059\u308b\u30b3\u30fc\u30c9\u306f\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306b\u66f8\u3051\u308b\u3067\u3057\u3087\u3046:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('registration applies correctly to orange La Croix', () => {\n  const beverage = new LaCroix('orange');\n  register(beverage);\n  const f = jest.fn();\n  applyToAll(f);\n  expect(f).toHaveBeenCalledWith(beverage);\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"tohavebeenlastcalledwitharg1-arg2-",children:(0,s.jsx)(n.code,{children:".toHaveBeenLastCalledWith(arg1, arg2, ...)"})}),"\n",(0,s.jsxs)(n.p,{children:["\u6b21\u306e\u5225\u540d\u3067\u3082\u540c\u69d8\u3068\u306a\u308a\u307e\u3059: ",(0,s.jsx)(n.code,{children:".lastCalledWith(arg1, arg2, ...)"})]}),"\n",(0,s.jsxs)(n.p,{children:["\u30e2\u30c3\u30af\u95a2\u6570\u304c\u3042\u308b\u5834\u5408\u306f ",(0,s.jsx)(n.code,{children:".toHaveBeenLastCalledWith"}),"\u3092\u4f7f\u7528\u3057\u3066\u3001\u6700\u5f8c\u306e\u547c\u3073\u51fa\u3057\u304c\u3069\u3093\u306a\u5f15\u6570\u3092\u6e21\u3055\u308c\u305f\u304b\u3092\u30c6\u30b9\u30c8\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u4f8b\u3048\u3070 \u8907\u6570\u306e\u98a8\u5473\u306b\u5bfe\u3057\u3066\u95a2\u6570",(0,s.jsx)(n.code,{children:"f"}),"\u3092\u9069\u7528\u3059\u308b",(0,s.jsx)(n.code,{children:"applyToAllFlavors(f)"})," \u95a2\u6570\u304c\u3042\u308a\u3001\u95a2\u6570f\u304c\u6700\u5f8c\u306b\u64cd\u4f5c\u3057\u305f\u98a8\u5473\u304c",(0,s.jsx)(n.code,{children:"'mango'"}),"\u3060\u3063\u305f\u3068\u3057\u307e\u3057\u3087\u3046\u3002 \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('applying to all flavors does mango last', () => {\n  const drink = jest.fn();\n  applyToAllFlavors(drink);\n  expect(drink).toHaveBeenLastCalledWith('mango');\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"tohavebeennthcalledwithnthcall-arg1-arg2-",children:(0,s.jsx)(n.code,{children:".toHaveBeenNthCalledWith(nthCall, arg1, arg2, ....)"})}),"\n",(0,s.jsxs)(n.p,{children:["\u6b21\u306e\u5225\u540d\u3067\u3082\u540c\u69d8\u3068\u306a\u308a\u307e\u3059: ",(0,s.jsx)(n.code,{children:".nthCalledWith(nthCall, arg1, arg2, ...)"})]}),"\n",(0,s.jsxs)(n.p,{children:["\u3042\u308b\u30e2\u30c3\u30af\u95a2\u6570\u304c\u3042\u308b\u3068\u304d\u3001",(0,s.jsx)(n.code,{children:".toHaveReturned"})," \u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u30e2\u30c3\u30af\u95a2\u6570\u304c\u6b63\u3057\u304f (\u3064\u307e\u308a\u3001\u4f8b\u5916\u304c\u767a\u751f\u305b\u305a\u306b) \u5909\u3048\u308b\u3053\u3068\u3092\u30c6\u30b9\u30c8\u3067\u304d\u307e\u3059\u3002 \u305f\u3068\u3048\u3070\u3001",(0,s.jsx)(n.code,{children:"true"})," \u3092\u8fd4\u3059\u30e2\u30c3\u30af\u95a2\u6570 ",(0,s.jsx)(n.code,{children:"drink"})," \u304c\u3042\u308b\u3068\u3059\u308b\u3068\u3001\u30c6\u30b9\u30c8\u306f\u6b21\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('drink \u306f n \u56de\u76ee\u306e\u547c\u3073\u51fa\u3057\u3067\u671f\u5f85\u3057\u305f\u5024\u3092\u8fd4\u3059', () => {\n  const beverage1 = {name: 'La Croix (\u30ec\u30e2\u30f3)'};\n  const beverage2 = {name: 'La Croix (\u30aa\u30ec\u30f3\u30b8)'};\n  const drink = jest.fn(beverage => beverage.name);\n\n  drink(beverage1);\n  drink(beverage2);\n\n  expect(drink).toHaveNthReturnedWith(1, 'La Croix (\u30ec\u30e2\u30f3)');\n  expect(drink).toHaveNthReturnedWith(2, 'La Croix (\u30aa\u30ec\u30f3\u30b8)');\n});\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"The nth argument must be positive integer starting from 1."})}),"\n",(0,s.jsx)(n.h3,{id:"tohavereturned",children:(0,s.jsx)(n.code,{children:".toHaveReturned()"})}),"\n",(0,s.jsxs)(n.p,{children:["\u6b21\u306e\u5225\u540d\u3067\u3082\u540c\u69d8\u3068\u306a\u308a\u307e\u3059: ",(0,s.jsx)(n.code,{children:".toReturn()"})]}),"\n",(0,s.jsxs)(n.p,{children:["\u3042\u308b\u30e2\u30c3\u30af\u95a2\u6570\u304c\u3042\u308b\u3068\u304d\u3001",(0,s.jsx)(n.code,{children:".toHaveReturned"})," \u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u30e2\u30c3\u30af\u95a2\u6570\u304c\u6b63\u3057\u304f (\u3064\u307e\u308a\u3001\u4f8b\u5916\u304c\u767a\u751f\u305b\u305a\u306b) \u5909\u3048\u308b\u3053\u3068\u3092\u30c6\u30b9\u30c8\u3067\u304d\u307e\u3059\u3002 \u305f\u3068\u3048\u3070\u3001",(0,s.jsx)(n.code,{children:"true"})," \u3092\u8fd4\u3059\u30e2\u30c3\u30af\u95a2\u6570 ",(0,s.jsx)(n.code,{children:"drink"})," \u304c\u3042\u308b\u3068\u3059\u308b\u3068\u3001\u30c6\u30b9\u30c8\u306f\u6b21\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('drinkEach drinks each drink', () => {\n  const drink = jest.fn();\n  drinkEach(drink, ['\u30ec\u30e2\u30f3', '\u30bf\u30b3']);\n  expect(drink).toHaveBeenNthCalledWith(1, '\u30ec\u30e2\u30f3');\n  expect(drink).toHaveBeenNthCalledWith(2, '\u30bf\u30b3');\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"tohavereturnedtimesnumber",children:(0,s.jsx)(n.code,{children:".toHaveReturnedTimes(number)"})}),"\n",(0,s.jsxs)(n.p,{children:["\u6b21\u306e\u5225\u540d\u3067\u3082\u540c\u69d8\u3068\u306a\u308a\u307e\u3059: ",(0,s.jsx)(n.code,{children:".toReturnTimes(number)"})]}),"\n",(0,s.jsxs)(n.p,{children:["\u30e2\u30c3\u30af\u95a2\u6570\u304c\u3061\u3087\u3046\u3069\u6307\u5b9a\u3057\u305f\u56de\u6570\u3060\u3051\u6b63\u3057\u304f (\u3064\u307e\u308a\u3001\u4f8b\u5916\u304c\u767a\u751f\u305b\u305a\u306b) \u8fd4\u3063\u305f\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u306b\u306f\u3001",(0,s.jsx)(n.code,{children:".toHaveReturnedTimes"})," \u3092\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u4f8b\u5916\u304c\u767a\u751f\u3057\u305f\u30e2\u30c3\u30af\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u306f\u3001\u95a2\u6570\u306e\u8fd4\u3057\u305f\u56de\u6570\u3068\u3057\u3066\u30ab\u30a6\u30f3\u30c8\u3055\u308c\u307e\u305b\u3093\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u305f\u3068\u3048\u3070\u3001",(0,s.jsx)(n.code,{children:"true"})," \u3092\u8fd4\u3059\u30e2\u30c3\u30af\u95a2\u6570 ",(0,s.jsx)(n.code,{children:"drink"})," \u304c\u3042\u308b\u3068\u3059\u308b\u3068\u3001\u30c6\u30b9\u30c8\u306f\u6b21\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('drinks \u306f return \u3059\u308b', () => {\n  const drink = jest.fn(() => true);\n\n  drink();\n\n  expect(drink).toHaveReturned();\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"tohavereturnedwithvalue",children:(0,s.jsx)(n.code,{children:".toHaveReturnedWith(value)"})}),"\n",(0,s.jsxs)(n.p,{children:["\u6b21\u306e\u5225\u540d\u3067\u3082\u540c\u69d8\u3068\u306a\u308a\u307e\u3059: ",(0,s.jsx)(n.code,{children:".toReturnWith(value)"})]}),"\n",(0,s.jsxs)(n.p,{children:["\u30e2\u30c3\u30af\u95a2\u6570\u304c\u7279\u5b9a\u306e\u5024\u3092\u8fd4\u3059\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u306b\u306f\u3001",(0,s.jsx)(n.code,{children:". toHaveReturnedWith"})," \u3092\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u305f\u3068\u3048\u3070\u3001\u98f2\u307e\u308c\u305f\u98f2\u307f\u7269 (beverage) \u306e\u540d\u524d\u3092\u8fd4\u3059\u30e2\u30c3\u30af\u95a2\u6570 ",(0,s.jsx)(n.code,{children:"drink"})," \u304c\u3042\u308b\u3068\u3059\u308b\u3068\u3001\u30c6\u30b9\u30c8\u306f\u6b21\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('drink \u306f2\u56de\u6b63\u3057\u304f return \u3059\u308b', () => {\n  const drink = jest.fn(() => true);\n\n  drink();\n  drink();\n\n  expect(drink).toHaveReturnedTimes(2);\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"tohavelastreturnedwithvalue",children:(0,s.jsx)(n.code,{children:".toHaveLastReturnedWith(value)"})}),"\n",(0,s.jsxs)(n.p,{children:["\u6b21\u306e\u5225\u540d\u3067\u3082\u540c\u69d8\u3068\u306a\u308a\u307e\u3059: ",(0,s.jsx)(n.code,{children:".lastReturnedWith(value)"})]}),"\n",(0,s.jsxs)(n.p,{children:["\u30e2\u30c3\u30af\u95a2\u6570\u304c\u6700\u5f8c\u306b\u8fd4\u3057\u305f\u5024\u304c\u7279\u5b9a\u306e\u5024\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3059\u308b\u306b\u306f\u3001",(0,s.jsx)(n.code,{children:".toHaveLastReturnedWith"})," \u3092\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30e2\u30c3\u30af\u95a2\u6570\u306e\u6700\u5f8c\u306e\u547c\u3073\u51fa\u3057\u3067\u4f8b\u5916\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u3001\u671f\u5f85\u3057\u305f\u5024\u3068\u3057\u3066\u3069\u3093\u306a\u5024\u3092\u6307\u5b9a\u3057\u305f\u3068\u3057\u3066\u3082\u3001\u3053\u306e\u30de\u30c3\u30c1\u30e3\u306f\u7121\u6761\u4ef6\u306b\u5931\u6557\u3057\u307e\u3059\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u305f\u3068\u3048\u3070\u3001\u98f2\u307e\u308c\u305f\u98f2\u307f\u7269 (beverage) \u306e\u540d\u524d\u3092\u8fd4\u3059\u30e2\u30c3\u30af\u95a2\u6570 ",(0,s.jsx)(n.code,{children:"drink"})," \u304c\u3042\u308b\u3068\u3059\u308b\u3068\u3001\u30c6\u30b9\u30c8\u306f\u6b21\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('drink \u306f La Croix \u3092\u8fd4\u3059', () => {\n  const beverage = {name: 'La Croix'};\n  const drink = jest.fn(beverage => beverage.name);\n\n  drink(beverage);\n\n  expect(drink).toHaveReturnedWith('La Croix');\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"tohaventhreturnedwithnthcall-value",children:(0,s.jsx)(n.code,{children:".toHaveNthReturnedWith(nthCall, value)"})}),"\n",(0,s.jsxs)(n.p,{children:["\u6b21\u306e\u5225\u540d\u3067\u3082\u540c\u69d8\u3068\u306a\u308a\u307e\u3059: ",(0,s.jsx)(n.code,{children:".nthReturnedWith(nthCall, value)"})]}),"\n",(0,s.jsxs)(n.p,{children:["\u30e2\u30c3\u30af\u95a2\u6570\u304c n \u56de\u76ee\u306b\u8fd4\u3057\u305f\u5024\u304c\u7279\u5b9a\u306e\u5024\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3059\u308b\u306b\u306f\u3001",(0,s.jsx)(n.code,{children:".toHaveNthReturnedWith"})," \u3092\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30e2\u30c3\u30af\u95a2\u6570\u306e n \u56de\u76ee\u306e\u547c\u3073\u51fa\u3057\u3067\u4f8b\u5916\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u3001\u671f\u5f85\u3057\u305f\u5024\u3068\u3057\u3066\u3069\u3093\u306a\u5024\u3092\u6307\u5b9a\u3057\u305f\u3068\u3057\u3066\u3082\u3001\u3053\u306e\u30de\u30c3\u30c1\u30e3\u306f\u7121\u6761\u4ef6\u306b\u5931\u6557\u3057\u307e\u3059\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u305f\u3068\u3048\u3070\u3001\u98f2\u307e\u308c\u305f\u98f2\u307f\u7269 (beverage) \u306e\u540d\u524d\u3092\u8fd4\u3059\u30e2\u30c3\u30af\u95a2\u6570 ",(0,s.jsx)(n.code,{children:"drink"})," \u304c\u3042\u308b\u3068\u3059\u308b\u3068\u3001\u30c6\u30b9\u30c8\u306f\u6b21\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('drink \u306f\u6700\u5f8c\u306b La Croix (Orange) \u3092 return \u3059\u308b', () => {\n  const beverage1 = {name: 'La Croix (Lemon)'};\n  const beverage2 = {name: 'La Croix (Orange)'};\n  const drink = jest.fn(beverage => beverage.name);\n\n  drink(beverage1);\n  drink(beverage2);\n\n  expect(drink).toHaveLastReturnedWith('La Croix (Orange)');\n});\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"The nth argument must be positive integer starting from 1."})}),"\n",(0,s.jsx)(n.h3,{id:"tohavelengthnumber",children:(0,s.jsx)(n.code,{children:".toHaveLength(number)"})}),"\n",(0,s.jsxs)(n.p,{children:["\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c",(0,s.jsx)(n.code,{children:".length"}),"\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u6301\u3061\u3001\u7279\u5b9a\u306e\u6570\u5024\u3067\u3042\u308b\u304b\u3092\u78ba\u8a8d\u3059\u308b\u306b\u306f\u3001",(0,s.jsx)(n.code,{children:".toHaveLength"})," \u3092\u4f7f\u7528\u3057\u3066\u4e0b\u3055\u3044\u3002"]}),"\n",(0,s.jsx)(n.p,{children:"\u914d\u5217\u3084\u6587\u5b57\u5217\u306e\u30b5\u30a4\u30ba\u3092\u78ba\u8a8d\u3059\u308b\u306e\u306b\u7279\u306b\u4fbf\u5229\u3067\u3059\u3002"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"expect([1, 2, 3]).toHaveLength(3);\nexpect('abc').toHaveLength(3);\nexpect('').not.toHaveLength(5);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"tohavepropertykeypath-value",children:(0,s.jsx)(n.code,{children:".toHaveProperty(keyPath, value?)"})}),"\n",(0,s.jsxs)(n.p,{children:["\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u6307\u5b9a\u3055\u308c\u305f\u53c2\u7167",(0,s.jsx)(n.code,{children:"keyPath"}),"\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u5b58\u5728\u3059\u308b\u304b\u3092\u78ba\u8a8d\u3059\u308b\u306b\u306f\u3001",(0,s.jsx)(n.code,{children:".toHaveProperty"})," \u3092\u4f7f\u7528\u3057\u3066\u4e0b\u3055\u3044\u3002 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5185\u3067\u6df1\u304f\u30cd\u30b9\u30c8\u3055\u308c\u305f\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u306b\u306f\u3001 \u6df1\u3044\u968e\u5c64\u3092\u53c2\u7167\u3059\u308b\u305f\u3081\u306b\u3001 ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Property_Accessors",children:"\u30c9\u30c3\u30c8\u8868\u8a18"}),"\u3084 keyPath \u3092\u542b\u3080\u914d\u5217\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["You can provide an optional ",(0,s.jsx)(n.code,{children:"value"})," argument to compare the received property value (recursively for all properties of object instances, also known as deep equality, like the ",(0,s.jsx)(n.code,{children:"toEqual"})," matcher)."]}),"\n",(0,s.jsxs)(n.p,{children:["\u6b21\u306b\u793a\u3059\u4f8b\u3067\u306f\u30cd\u30b9\u30c8\u3055\u308c\u305f\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u542b\u3080 ",(0,s.jsx)(n.code,{children:"houseForSale"})," \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u542b\u3093\u3067\u3044\u307e\u3059\u3002 \u3053\u3053\u3067\u306f\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5185\u306e\u69d8\u3005\u306a\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u5b58\u5728\u3068\u5024\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u305f\u3081\u306b\u3001",(0,s.jsx)(n.code,{children:"toHaveProperty"})," \u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// Object containing house features to be tested\nconst houseForSale = {\n  bath: true,\n  bedrooms: 4,\n  kitchen: {\n    amenities: ['oven', 'stove', 'washer'],\n    area: 20,\n    wallColor: 'white',\n    'nice.oven': true,\n  },\n  livingroom: {\n    amenities: [\n      {\n        couch: [\n          ['large', {dimensions: [20, 20]}],\n          ['small', {dimensions: [10, 10]}],\n        ],\n      },\n    ],\n  },\n  'ceiling.height': 2,\n};\n\ntest('this house has my desired features', () => {\n  // Example Referencing\n  expect(houseForSale).toHaveProperty('bath');\n  expect(houseForSale).toHaveProperty('bedrooms', 4);\n\n  expect(houseForSale).not.toHaveProperty('pool');\n\n  // Deep referencing using dot notation\n  expect(houseForSale).toHaveProperty('kitchen.area', 20);\n  expect(houseForSale).toHaveProperty('kitchen.amenities', [\n    'oven',\n    'stove',\n    'washer',\n  ]);\n\n  expect(houseForSale).not.toHaveProperty('kitchen.open');\n\n  // Deep referencing using an array containing the keyPath\n  expect(houseForSale).toHaveProperty(['kitchen', 'area'], 20);\n  expect(houseForSale).toHaveProperty(\n    ['kitchen', 'amenities'],\n    ['oven', 'stove', 'washer'],\n  );\n  expect(houseForSale).toHaveProperty(['kitchen', 'amenities', 0], 'oven');\n  expect(houseForSale).toHaveProperty(\n    'livingroom.amenities[0].couch[0][1].dimensions[0]',\n    20,\n  );\n  expect(houseForSale).toHaveProperty(['kitchen', 'nice.oven']);\n  expect(houseForSale).not.toHaveProperty(['kitchen', 'open']);\n\n  // Referencing keys with dot in the key itself\n  expect(houseForSale).toHaveProperty(['ceiling.height'], 'tall');\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"tobeclosetonumber-numdigits",children:(0,s.jsx)(n.code,{children:".toBeCloseTo(number, numDigits?)"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"toBeCloseTo"})," \u3067\u306f\u3001\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u3092\u8fd1\u4f3c\u7684\u306a\u7b49\u4fa1\u6027\u3067\u8a55\u4fa1\u3057\u307e\u3059\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u30aa\u30d7\u30b7\u30e7\u30f3\u306e",(0,s.jsx)(n.code,{children:"numDigits"})," \u5f15\u6570\u306f\u5c0f\u6570\u70b9",(0,s.jsx)(n.strong,{children:"\u4ee5\u4e0b"}),"\u306e\u6841\u6570\u306e\u4e0a\u9650\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 \u30c7\u30d5\u30a9\u30eb\u30c8\u5024 ",(0,s.jsx)(n.code,{children:"2"}),"\u306e\u5834\u5408\u3001\u30c6\u30b9\u30c8\u6761\u4ef6\u306f ",(0,s.jsx)(n.code,{children:"Math.abs(expected - received) < 0.005"}),"\u4ee5\u5185 (\u3064\u307e\u308a\u3001 ",(0,s.jsx)(n.code,{children:"10 ** -2 / 2"}),")\u3068\u306a\u308a\u307e\u3059\u3002"]}),"\n",(0,s.jsx)(n.p,{children:"\u306a\u305c\u306a\u3089\u300110 \u9032\u6570(\u30d9\u30fc\u30b9 10)\u3067\u306e\u8a08\u7b97\u306f\u3001\u9650\u3089\u308c\u305f\u7cbe\u5ea6\u306e\u4e8c\u9032\u6570(\u30d9\u30fc\u30b9 2)\u3067\u306e\u8868\u73fe\u306b\u3088\u308b\u4e38\u3081\u8aa4\u5dee\u3092\u542b\u3093\u3067\u3044\u308b\u3053\u3068\u304c\u3088\u304f\u3042\u308b\u304b\u3089\uff44\u3059\u3002 \u4f8b\u3048\u3070\u3001\u3053\u306e\u30c6\u30b9\u30c8\u306f\u5931\u6557\u3057\u307e\u3059:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('adding works sanely with decimals', () => {\n  expect(0.2 + 0.1).toBe(0.3); // Fails!\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["JavaScript\u3067\u306f",(0,s.jsx)(n.code,{children:"0.2 + 0.1"})," \u306f\u5b9f\u969b\u306b\u306f ",(0,s.jsx)(n.code,{children:"0.30000000000000004"}),"\u306a\u306e\u3067\u3053\u306e\u30c6\u30b9\u30c8\u306f\u5931\u6557\u3057\u307e\u3059\u3002"]}),"\n",(0,s.jsx)(n.p,{children:"\u4f8b\u3048\u3070\u3001\u3053\u306e\u30c6\u30b9\u30c8\u306f\u5c0f\u6570\u70b9\u4ee5\u4e0b5\u6841\u306e\u7cbe\u5ea6\u3067\u5408\u683c\u3057\u307e\u3059\u3002"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('adding works sanely with decimals', () => {\n  expect(0.2 + 0.1).toBeCloseTo(0.3, 5);\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"toBeCloseTo"})," \u304c\u89e3\u6c7a\u3059\u3079\u304d\u306a\u306e\u306f\u6d6e\u52d5\u5c0f\u6570\u70b9\u306b\u304a\u3051\u308b\u30a8\u30e9\u30fc\u306a\u306e\u3067\u3001\u5927\u304d\u306a\u6574\u6570\u5024\u306f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002"]}),"\n",(0,s.jsx)(n.h3,{id:"tobedefined",children:(0,s.jsx)(n.code,{children:".toBeDefined()"})}),"\n",(0,s.jsxs)(n.p,{children:["\u5909\u6570\u304c undefined \u3067\u306f\u306a\u3044\u3053\u3068\u3092\u691c\u8a3c\u3059\u308b\u306b\u306f\u3001",(0,s.jsx)(n.code,{children:".toBeDefined"})," \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 \u4f8b\u3048\u3070\u3001",(0,s.jsx)(n.code,{children:"fetchNewFlavorIdea()"})," \u95a2\u6570\u304c ",(0,s.jsx)(n.em,{children:"\u4f55\u3089\u304b\u306e\u5024"})," \u3092\u8fd4\u3059\u3053\u3068\u3092\u691c\u8a3c\u3059\u308b\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8a18\u8ff0\u3057\u307e\u3059\uff1a"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('there is a new flavor idea', () => {\n  expect(fetchNewFlavorIdea()).toBeDefined();\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"expect(fetchNewFlavorIdea()).not.toBe(undefined)"}),"\u3068\u3082\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\u3001",(0,s.jsx)(n.code,{children:"undefined"}),"\u3092\u76f4\u63a5\u30b3\u30fc\u30c9\u5185\u3067\u53c2\u7167\u3059\u308b\u306e\u306f\u907f\u3051\u305f\u307b\u3046\u304c\u5b9f\u52d9\u4e0a\u826f\u3044\u3067\u3057\u3087\u3046\u3002"]}),"\n",(0,s.jsx)(n.h3,{id:"tobefalsy",children:(0,s.jsx)(n.code,{children:".toBeFalsy()"})}),"\n",(0,s.jsxs)(n.p,{children:["\u5024\u304c\u3069\u306e\u3088\u3046\u306a\u3082\u306e\u304b\u3092\u6c17\u306b\u305b\u305a\u3001\u771f\u507d\u5024\u306e\u30b3\u30f3\u30c6\u30af\u30b9\u30c8\u306e\u4e2d\u3067\u5024\u304c\u507d\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u305f\u3044\u5834\u5408\u306f",(0,s.jsx)(n.code,{children:".toBeFalsy"})," \u3092\u4f7f\u7528\u3057\u3066\u4e0b\u3055\u3044\u3002 \u4f8b\u3048\u3070\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b3\u30fc\u30c9\u304c\u3042\u3063\u305f\u3068\u3057\u307e\u3059:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"drinkSomeLaCroix();\nif (!getErrors()) {\n  drinkMoreLaCroix();\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"getErrors"}),"\u304c\u3069\u3093\u306a\u3082\u306e\u3092\u8fd4\u3059\u304b\u306f\u7279\u306b\u6c17\u306b\u3057\u306a\u3044\u3067\u3057\u3087\u3046 - ",(0,s.jsx)(n.code,{children:"false"}),"\u3001",(0,s.jsx)(n.code,{children:"null"}),"\u3001\u3042\u308b\u3044\u306f ",(0,s.jsx)(n.code,{children:"0"}),"\u3092\u8fd4\u3059\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u305d\u308c\u3067\u3082\u30b3\u30fc\u30c9\u306f\u52d5\u4f5c\u3057\u307e\u3059\u3002 \u3060\u304b\u3089\u30e9\u30af\u30ed\u30ef\u98f2\u6599\u3092\u98f2\u3093\u3060\u5f8c\u3067\u30a8\u30e9\u30fc\u304c\u7121\u3044\u3053\u3068\u3092\u30c6\u30b9\u30c8\u3057\u305f\u3051\u308c\u3070\u3001\u3053\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('drinking La Croix does not lead to errors', () => {\n  drinkSomeLaCroix();\n  expect(getErrors()).toBeFalsy();\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["JavaScript\u3067\u306f\u3001\u507d\u3068\u985e\u63a8\u3055\u308c\u308b\uff16\u3064\u306e\u5024\u304c\u3042\u308a\u307e\u3059: ",(0,s.jsx)(n.code,{children:"false"}),"\u3001 ",(0,s.jsx)(n.code,{children:"0"}),"\u3001 ",(0,s.jsx)(n.code,{children:"''"}),"\u3001 ",(0,s.jsx)(n.code,{children:"null"}),"\u3001 ",(0,s.jsx)(n.code,{children:"undefined"}),"\u3001 \u305d\u3057\u3066 ",(0,s.jsx)(n.code,{children:"NaN"}),"\u3067\u3059\u3002 \u4ed6\u306e\u5168\u3066\u306f\u771f\u3068\u985e\u63a8\u3055\u308c\u307e\u3059\u3002"]}),"\n",(0,s.jsx)(n.h3,{id:"tobegreaterthannumber--bigint",children:(0,s.jsx)(n.code,{children:".toBeGreaterThan(number | bigint)"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"toBeGreaterThan"})," \u306b\u3088\u308a\u3001 ",(0,s.jsx)(n.code,{children:"\u5b9f\u969b\u5024 > \u671f\u5f85\u5024"})," \u306e\u6761\u4ef6\u3067number\u578b\u307e\u305f\u306fbigint \u578b\u306e\u6570\u5024\u3092\u6bd4\u8f03\u3057\u307e\u3059\u3002 \u4f8b\u3048\u3070\u3001 ",(0,s.jsx)(n.code,{children:"ouncesPerCan()"})," \u304c 10 \u30aa\u30f3\u30b9\u3088\u308a\u5927\u304d\u3044\u5024\u3092\u8fd4\u3059\u3053\u3068\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('ounces per can is more than 10', () => {\n  expect(ouncesPerCan()).toBeGreaterThan(10);\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"tobegreaterthanorequalnumber--bigint",children:(0,s.jsx)(n.code,{children:".toBeGreaterThanOrEqual(number | bigint)"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"toBeGreaterThanOrEqual"})," \u3092\u4f7f\u7528\u3057\u3066\u3001 ",(0,s.jsx)(n.code,{children:"\u5b9f\u969b\u5024 >= \u671f\u5f85\u5024"})," \u306e\u6761\u4ef6\u3067number\u578b\u307e\u305f\u306fbigint \u578b\u306e\u6570\u5024\u3092\u6bd4\u8f03\u3057\u307e\u3059\u3002 \u4f8b\u3048\u3070\u3001 ",(0,s.jsx)(n.code,{children:"ouncesPerCan()"})," \u304c12 \u30aa\u30f3\u30b9\u4ee5\u4e0a\u306e\u5024\u3092\u8fd4\u3059\u3053\u3068\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('ounces per can is at least 12', () => {\n  expect(ouncesPerCan()).toBeGreaterThanOrEqual(12);\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"tobelessthannumber--bigint",children:(0,s.jsx)(n.code,{children:".toBeLessThan(number | bigint)"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"toBeLessThan"})," \u3092\u4f7f\u7528\u3057\u3066\u3001",(0,s.jsx)(n.code,{children:"\u5b9f\u969b\u5024 < \u671f\u5f85\u5024"})," \u306e\u6761\u4ef6\u3067number\u578b\u307e\u305f\u306fbigint \u578b\u306e\u6570\u5024\u3092\u6bd4\u8f03\u3057\u307e\u3059\u3002 \u4f8b\u3048\u3070\u3001 ",(0,s.jsx)(n.code,{children:"ouncesPerCan()"})," \u304c 20 \u30aa\u30f3\u30b9\u672a\u6e80\u306e\u5024\u3092\u8fd4\u3059\u3053\u3068\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('ounces per can is less than 20', () => {\n  expect(ouncesPerCan()).toBeLessThan(20);\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"tobelessthanorequalnumber--bigint",children:(0,s.jsx)(n.code,{children:".toBeLessThanOrEqual(number | bigint)"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"toBeLessThanOrEqual"})," \u3092\u4f7f\u7528\u3057\u3066\u3001 ",(0,s.jsx)(n.code,{children:"\u5b9f\u969b\u5024 <= \u671f\u5f85\u5024"})," \u306e\u6761\u4ef6\u3067number\u578b\u307e\u305f\u306fbigint \u578b\u306e\u6570\u5024\u3092\u6bd4\u8f03\u3057\u307e\u3059\u3002 \u4f8b\u3048\u3070\u3001 ",(0,s.jsx)(n.code,{children:"ouncesPerCan()"})," \u304c12 \u30aa\u30f3\u30b9\u4ee5\u4e0b\u306e\u5024\u3092\u8fd4\u3059\u3053\u3068\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('ounces per can is at most 12', () => {\n  expect(ouncesPerCan()).toBeLessThanOrEqual(12);\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"tobeinstanceofclass",children:(0,s.jsx)(n.code,{children:".toBeInstanceOf(Class)"})}),"\n",(0,s.jsxs)(n.p,{children:["\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u306b\u306f ",(0,s.jsx)(n.code,{children:".toBeInstanceOf(Class)"}),"\u3092\u4f7f\u7528\u3057\u3066\u4e0b\u3055\u3044\u3002 \u3053\u306e\u30de\u30c3\u30c1\u30e3\u306f ",(0,s.jsx)(n.code,{children:"instanceof"}),"\u3092\u5185\u90e8\u3067\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"class A {}\n\nexpect(new A()).toBeInstanceOf(A);\nexpect(() => {}).toBeInstanceOf(Function);\nexpect(new A()).toBeInstanceOf(Function); // throws\n"})}),"\n",(0,s.jsx)(n.h3,{id:"tobenull",children:(0,s.jsx)(n.code,{children:".toBeNull()"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:".toBeNull()"})," \u306f ",(0,s.jsx)(n.code,{children:".toBe(null)"}),"\u3068\u540c\u3058\u3067\u3059\u304c\u3001\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u5c11\u3057\u5206\u304b\u308a\u3084\u3059\u3044\u3082\u306e\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u305d\u306e\u305f\u3081\u4f55\u304b\u304cnull\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u305f\u3044\u5834\u5408\u306f ",(0,s.jsx)(n.code,{children:".toBeNull()"}),"\u3092\u4f7f\u7528\u3057\u3066\u4e0b\u3055\u3044\u3002"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function bloop() {\n  return null;\n}\n\ntest('bloop returns null', () => {\n  expect(bloop()).toBeNull();\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"tobetruthy",children:(0,s.jsx)(n.code,{children:".toBeTruthy()"})}),"\n",(0,s.jsxs)(n.p,{children:["\u5024\u304c\u3069\u306e\u3088\u3046\u306a\u3082\u306e\u304b\u3092\u6c17\u306b\u305b\u305a\u3001\u771f\u507d\u5024\u306e\u30b3\u30f3\u30c6\u30af\u30b9\u30c8\u306e\u4e2d\u3067\u5024\u304c\u771f\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u305f\u3044\u5834\u5408\u306f",(0,s.jsx)(n.code,{children:".toBeTruthy"})," \u3092\u4f7f\u7528\u3057\u3066\u4e0b\u3055\u3044\u3002 \u4f8b\u3048\u3070\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b3\u30fc\u30c9\u304c\u3042\u3063\u305f\u3068\u3057\u307e\u3059:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"drinkSomeLaCroix();\nif (thirstInfo()) {\n  drinkMoreLaCroix();\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"thirstInfo"}),"\u304c\u3069\u3093\u306a\u3082\u306e\u3092\u8fd4\u3059\u304b\u306f\u7279\u306b\u6c17\u306b\u3057\u306a\u3044\u3067\u3057\u3087\u3046 - ",(0,s.jsx)(n.code,{children:"true"}),"\u3082\u3057\u304f\u306f\u8907\u96d1\u306a\u5024\u3092\u8fd4\u3059\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u305d\u308c\u3067\u3082\u30b3\u30fc\u30c9\u306f\u52d5\u4f5c\u3057\u307e\u3059\u3002 \u3060\u304b\u3089\u30e9\u30af\u30ed\u30ef\u98f2\u6599\u3092\u98f2\u3093\u3060\u5f8c\u306b",(0,s.jsx)(n.code,{children:"thirstInfo"}),"\u304c\u771f(\u307e\u305f\u306f\u305d\u3046\u985e\u63a8\u3055\u308c\u308b\u5024) \u3092\u8fd4\u3059\u3053\u3068\u3092\u30c6\u30b9\u30c8\u3059\u308b\u306b\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('drinking La Croix leads to having thirst info', () => {\n  drinkSomeLaCroix();\n  expect(thirstInfo()).toBeTruthy();\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["JavaScript\u3067\u306f\u3001\u507d\u3068\u985e\u63a8\u3055\u308c\u308b\uff16\u3064\u306e\u5024\u304c\u3042\u308a\u307e\u3059: ",(0,s.jsx)(n.code,{children:"false"}),"\u3001 ",(0,s.jsx)(n.code,{children:"0"}),"\u3001 ",(0,s.jsx)(n.code,{children:"''"}),"\u3001 ",(0,s.jsx)(n.code,{children:"null"}),"\u3001 ",(0,s.jsx)(n.code,{children:"undefined"}),"\u3001 \u305d\u3057\u3066 ",(0,s.jsx)(n.code,{children:"NaN"}),"\u3067\u3059\u3002 \u4ed6\u306e\u5168\u3066\u306f\u771f\u3068\u985e\u63a8\u3055\u308c\u307e\u3059\u3002"]}),"\n",(0,s.jsx)(n.h3,{id:"tobeundefined",children:(0,s.jsx)(n.code,{children:".toBeUndefined()"})}),"\n",(0,s.jsxs)(n.p,{children:["\u95a2\u6570\u304c\u547c\u3070\u308c\u305f\u969b\u306b\u30a8\u30e9\u30fc\u3092\u6295\u3052\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u306b\u306f",(0,s.jsx)(n.code,{children:".toThrow"})," \u3092\u4f7f\u7528\u3057\u3066\u4e0b\u3055\u3044\u3002 \u4f8b\u3048\u3070\u3001\u30bf\u30b3\u5473\u306a\u3093\u3066\u6c17\u6301\u3061\u60aa\u3059\u304e\u3066\u98f2\u3081\u306a\u3044\u306e\u3067",(0,s.jsx)(n.code,{children:"drinkFlavor('octopus')"})," \u304c\u4f8b\u5916\u3092\u6295\u3052\u308b\u3053\u3068\u3092\u30c6\u30b9\u30c8\u3057\u305f\u3044\u5834\u5408\u3001\u6b21\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('the best drink for octopus flavor is undefined', () => {\n  expect(bestDrinkForFlavor('octopus')).toBeUndefined();\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"expect(bestDrinkForFlavor('octopus')).toBe(undefined)"}),"\u3068\u3082\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\u3001",(0,s.jsx)(n.code,{children:"undefined"}),"\u3092\u76f4\u63a5\u30b3\u30fc\u30c9\u5185\u3067\u53c2\u7167\u3059\u308b\u306e\u306f\u907f\u3051\u305f\u307b\u3046\u304c\u5b9f\u52d9\u4e0a\u826f\u3044\u3067\u3057\u3087\u3046\u3002"]}),"\n",(0,s.jsx)(n.h3,{id:"tobenan",children:(0,s.jsx)(n.code,{children:".toBeNaN()"})}),"\n",(0,s.jsxs)(n.p,{children:["\u5024\u304c ",(0,s.jsx)(n.code,{children:"NaN"}),"\u3067\u3042\u308b\u304b\u3092\u691c\u8a3c\u3059\u308b\u306b\u306f\u3001 ",(0,s.jsx)(n.code,{children:".toBeNaN"})," \u3092\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('passes when value is NaN', () => {\n  expect(NaN).toBeNaN();\n  expect(1).not.toBeNaN();\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"tocontainitem",children:(0,s.jsx)(n.code,{children:".toContain(item)"})}),"\n",(0,s.jsxs)(n.p,{children:["\u30a2\u30a4\u30c6\u30e0\u304c\u914d\u5217\u5185\u306b\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u305f\u3044\u5834\u5408\u306f\u3001",(0,s.jsx)(n.code,{children:".toContain"})," \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 \u914d\u5217\u5185\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u30c6\u30b9\u30c8\u3059\u308b\u305f\u3081\u306b\u3001 \u3053\u306e\u30de\u30c3\u30c1\u30e3\u306f",(0,s.jsx)(n.code,{children:"==="}),"\u3092\u4f7f\u7528\u3057\u3066\u53b3\u5bc6\u306a\u7b49\u4fa1\u6027\u306e\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3044\u307e\u3059\u3002 ",(0,s.jsx)(n.code,{children:".toContain"}),"\u306f\u3001\u3042\u308b\u6587\u5b57\u5217\u304c\u5225\u306e\u6587\u5b57\u5217\u306e\u90e8\u5206\u6587\u5b57\u5217\u3067\u3042\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u4f8b\u3048\u3070 ",(0,s.jsx)(n.code,{children:"getAllFlavors()"}),"\u304c\u98a8\u5473\u306e\u914d\u5217\u3092\u8fd4\u3057\u3001",(0,s.jsx)(n.code,{children:"lime"}),"\u304c\u305d\u306e\u4e2d\u306b\u3042\u308b\u4e8b\u3092\u78ba\u8a8d\u3057\u305f\u3044\u306a\u3089\u3001\u3053\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('the flavor list contains lime', () => {\n  expect(getAllFlavors()).toContain('lime');\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"This matcher also accepts others iterables such as strings, sets, node lists and HTML collections."}),"\n",(0,s.jsx)(n.h3,{id:"tocontainequalitem",children:(0,s.jsx)(n.code,{children:".toContainEqual(item)"})}),"\n",(0,s.jsxs)(n.p,{children:["\u7279\u5b9a\u306e\u69cb\u9020\u3068\u5024\u3092\u6301\u3064\u8981\u7d20\u304c\u914d\u5217\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u30c1\u30a7\u30c3\u30af\u3057\u305f\u3044\u5834\u5408\u306f",(0,s.jsx)(n.code,{children:".toContainEqual"}),"\u3092\u4f7f\u7528\u3057\u3066\u4e0b\u3055\u3044\u3002 \u914d\u5217\u4e2d\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u30c6\u30b9\u30c8\u3059\u308b\u305f\u3081\u306b\u3001\u3053\u306e\u30de\u30c3\u30c1\u30e3\u306f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8ID\u3067\u306f\u306a\u304f\u3001\u518d\u5e30\u7684\u306b\u5168\u3066\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u7b49\u4fa1\u6027\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"describe('my beverage', () => {\n  test('is delicious and not sour', () => {\n    const myBeverage = {delicious: true, sour: false};\n    expect(myBeverages()).toContainEqual(myBeverage);\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"toequalvalue",children:(0,s.jsx)(n.code,{children:".toEqual(value)"})}),"\n",(0,s.jsxs)(n.p,{children:["\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u3059\u3079\u3066\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u518d\u5e30\u7684\u306b\u7b49\u3057\u3044\u304b\u306e\u691c\u8a3c (\u300c\u6df1\u3044\u300d\u7b49\u4fa1\u6027\u3068\u3057\u3066\u3082\u77e5\u3089\u308c\u3066\u3044\u307e\u3059)\u306b\u306f\u3001 ",(0,s.jsx)(n.code,{children:".toEqual"})," \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 It calls ",(0,s.jsx)(n.code,{children:"Object.is"})," to compare primitive values, which is even better for testing than ",(0,s.jsx)(n.code,{children:"==="})," strict equality operator."]}),"\n",(0,s.jsxs)(n.p,{children:["\u4f8b\u3048\u3070\u3001 ",(0,s.jsx)(n.code,{children:".toEqual"})," \u3068 ",(0,s.jsx)(n.code,{children:".toBe"}),"\u306f\u4ee5\u4e0b\u306e\u30c6\u30b9\u30c8\u30b9\u30a4\u30fc\u30c8\u3067\u7570\u306a\u308b\u632f\u308b\u821e\u3044\u3092\u3059\u308b\u306e\u3067\u3001\u5168\u3066\u306e\u30c6\u30b9\u30c8\u304c\u30d1\u30b9\u3057\u307e\u3059:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const can1 = {\n  flavor: 'grapefruit',\n  ounces: 12,\n};\nconst can2 = {\n  flavor: 'grapefruit',\n  ounces: 12,\n};\n\ndescribe('the La Croix cans on my desk', () => {\n  test('have all the same properties', () => {\n    expect(can1).toEqual(can2);\n  });\n  test('are not the exact same can', () => {\n    expect(can1).not.toBe(can2);\n  });\n});\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"toEqual"})," ignores object keys with ",(0,s.jsx)(n.code,{children:"undefined"})," properties, ",(0,s.jsx)(n.code,{children:"undefined"})," array items, array sparseness, or object type mismatch. \u3053\u308c\u3089\u3092\u8003\u616e\u3059\u308b\u306b\u306f\u3001\u4ee3\u308f\u308a\u306b ",(0,s.jsx)(n.a,{href:"#tostrictequalvalue",children:(0,s.jsx)(n.code,{children:".toStrictEqual"})})," \u3092\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002"]})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:".toEqual"})," won't perform a ",(0,s.jsx)(n.em,{children:"deep equality"})," check for two errors. \u30a8\u30e9\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e ",(0,s.jsx)(n.code,{children:"message"}),"\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u307f\u3092\u7b49\u4fa1\u6027\u306e\u6bd4\u8f03\u5bfe\u8c61\u3068\u3057\u307e\u3059\u3002 \u30a8\u30e9\u30fc\u306b\u5bfe\u3059\u308b\u30c6\u30b9\u30c8\u306f ",(0,s.jsx)(n.code,{children:".toThrow"}),"\u30de\u30c3\u30c1\u30e3\u306e\u4f7f\u7528\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002"]})}),"\n",(0,s.jsxs)(n.p,{children:["\u7279\u306b\u30ec\u30dd\u30fc\u30c8\u304c\u5927\u304d\u3044\u5834\u5408\u306b\u306f\u3001\u30d7\u30ed\u30d1\u30c6\u30a3\u9593\u306e\u5dee\u5206\u306f\u3001\u30c6\u30b9\u30c8\u304c\u5931\u6557\u3059\u308b\u7406\u539f\u56e0\u3092\u89e3\u660e\u3059\u308b\u3053\u3068\u306b\u5bc4\u4e0e\u3057\u307e\u305b\u3093\u3002 \u4f8b\u3048\u3070\u3001\u30d0\u30c3\u30d5\u30a1\u306b\u540c\u3058\u5185\u5bb9\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u30a2\u30b5\u30fc\u30c8\u3059\u308b\u306b\u306f\u3001 ",(0,s.jsx)(n.code,{children:"Buffer"})," \u30af\u30e9\u30b9\u306e ",(0,s.jsx)(n.code,{children:"equals"})," \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u4e0b\u3055\u3044\u3002"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["rewrite ",(0,s.jsx)(n.code,{children:"expect(received).toEqual(expected)"})," as ",(0,s.jsx)(n.code,{children:"expect(received.equals(expected)).toBe(true)"})]}),"\n",(0,s.jsxs)(n.li,{children:["rewrite ",(0,s.jsx)(n.code,{children:"expect(received).not.toEqual(expected)"})," as ",(0,s.jsx)(n.code,{children:"expect(received.equals(expected)).toBe(false)"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"tomatchregexp--string",children:(0,s.jsx)(n.code,{children:".toMatch(regexp | string)"})}),"\n",(0,s.jsxs)(n.p,{children:["\u6587\u5b57\u5217\u304c\u6b63\u898f\u8868\u73fe\u3068\u4e00\u81f4\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u306b\u306f",(0,s.jsx)(n.code,{children:".toMatch"})," \u3092\u4f7f\u7528\u3057\u3066\u4e0b\u3055\u3044\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u4f8b\u3048\u3070\u3001",(0,s.jsx)(n.code,{children:"essayOnTheBestFlavor()"})," \u304c\u3069\u306e\u3088\u3046\u306a\u3082\u306e\u304b\u6b63\u78ba\u306b\u306f\u5206\u304b\u3089\u306a\u3044\u3051\u308c\u3069\u3082\u672c\u5f53\u306b\u9577\u3044\u6587\u5b57\u5217\u3092\u8fd4\u3059\u3053\u3068\u3001\u305d\u3057\u3066 ",(0,s.jsx)(n.code,{children:"grapefruit"}),"\u3068\u3044\u3046\u6587\u5b57\u5217\u304c\u305d\u306e\u4e2d\u306e\u3069\u3053\u304b\u306b\u542b\u307e\u308c\u308b\u3079\u304d\u3067\u3042\u308b\u3068\u3044\u3046\u3053\u3068\u3092\u77e5\u3063\u3066\u3044\u308b\u3068\u3057\u307e\u3057\u3087\u3046\u3002 \u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u30c6\u30b9\u30c8\u3067\u304d\u307e\u3059:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"describe('an essay on the best flavor', () => {\n  test('mentions grapefruit', () => {\n    expect(essayOnTheBestFlavor()).toMatch(/grapefruit/);\n    expect(essayOnTheBestFlavor()).toMatch(new RegExp('grapefruit'));\n  });\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u3053\u306e\u30de\u30c3\u30c1\u30e3\u306f\u6b63\u898f\u8868\u73fe\u3068\u7167\u5408\u3059\u308b\u5bfe\u8c61\u306b\u6587\u5b57\u5217\u3082\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"describe('grapefruits are healthy', () => {\n  test('grapefruits are a fruit', () => {\n    expect('grapefruits').toMatch('fruit');\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"tomatchobjectobject",children:(0,s.jsx)(n.code,{children:".toMatchObject(object)"})}),"\n",(0,s.jsxs)(n.p,{children:["JavaScript \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u3001\u3042\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u30b5\u30d6\u30bb\u30c3\u30c8\u306b\u4e00\u81f4\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u306b\u306f",(0,s.jsx)(n.code,{children:".ToMatchObject"})," \u3092\u4f7f\u7528\u3057\u3066\u4e0b\u3055\u3044\u3002 \u671f\u5f85\u3055\u308c\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u542b\u307e\u308c",(0,s.jsx)(n.strong,{children:"\u306a\u3044"}),"\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u542b\u3080\u5f15\u6570\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u3064\u3044\u3066\u3082\u4e00\u81f4\u3057\u307e\u3059\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u914d\u5217\u3092\u6e21\u3059\u3053\u3068\u3082\u3067\u304d\u3001\u305d\u306e\u5834\u5408\u306f\u30e1\u30bd\u30c3\u30c9\u306f\u671f\u5f85\u3059\u308b\u914d\u5217\u306e\u5bfe\u5fdc\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u5f15\u6570\u306e\u914d\u5217\u306e\u5404\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c( \u4e0a\u8ff0\u306e",(0,s.jsx)(n.code,{children:"toMatchObject"}),"\u3068\u540c\u3058\u610f\u5473\u3067) \u4e00\u81f4\u3059\u308b\u5834\u5408\u306e\u307f\u771f\u3092\u8fd4\u3057\u307e\u3059\u3002 \u3053\u306eAPI\u306f\u5f15\u6570\u306e\u914d\u5217\u304c\u4f59\u5206\u306a\u8981\u7d20\u3092\u6301\u3064\u3053\u3068\u3092\u53d7\u5bb9\u3059\u308b ",(0,s.jsx)(n.code,{children:"arrayContaining"}),"\u3068\u306f\u53cd\u5bfe\u306b\u30012\u3064\u306e\u914d\u5217\u304c\u305d\u306e\u6570\u3067\u4e00\u81f4\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u306e\u306b\u4fbf\u5229\u3067\u3059\u3002"]}),"\n",(0,s.jsx)(n.p,{children:"\u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u5024\u307e\u305f\u306f\u30de\u30c3\u30c1\u30e3\u3067\u30de\u30c3\u30c1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const houseForSale = {\n  bath: true,\n  bedrooms: 4,\n  kitchen: {\n    amenities: ['oven', 'stove', 'washer'],\n    area: 20,\n    wallColor: 'white',\n  },\n};\nconst desiredHouse = {\n  bath: true,\n  kitchen: {\n    amenities: ['oven', 'stove', 'washer'],\n    wallColor: expect.stringMatching(/white|yellow/),\n  },\n};\n\ntest('the house has my desired features', () => {\n  expect(houseForSale).toMatchObject(desiredHouse);\n});\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"describe('toMatchObject applied to arrays', () => {\n  test('the number of elements must match exactly', () => {\n    expect([{foo: 'bar'}, {baz: 1}]).toMatchObject([{foo: 'bar'}, {baz: 1}]);\n  });\n\n  test('.toMatchObject is called for each elements, so extra object properties are okay', () => {\n    expect([{foo: 'bar'}, {baz: 1, extra: 'quux'}]).toMatchObject([\n      {foo: 'bar'},\n      {baz: 1},\n    ]);\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"tomatchsnapshotpropertymatchers-hint",children:(0,s.jsx)(n.code,{children:".toMatchSnapshot(propertyMatchers?, hint?)"})}),"\n",(0,s.jsxs)(n.p,{children:["\u3053\u306e API \u306f\u6700\u3082\u6700\u8fd1\u306e\u30b9\u30ca\u30c3\u30d7\u30b7\u30e7\u30c3\u30c8\u3068\u4e00\u81f4\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002 \u8a73\u7d30\u306b\u3064\u3044\u3066\u306f ",(0,s.jsx)(n.a,{href:"/ja/docs/snapshot-testing",children:"the Snapshot Testing guide"})," \u3092\u78ba\u8a8d\u3057\u3066\u4e0b\u3055\u3044\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["You can provide an optional ",(0,s.jsx)(n.code,{children:"propertyMatchers"})," object argument, which has asymmetric matchers as values of a subset of expected properties, ",(0,s.jsx)(n.strong,{children:"if"})," the received value will be an ",(0,s.jsx)(n.strong,{children:"object"})," instance. It is like ",(0,s.jsx)(n.code,{children:"toMatchObject"})," with flexible criteria for a subset of properties, followed by a snapshot test as exact criteria for the rest of the properties."]}),"\n",(0,s.jsxs)(n.p,{children:["You can provide an optional ",(0,s.jsx)(n.code,{children:"hint"})," string argument that is appended to the test name. Although Jest always appends a number at the end of a snapshot name, short descriptive hints might be more useful than numbers to differentiate ",(0,s.jsx)(n.strong,{children:"multiple"})," snapshots in a ",(0,s.jsx)(n.strong,{children:"single"})," ",(0,s.jsx)(n.code,{children:"it"})," or ",(0,s.jsx)(n.code,{children:"test"})," block. Jest sorts snapshots by name in the corresponding ",(0,s.jsx)(n.code,{children:".snap"})," file."]}),"\n",(0,s.jsx)(n.h3,{id:"tomatchinlinesnapshotpropertymatchers-inlinesnapshot",children:(0,s.jsx)(n.code,{children:".toMatchInlineSnapshot(propertyMatchers?, inlineSnapshot)"})}),"\n",(0,s.jsx)(n.p,{children:"\u5024\u304c\u6700\u3082\u65b0\u3057\u3044\u30b9\u30ca\u30c3\u30d7\u30b7\u30e7\u30c3\u30c8\u306b\u30de\u30c3\u30c1\u3059\u308b\u3053\u3068\u3092\u4fdd\u8a3c\u3057\u307e\u3059\u3002"}),"\n",(0,s.jsxs)(n.p,{children:["You can provide an optional ",(0,s.jsx)(n.code,{children:"propertyMatchers"})," object argument, which has asymmetric matchers as values of a subset of expected properties, ",(0,s.jsx)(n.strong,{children:"if"})," the received value will be an ",(0,s.jsx)(n.strong,{children:"object"})," instance. It is like ",(0,s.jsx)(n.code,{children:"toMatchObject"})," with flexible criteria for a subset of properties, followed by a snapshot test as exact criteria for the rest of the properties."]}),"\n",(0,s.jsxs)(n.p,{children:["Jest adds the ",(0,s.jsx)(n.code,{children:"inlineSnapshot"})," string argument to the matcher in the test file (instead of an external ",(0,s.jsx)(n.code,{children:".snap"})," file) the first time that the test runs."]}),"\n",(0,s.jsxs)(n.p,{children:["\u8a73\u3057\u3044\u60c5\u5831\u306b\u3064\u3044\u3066\u306f\u3001",(0,s.jsx)(n.a,{href:"/ja/docs/snapshot-testing#inline-snapshots",children:"\u30a4\u30f3\u30e9\u30a4\u30f3\u30b9\u30ca\u30c3\u30d7\u30b7\u30e7\u30c3\u30c8"}),"\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002"]}),"\n",(0,s.jsx)(n.h3,{id:"tostrictequalvalue",children:(0,s.jsx)(n.code,{children:".toStrictEqual(value)"})}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:".toStrictEqual"})," to test that objects have the same structure and type."]}),"\n",(0,s.jsxs)(n.p,{children:["Differences from ",(0,s.jsx)(n.code,{children:".toEqual"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["keys with ",(0,s.jsx)(n.code,{children:"undefined"})," properties are checked, e.g. ",(0,s.jsx)(n.code,{children:"{a: undefined, b: 2}"})," will not equal ",(0,s.jsx)(n.code,{children:"{b: 2}"}),";"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"undefined"})," items are taken into account, e.g. ",(0,s.jsx)(n.code,{children:"[2]"})," will not equal ",(0,s.jsx)(n.code,{children:"[2, undefined]"}),";"]}),"\n",(0,s.jsxs)(n.li,{children:["array sparseness is checked, e.g. ",(0,s.jsx)(n.code,{children:"[, 1]"})," will not equal ",(0,s.jsx)(n.code,{children:"[undefined, 1]"}),";"]}),"\n",(0,s.jsxs)(n.li,{children:["object types are checked, e.g. a class instance with fields ",(0,s.jsx)(n.code,{children:"a"})," and ",(0,s.jsx)(n.code,{children:"b"})," will not equal a literal object with fields ",(0,s.jsx)(n.code,{children:"a"})," and ",(0,s.jsx)(n.code,{children:"b"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"class LaCroix {\n  constructor(flavor) {\n    this.flavor = flavor;\n  }\n}\n\ndescribe('the La Croix cans on my desk', () => {\n  test('are not semantically the same', () => {\n    expect(new LaCroix('\u30ec\u30e2\u30f3')).toEqual({flavor: '\u30ec\u30e2\u30f3'});\n    expect(new LaCroix('\u30ec\u30e2\u30f3')).not.toStrictEqual({flavor: '\u30ec\u30e2\u30f3'});\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"tothrowerror",children:(0,s.jsx)(n.code,{children:".toThrow(error?)"})}),"\n",(0,s.jsxs)(n.p,{children:["Also under the alias: ",(0,s.jsx)(n.code,{children:".toThrowError(error?)"})]}),"\n",(0,s.jsxs)(n.p,{children:["\u95a2\u6570\u304c\u547c\u3070\u308c\u305f\u969b\u306b\u30a8\u30e9\u30fc\u3092\u6295\u3052\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u306b\u306f",(0,s.jsx)(n.code,{children:".toThrow"})," \u3092\u4f7f\u7528\u3057\u3066\u4e0b\u3055\u3044\u3002 \u4f8b\u3048\u3070\u3001 \u95a2\u6570",(0,s.jsx)(n.code,{children:"bestDrinkForFlavor(flavor)"}),"\u304c",(0,s.jsx)(n.code,{children:"'octopus'"}),"\u5473\u304c\u4e0e\u3048\u3089\u308c\u305f\u6642\u306b",(0,s.jsx)(n.code,{children:"undefined"}),"\u3092\u8fd4\u3059\u3053\u3068\u3092\u78ba\u8a8d\u3057\u305f\u3044\u3068\u3057\u307e\u3057\u3087\u3046\u3002 \u30bf\u30b3\u5473\u306e\u7f8e\u5473\u3057\u3044\u98f2\u307f\u7269\u306a\u3093\u3066\u3042\u308a\u307e\u305b\u3093\u304b\u3089:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('throws on octopus', () => {\n  expect(() => {\n    drinkFlavor('octopus');\n  }).toThrow();\n});\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"You must wrap the code in a function, otherwise the error will not be caught and the assertion will fail."})}),"\n",(0,s.jsx)(n.p,{children:"You can provide an optional argument to test that a specific error is thrown:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["regular expression: error message ",(0,s.jsx)(n.strong,{children:"matches"})," the pattern"]}),"\n",(0,s.jsxs)(n.li,{children:["string: error message ",(0,s.jsx)(n.strong,{children:"includes"})," the substring"]}),"\n",(0,s.jsxs)(n.li,{children:["error object: error message is ",(0,s.jsx)(n.strong,{children:"equal to"})," the message property of the object"]}),"\n",(0,s.jsxs)(n.li,{children:["error class: error object is ",(0,s.jsx)(n.strong,{children:"instance of"})," class"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["\u4f8b\u3048\u3070\u3001",(0,s.jsx)(n.code,{children:"drinkFlavor"}),"\u306f\u3053\u306e\u3088\u3046\u306b\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3055\u308c\u305f\u3068\u3057\u307e\u3057\u3087\u3046:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function drinkFlavor(flavor) {\n  if (flavor == 'octopus') {\n    throw new DisgustingFlavorError('yuck, octopus flavor');\n  }\n  // Do some other stuff\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u3044\u304f\u3064\u304b\u306e\u65b9\u6cd5\u3067\u3053\u306e\u30a8\u30e9\u30fc\u304c\u6295\u3052\u3089\u308c\u308b\u3053\u3068\u3092\u30c6\u30b9\u30c8\u3067\u304d\u307e\u3059:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('throws on octopus', () => {\n  function drinkOctopus() {\n    drinkFlavor('octopus');\n  }\n\n  // Test that the error message says \"yuck\" somewhere: these are equivalent\n  expect(drinkOctopus).toThrow(/yuck/);\n  expect(drinkOctopus).toThrow('yuck');\n\n  // Test the exact error message\n  expect(drinkOctopus).toThrow(/^yuck, octopus flavor$/);\n  expect(drinkOctopus).toThrow(new Error('yuck, octopus flavor'));\n\n  // Test that we get a DisgustingFlavorError\n  expect(drinkOctopus).toThrow(DisgustingFlavorError);\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"tothrowerrormatchingsnapshothint",children:(0,s.jsx)(n.code,{children:".toThrowErrorMatchingSnapshot(hint?)"})}),"\n",(0,s.jsxs)(n.p,{children:["\u95a2\u6570\u304c\u547c\u3070\u308c\u305f\u969b\u306b\u76f4\u8fd1\u306e\u30b9\u30ca\u30c3\u30d7\u30b7\u30e7\u30c3\u30c8\u3068\u4e00\u81f4\u3059\u308b\u30a8\u30e9\u30fc\u3092\u6295\u3052\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u306b\u306f\u3001 ",(0,s.jsx)(n.code,{children:".toThrowErrorMatchingSnapshot"}),"\u3092\u4f7f\u7528\u3057\u3066\u4e0b\u3055\u3044\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["You can provide an optional ",(0,s.jsx)(n.code,{children:"hint"})," string argument that is appended to the test name. Although Jest always appends a number at the end of a snapshot name, short descriptive hints might be more useful than numbers to differentiate ",(0,s.jsx)(n.strong,{children:"multiple"})," snapshots in a ",(0,s.jsx)(n.strong,{children:"single"})," ",(0,s.jsx)(n.code,{children:"it"})," or ",(0,s.jsx)(n.code,{children:"test"})," block. Jest sorts snapshots by name in the corresponding ",(0,s.jsx)(n.code,{children:".snap"})," file."]}),"\n",(0,s.jsxs)(n.p,{children:["\u4f8b\u3048\u3070\u3001 \u98a8\u5473\u304c",(0,s.jsx)(n.code,{children:"'octopus'"}),"\u306a\u3089\u3070\u5fc5\u305a\u30a8\u30e9\u30fc\u3092\u6295\u3052\u308b",(0,s.jsx)(n.code,{children:"drinkFlavor"}),"\u95a2\u6570\u304c\u3042\u308a\u3001\u6b21\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3060\u3063\u305f\u3068\u3057\u307e\u3059:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function drinkFlavor(flavor) {\n  if (flavor == 'octopus') {\n    throw new DisgustingFlavorError('yuck, octopus flavor');\n  }\n  // Do some other stuff\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u3053\u306e\u95a2\u6570\u306e\u30c6\u30b9\u30c8\u306f\u3053\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('throws on octopus', () => {\n  function drinkOctopus() {\n    drinkFlavor('octopus');\n  }\n\n  expect(drinkOctopus).toThrowErrorMatchingSnapshot();\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u305d\u3057\u3066\u6b21\u306e\u3088\u3046\u306a\u30b9\u30ca\u30c3\u30d7\u30b7\u30e7\u30c3\u30c8\u3092\u751f\u6210\u3057\u307e\u3059:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'exports[`drinking flavors throws on octopus 1`] = `"yuck, octopus flavor"`;\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Check out ",(0,s.jsx)(n.a,{href:"/blog/2016/07/27/jest-14",children:"React Tree Snapshot Testing"})," for more information on snapshot testing."]}),"\n",(0,s.jsx)(n.h3,{id:"tothrowerrormatchinginlinesnapshotinlinesnapshot",children:(0,s.jsx)(n.code,{children:".toThrowErrorMatchingInlineSnapshot(inlineSnapshot)"})}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:".toThrowErrorMatchingInlineSnapshot"})," to test that a function throws an error matching the most recent snapshot when it is called."]}),"\n",(0,s.jsxs)(n.p,{children:["Jest adds the ",(0,s.jsx)(n.code,{children:"inlineSnapshot"})," string argument to the matcher in the test file (instead of an external ",(0,s.jsx)(n.code,{children:".snap"})," file) the first time that the test runs."]}),"\n",(0,s.jsxs)(n.p,{children:["\u8a73\u3057\u3044\u60c5\u5831\u306b\u3064\u3044\u3066\u306f\u3001",(0,s.jsx)(n.a,{href:"/ja/docs/snapshot-testing#inline-snapshots",children:"\u30a4\u30f3\u30e9\u30a4\u30f3\u30b9\u30ca\u30c3\u30d7\u30b7\u30e7\u30c3\u30c8"}),"\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002"]}),"\n",(0,s.jsx)(n.h2,{id:"asymmetric-matchers",children:"Asymmetric Matchers"}),"\n",(0,s.jsx)(n.h3,{id:"expectanything",children:(0,s.jsx)(n.code,{children:"expect.anything()"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"expect.anything()"})," \u306f\u3001",(0,s.jsx)(n.code,{children:"null"})," \u307e\u305f\u306f ",(0,s.jsx)(n.code,{children:"undefined"})," \u3092\u9664\u304f\u3082\u306e\u3059\u3079\u3066\u306b\u4e00\u81f4\u3057\u307e\u3059\u3002 ",(0,s.jsx)(n.code,{children:"toEqual"})," \u307e\u305f\u306f ",(0,s.jsx)(n.code,{children:"toBeCalledWith"})," \u306e\u5185\u5074\u3067\u30ea\u30c6\u30e9\u30eb\u5024\u306e\u4ee3\u308f\u308a\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 \u4f8b\u3048\u3070\u3001\u30e2\u30c3\u30af\u95a2\u6570\u304cnull\u3067\u306a\u3044\u5f15\u6570\u3092\u4e0e\u3048\u3089\u308c\u3066\u547c\u3073\u51fa\u3055\u308c\u305f\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u306b\u306f:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('map calls its argument with a non-null argument', () => {\n  const mock = jest.fn();\n  [1].map(x => mock(x));\n  expect(mock).toHaveBeenCalledWith(expect.anything());\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"expectanyconstructor",children:(0,s.jsx)(n.code,{children:"expect.any(constructor)"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"expect.any(constructor)"})," matches anything that was created with the given constructor or if it's a primitive that is of the passed type. ",(0,s.jsx)(n.code,{children:"toEqual"})," \u307e\u305f\u306f ",(0,s.jsx)(n.code,{children:"toBeCalledWith"})," \u306e\u5185\u5074\u3067\u30ea\u30c6\u30e9\u30eb\u5024\u306e\u4ee3\u308f\u308a\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 \u4f8b\u3048\u3070\u3001\u30e2\u30c3\u30af\u95a2\u6570\u304c\u6570\u5b57\u306e\u5f15\u6570\u3092\u4e0e\u3048\u3089\u308c\u3066\u547c\u3073\u51fa\u3055\u308c\u305f\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u306b\u306f:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"class Cat {}\nfunction getCat(fn) {\n  return fn(new Cat());\n}\n\ntest('randocall calls its callback with a class instance', () => {\n  const mock = jest.fn();\n  getCat(mock);\n  expect(mock).toHaveBeenCalledWith(expect.any(Cat));\n});\n\nfunction randocall(fn) {\n  return fn(Math.floor(Math.random() * 6 + 1));\n}\n\ntest('randocall calls its callback with a number', () => {\n  const mock = jest.fn();\n  randocall(mock);\n  expect(mock).toHaveBeenCalledWith(expect.any(Number));\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"expectarraycontainingarray",children:(0,s.jsx)(n.code,{children:"expect.arrayContaining(array)"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"expect.arrayContaining(array)"})," \u306f\u53d7\u3051\u53d6\u3063\u305f\u914d\u5217\u304c\u671f\u5f85\u3055\u308c\u308b\u914d\u5217\u306e\u8981\u7d20\u5168\u3066\u3092\u542b\u3080\u5834\u5408\u306b\u4e00\u81f4\u3057\u307e\u3059\u3002 \u3064\u307e\u308a\u53d7\u3051\u53d6\u3063\u305f\u914d\u5217\u306f\u671f\u5f85\u3055\u308c\u308b\u914d\u5217\u3092 ",(0,s.jsx)(n.strong,{children:"\u5305\u542b"})," \u3059\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002 \u3057\u305f\u304c\u3063\u3066\u53d7\u3051\u53d6\u308b\u914d\u5217\u304c\u671f\u5f85\u3055\u308c\u308b\u914d\u5217\u306b\u542b\u307e\u308c",(0,s.jsx)(n.strong,{children:"\u306a\u3044"}),"\u8981\u7d20\u3092\u542b\u3093\u3067\u3044\u3066\u3082\u4e00\u81f4\u3057\u307e\u3059\u3002"]}),"\n",(0,s.jsx)(n.p,{children:"\u4ee5\u4e0b\u306e\u30b1\u30fc\u30b9\u3067\u30ea\u30c6\u30e9\u30eb\u5024\u306e\u4ee3\u308f\u308a\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["in ",(0,s.jsx)(n.code,{children:"toEqual"})," or ",(0,s.jsx)(n.code,{children:"toBeCalledWith"})]}),"\n",(0,s.jsxs)(n.li,{children:["to match a property in ",(0,s.jsx)(n.code,{children:"objectContaining"})," or ",(0,s.jsx)(n.code,{children:"toMatchObject"})]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"describe('arrayContaining', () => {\n  const expected = ['Alice', 'Bob'];\n  it('matches even if received contains additional elements', () => {\n    expect(['Alice', 'Bob', 'Eve']).toEqual(expect.arrayContaining(expected));\n  });\n  it('does not match if received does not contain expected elements', () => {\n    expect(['Bob', 'Eve']).not.toEqual(expect.arrayContaining(expected));\n  });\n});\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"describe('Beware of a misunderstanding! A sequence of dice rolls', () => {\n  const expected = [1, 2, 3, 4, 5, 6];\n  it('matches even with an unexpected number 7', () => {\n    expect([4, 1, 6, 7, 3, 5, 2, 5, 4, 6]).toEqual(\n      expect.arrayContaining(expected),\n    );\n  });\n  it('does not match without an expected number 2', () => {\n    expect([4, 1, 6, 7, 3, 5, 7, 5, 4, 6]).not.toEqual(\n      expect.arrayContaining(expected),\n    );\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"expectnotarraycontainingarray",children:(0,s.jsx)(n.code,{children:"expect.not.arrayContaining(array)"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"expect.not.arrayContaining(array)"})," matches a received array which does not contain all of the elements in the expected array. \u3064\u307e\u308a\u3001\u671f\u5f85\u3055\u308c\u308b\u914d\u5217\u306f\u3001\u53d7\u3051\u53d6\u3063\u305f\u914d\u5217\u306e",(0,s.jsx)(n.strong,{children:"\u90e8\u5206\u96c6\u5408\u3067\u306f\u306a\u3044"}),"\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u3053\u308c\u306f ",(0,s.jsx)(n.code,{children:"expect.arrayContaining"})," \u306e\u9006\u3067\u3059\u3002"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"describe('not.arrayContaining', () => {\n  const expected = ['Samantha'];\n\n  it('matches if the actual array does not contain the expected elements', () => {\n    expect(['Alice', 'Bob', 'Eve']).toEqual(\n      expect.not.arrayContaining(expected),\n    );\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"expectclosetonumber-numdigits",children:(0,s.jsx)(n.code,{children:"expect.closeTo(number, numDigits?)"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"expect.closeTo(number, numDigits?)"})," is useful when comparing floating point numbers in object properties or array item. If you need to compare a number, please use ",(0,s.jsx)(n.code,{children:".toBeCloseTo"})," instead."]}),"\n",(0,s.jsxs)(n.p,{children:["\u30aa\u30d7\u30b7\u30e7\u30f3\u306e",(0,s.jsx)(n.code,{children:"numDigits"})," \u5f15\u6570\u306f\u5c0f\u6570\u70b9",(0,s.jsx)(n.strong,{children:"\u4ee5\u4e0b"}),"\u306e\u6841\u6570\u306e\u4e0a\u9650\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 For the default value ",(0,s.jsx)(n.code,{children:"2"}),", the test criterion is ",(0,s.jsx)(n.code,{children:"Math.abs(expected - received) < 0.005 (that is, 10 ** -2 / 2)"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"\u4f8b\u3048\u3070\u3001\u3053\u306e\u30c6\u30b9\u30c8\u306f\u5c0f\u6570\u70b9\u4ee5\u4e0b5\u6841\u306e\u7cbe\u5ea6\u3067\u5408\u683c\u3057\u307e\u3059\u3002"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('compare float in object properties', () => {\n  expect({\n    title: '0.1 + 0.2',\n    sum: 0.1 + 0.2,\n  }).toEqual({\n    title: '0.1 + 0.2',\n    sum: expect.closeTo(0.3, 5),\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"expectobjectcontainingobject",children:(0,s.jsx)(n.code,{children:"expect.objectContaining(object)"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"expect.objectContaining(object)"})," \u306f\u671f\u5f85\u3055\u308c\u305f\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u518d\u5e30\u7684\u306b\u4e00\u81f4\u3059\u308b\u3001\u3044\u304b\u306a\u308b\u53d7\u3051\u53d6\u3063\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u3082\u4e00\u81f4\u3057\u307e\u3059\u3002 \u3064\u307e\u308a\u671f\u5f85\u3055\u308c\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u53d7\u3051\u53d6\u3063\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e ",(0,s.jsx)(n.strong,{children:"\u4e00\u90e8\u5206"})," \u3067\u3042\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002 Therefore, it matches a received object which contains properties that ",(0,s.jsx)(n.strong,{children:"are present"})," in the expected object."]}),"\n",(0,s.jsxs)(n.p,{children:["\u671f\u5f85\u3055\u308c\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u30ea\u30c6\u30e9\u30eb\u5024\u3092\u8a2d\u5b9a\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001",(0,s.jsx)(n.code,{children:"expect.anything()"}),"\u306a\u3069\u306e\u30de\u30c3\u30c1\u30e3\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u4f8b\u3048\u3070\u3001",(0,s.jsx)(n.code,{children:"onPress"}),"\u95a2\u6570\u304c",(0,s.jsx)(n.code,{children:"Event"})," \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u5171\u306b\u547c\u3070\u308c\u3001event\u304c ",(0,s.jsx)(n.code,{children:"event.x"})," \u3068",(0,s.jsx)(n.code,{children:"event.y"})," \u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u6301\u3063\u3066\u3044\u308b\u3053\u3068\u3060\u3051\u78ba\u8a8d\u3067\u304d\u308c\u3070\u826f\u3044\u3068\u8003\u3048\u307e\u3057\u3087\u3046\u3002 \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3067\u304d\u307e\u3059:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('onPress gets called with the right thing', () => {\n  const onPress = jest.fn();\n  simulatePresses(onPress);\n  expect(onPress).toHaveBeenCalledWith(\n    expect.objectContaining({\n      x: expect.any(Number),\n      y: expect.any(Number),\n    }),\n  );\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"expectnotobjectcontainingobject",children:(0,s.jsx)(n.code,{children:"expect.not.objectContaining(object)"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"expect.not.objectContaining(object)"})," \u304c\u30de\u30c3\u30c1\u3059\u308b\u306e\u306f\u3001\u53d7\u3051\u53d6\u3063\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u3001\u671f\u5f85\u3055\u308c\u305f\u3069\u3093\u306a\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u3082\u518d\u5e30\u7684\u306b\u30de\u30c3\u30c1\u3057\u306a\u3044\u6642\u3067\u3059\u3002 \u3064\u307e\u308a\u3001\u671f\u5f85\u3055\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u3001\u53d7\u3051\u53d6\u3063\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e",(0,s.jsx)(n.strong,{children:"\u90e8\u5206\u96c6\u5408"}),"\u3067\u306f\u306a\u3044\u3001\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002 \u3057\u305f\u304c\u3063\u3066\u53d7\u3051\u53d6\u3063\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u671f\u5f85\u3055\u308c\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u542b\u307e\u308c",(0,s.jsx)(n.strong,{children:"\u306a\u3044"}),"\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u542b\u3093\u3067\u3044\u3066\u3082\u4e00\u81f4\u3057\u307e\u3059\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u3053\u308c\u306f ",(0,s.jsx)(n.code,{children:"expect.objectContaining"})," \u306e\u9006\u3067\u3059\u3002"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"describe('not.objectContaining', () => {\n  const expected = {foo: 'bar'};\n\n  it('matches if the actual object does not contain expected key: value pairs', () => {\n    expect({bar: 'baz'}).toEqual(expect.not.objectContaining(expected));\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"expectstringcontainingstring",children:(0,s.jsx)(n.code,{children:"expect.stringContaining(string)"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"expect.stringContaining(string)"})," matches the received value if it is a string that contains the exact expected string."]}),"\n",(0,s.jsx)(n.h3,{id:"expectnotstringcontainingstring",children:(0,s.jsx)(n.code,{children:"expect.not.stringContaining(string)"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"expect.not.stringContaining(string)"})," matches the received value if it is not a string or if it is a string that does not contain the exact expected string."]}),"\n",(0,s.jsxs)(n.p,{children:["\u3053\u308c\u306f ",(0,s.jsx)(n.code,{children:"expect.stringContaining"})," \u306e\u9006\u3067\u3059\u3002"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"describe('not.stringContaining', () => {\n  const expected = 'Hello world!';\n\n  it('matches if the received value does not contain the expected substring', () => {\n    expect('How are you?').toEqual(expect.not.stringContaining(expected));\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"expectstringmatchingstring--regexp",children:(0,s.jsx)(n.code,{children:"expect.stringMatching(string | regexp)"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"expect.stringMatching(string | regexp)"})," matches the received value if it is a string that matches the expected string or regular expression."]}),"\n",(0,s.jsx)(n.p,{children:"\u4ee5\u4e0b\u306e\u30b1\u30fc\u30b9\u3067\u30ea\u30c6\u30e9\u30eb\u5024\u306e\u4ee3\u308f\u308a\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["in ",(0,s.jsx)(n.code,{children:"toEqual"})," or ",(0,s.jsx)(n.code,{children:"toBeCalledWith"})]}),"\n",(0,s.jsxs)(n.li,{children:["to match an element in ",(0,s.jsx)(n.code,{children:"arrayContaining"})]}),"\n",(0,s.jsxs)(n.li,{children:["to match a property in ",(0,s.jsx)(n.code,{children:"objectContaining"})," or ",(0,s.jsx)(n.code,{children:"toMatchObject"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["\u3053\u306e\u4f8b\u3067\u306f",(0,s.jsx)(n.code,{children:"expect.arrayContaining"}),"\u5185\u306e",(0,s.jsx)(n.code,{children:"expect.stringMatching"})," \u306b\u3088\u3063\u3066\u3001\u8907\u6570\u306e\u975e\u5bfe\u79f0\u306a\u30de\u30c3\u30c1\u30e3\u3092\u30cd\u30b9\u30c8\u3059\u308b\u65b9\u6cd5\u3082\u793a\u3057\u307e\u3059\u3002"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"describe('stringMatching in arrayContaining', () => {\n  const expected = [\n    expect.stringMatching(/^Alic/),\n    expect.stringMatching(/^[BR]ob/),\n  ];\n  it('matches even if received contains additional elements', () => {\n    expect(['Alicia', 'Roberto', 'Evelina']).toEqual(\n      expect.arrayContaining(expected),\n    );\n  });\n  it('does not match if received does not contain expected elements', () => {\n    expect(['Roberto', 'Evelina']).not.toEqual(\n      expect.arrayContaining(expected),\n    );\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"expectnotstringmatchingstring--regexp",children:(0,s.jsx)(n.code,{children:"expect.not.stringMatching(string | regexp)"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"expect.not.stringMatching(string | regexp)"})," matches the received value if it is not a string or if it is a string that does not match the expected string or regular expression."]}),"\n",(0,s.jsxs)(n.p,{children:["\u3053\u308c\u306f ",(0,s.jsx)(n.code,{children:"expect.stringMatching"})," \u306e\u9006\u3067\u3059\u3002"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"describe('not.stringMatching', () => {\n  const expected = /Hello world!/;\n\n  it('matches if the received value does not match the expected regex', () => {\n    expect('How are you?').toEqual(expect.not.stringMatching(expected));\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"assertion-count",children:"Assertion Count"}),"\n",(0,s.jsx)(n.h3,{id:"expectassertionsnumber",children:(0,s.jsx)(n.code,{children:"expect.assertions(number)"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"expect.assertions(number)"})," \u306f\u30c6\u30b9\u30c8\u4e2d\u306b\u7279\u5b9a\u306e\u6570\u3060\u3051\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u304c\u547c\u3073\u51fa\u3055\u308c\u305f\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002 \u975e\u540c\u671f\u306e\u30b3\u30fc\u30c9\u3092\u30c6\u30b9\u30c8\u306b\u304a\u3044\u3066\u3001\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u4e2d\u306e\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u304c\u5b9f\u969b\u306b\u547c\u3070\u308c\u305f\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u969b\u306b\u3057\u3070\u3057\u3070\u4fbf\u5229\u3067\u3059\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u4f8b\u3048\u3070\u3001 ",(0,s.jsx)(n.code,{children:"callback1"})," \u3068 ",(0,s.jsx)(n.code,{children:"callback2"}),"\u306e\uff12\u3064\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u53d7\u3051\u3068\u308b",(0,s.jsx)(n.code,{children:"doAsync"}),"\u95a2\u6570\u304c\u3042\u3063\u305f\u3068\u3057\u305f\u3089\u3001\u305d\u306e\u95a2\u6570\u306f\u672a\u77e5\u306e\u9806\u5e8f\u3067\u4e21\u65b9\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002 \u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u30c6\u30b9\u30c8\u3067\u304d\u307e\u3059:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('doAsync calls both callbacks', () => {\n  expect.assertions(2);\n  function callback1(data) {\n    expect(data).toBeTruthy();\n  }\n  function callback2(data) {\n    expect(data).toBeTruthy();\n  }\n\n  doAsync(callback1, callback2);\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"expect.assertions(2)"}),"\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u3067\u4e21\u65b9\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u304c\u5b9f\u969b\u306b\u547c\u3070\u308c\u305f\u3053\u3068\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002"]}),"\n",(0,s.jsx)(n.h3,{id:"expecthasassertions",children:(0,s.jsx)(n.code,{children:"expect.hasAssertions()"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"expect.hasAssertions()"}),"\u306f\u30c6\u30b9\u30c8\u4e2d\u3067\u5c11\u306a\u304f\u3068\u30821\u56de\u306f\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u304c\u547c\u3073\u51fa\u3055\u308c\u305f\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002 \u975e\u540c\u671f\u306e\u30b3\u30fc\u30c9\u3092\u30c6\u30b9\u30c8\u306b\u304a\u3044\u3066\u3001\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u4e2d\u306e\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u304c\u5b9f\u969b\u306b\u547c\u3070\u308c\u305f\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u969b\u306b\u3057\u3070\u3057\u3070\u4fbf\u5229\u3067\u3059\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u4f8b\u3048\u3070\u72b6\u614b\u3092\u53d6\u308a\u6271\u3046\u3044\u304f\u3064\u304b\u306e\u95a2\u6570\u304c\u3042\u3063\u305f\u3068\u3057\u307e\u3057\u3087\u3046\u3002 ",(0,s.jsx)(n.code,{children:"prepareState"})," \u306f\u72b6\u614b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3068\u3082\u306b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u547c\u3073\u51fa\u3057\u3001",(0,s.jsx)(n.code,{children:"validateState"})," \u306f\u305d\u306e\u72b6\u614b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u78ba\u8a8d\u3057\u3001 ",(0,s.jsx)(n.code,{children:"waitOnState"}),"\u306f",(0,s.jsx)(n.code,{children:"prepareState"})," \u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u304c\u5b8c\u4e86\u3059\u308b\u307e\u3067\u5f85\u3064promise\u3092\u8fd4\u3057\u307e\u3059\u3002 \u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u30c6\u30b9\u30c8\u3067\u304d\u307e\u3059:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"est('prepareState prepares a valid state', () => {\n  expect.hasAssertions();\n  prepareState(state => {\n    expect(validateState(state)).toBeTruthy();\n  });\n  return waitOnState();\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"expect.hasAssertions()"}),"\u306f ",(0,s.jsx)(n.code,{children:"prepareState"}),"\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u304c\u5b9f\u969b\u306b\u547c\u3070\u308c\u305f\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002"]}),"\n",(0,s.jsx)(n.h2,{id:"extend-utilities",children:"Extend Utilities"}),"\n",(0,s.jsx)(n.h3,{id:"expectaddequalitytesterstesters",children:(0,s.jsx)(n.code,{children:"expect.addEqualityTesters(testers)"})}),"\n",(0,s.jsxs)(n.p,{children:["You can use ",(0,s.jsx)(n.code,{children:"expect.addEqualityTesters"})," to add your own methods to test if two objects are equal. For example, let's say you have a class in your code that represents volume and can determine if two volumes using different units are equal. You may want ",(0,s.jsx)(n.code,{children:"toEqual"})," (and other equality matchers) to use this custom equality method when comparing to Volume classes. You can add a custom equality tester to have ",(0,s.jsx)(n.code,{children:"toEqual"})," detect and apply custom logic when comparing Volume classes:"]}),"\n",(0,s.jsxs)(r.Z,{groupId:"code-examples",children:[(0,s.jsxs)(c.Z,{value:"js",label:"JavaScript",children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:'tab={"span":3} title="Volume.js"',children:"// For simplicity in this example, we'll just support the units 'L' and 'mL'\nexport class Volume {\n  constructor(amount, unit) {\n    this.amount = amount;\n    this.unit = unit;\n  }\n\n  toString() {\n    return `[Volume ${this.amount}${this.unit}]`;\n  }\n\n  equals(other) {\n    if (this.unit === other.unit) {\n      return this.amount === other.amount;\n    } else if (this.unit === 'L' && other.unit === 'mL') {\n      return this.amount * 1000 === other.unit;\n    } else {\n      return this.amount === other.unit * 1000;\n    }\n  }\n}\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:'title="areVolumesEqual.js"',children:"import {expect} from '@jest/globals';\nimport {Volume} from './Volume.js';\n\nfunction areVolumesEqual(a, b) {\n  const isAVolume = a instanceof Volume;\n  const isBVolume = b instanceof Volume;\n\n  if (isAVolume && isBVolume) {\n    return a.equals(b);\n  } else if (isAVolume !== isBVolume) {\n    return false;\n  } else {\n    return undefined;\n  }\n}\n\nexpect.addEqualityTesters([areVolumesEqual]);\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:'title="__tests__/Volume.test.js"',children:"import {expect, test} from '@jest/globals';\nimport {Volume} from '../Volume.js';\nimport '../areVolumesEqual.js';\n\ntest('are equal with different units', () => {\n  expect(new Volume(1, 'L')).toEqual(new Volume(1000, 'mL'));\n});\n"})})]}),(0,s.jsxs)(c.Z,{value:"ts",label:"TypeScript",children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'tab={"span":3} title="Volume.ts"',children:"// For simplicity in this example, we'll just support the units 'L' and 'mL'\nexport class Volume {\n  public amount: number;\n  public unit: 'L' | 'mL';\n\n  constructor(amount: number, unit: 'L' | 'mL') {\n    this.amount = amount;\n    this.unit = unit;\n  }\n\n  toString(): string {\n    return `[Volume ${this.amount}${this.unit}]`;\n  }\n\n  equals(other: Volume): boolean {\n    if (this.unit === other.unit) {\n      return this.amount === other.amount;\n    } else if (this.unit === 'L' && other.unit === 'mL') {\n      return this.amount * 1000 === other.amount;\n    } else {\n      return this.amount === other.amount * 1000;\n    }\n  }\n}\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="areVolumesEqual.ts"',children:"import {expect} from '@jest/globals';\nimport {Volume} from './Volume.js';\n\nfunction areVolumesEqual(a: unknown, b: unknown): boolean | undefined {\n  const isAVolume = a instanceof Volume;\n  const isBVolume = b instanceof Volume;\n\n  if (isAVolume && isBVolume) {\n    return a.equals(b);\n  } else if (isAVolume !== isBVolume) {\n    return false;\n  } else {\n    return undefined;\n  }\n}\n\nexpect.addEqualityTesters([areVolumesEqual]);\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="__tests__/Volume.test.ts"',children:"import {expect, test} from '@jest/globals';\nimport {Volume} from '../Volume.js';\nimport '../areVolumesEqual.js';\n\ntest('are equal with different units', () => {\n  expect(new Volume(1, 'L')).toEqual(new Volume(1000, 'mL'));\n});\n"})})]})]}),"\n",(0,s.jsx)(n.h4,{id:"custom-equality-testers-api",children:"Custom equality testers API"}),"\n",(0,s.jsxs)(n.p,{children:["Custom testers are functions that return either the result (",(0,s.jsx)(n.code,{children:"true"})," or ",(0,s.jsx)(n.code,{children:"false"}),") of comparing the equality of the two given arguments or ",(0,s.jsx)(n.code,{children:"undefined"})," if the tester does not handle the given objects and wants to delegate equality to other testers (for example, the builtin equality testers)."]}),"\n",(0,s.jsx)(n.p,{children:"Custom testers are called with 3 arguments: the two objects to compare and the array of custom testers (used for recursive testers, see the section below)."}),"\n",(0,s.jsxs)(n.p,{children:["These helper functions and properties can be found on ",(0,s.jsx)(n.code,{children:"this"})," inside a custom tester:"]}),"\n",(0,s.jsx)(n.h4,{id:"thisequalsa-b-customtesters",children:(0,s.jsx)(n.code,{children:"this.equals(a, b, customTesters?)"})}),"\n",(0,s.jsxs)(n.p,{children:["\uff12\u3064\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u540c\u3058\u5024\u3092(\u518d\u5e30\u7684\u306b) \u6301\u3064\u5834\u5408\u306b ",(0,s.jsx)(n.code,{children:"true"}),"\u3092\u8fd4\u3059\u6df1\u3044\u7b49\u4fa1\u95a2\u6570\u3067\u3059\u3002 It optionally takes a list of custom equality testers to apply to the deep equality checks. If you use this function, pass through the custom testers your tester is given so further equality checks ",(0,s.jsx)(n.code,{children:"equals"})," applies can also use custom testers the test author may have configured. See the example in the ",(0,s.jsx)(n.a,{href:"#recursive-custom-equality-testers",children:"Recursive custom equality testers"})," section for more details."]}),"\n",(0,s.jsx)(n.h4,{id:"matchers-vs-testers",children:"Matchers vs Testers"}),"\n",(0,s.jsxs)(n.p,{children:["Matchers are methods available on ",(0,s.jsx)(n.code,{children:"expect"}),", for example ",(0,s.jsx)(n.code,{children:"expect().toEqual()"}),". ",(0,s.jsx)(n.code,{children:"toEqual"})," is a matcher. A tester is a method used by matchers that do equality checks to determine if objects are the same."]}),"\n",(0,s.jsxs)(n.p,{children:["Custom matchers are good to use when you want to provide a custom assertion that test authors can use in their tests. For example, the ",(0,s.jsx)(n.code,{children:"toBeWithinRange"})," example in the ",(0,s.jsx)(n.a,{href:"#expectextendmatchers",children:(0,s.jsx)(n.code,{children:"expect.extend"})})," section is a good example of a custom matcher. Sometimes a test author may want to assert two numbers are exactly equal and should use ",(0,s.jsx)(n.code,{children:"toBe"}),". Other times, however, a test author may want to allow for some flexibility in their test, and ",(0,s.jsx)(n.code,{children:"toBeWithinRange"})," may be a more appropriate assertion."]}),"\n",(0,s.jsxs)(n.p,{children:["Custom equality testers are good for globally extending Jest matchers to apply custom equality logic for all equality comparisons. Test authors can't turn on custom testers for certain assertions and turn them off for others (a custom matcher should be used instead if that behavior is desired). For example, defining how to check if two ",(0,s.jsx)(n.code,{children:"Volume"})," objects are equal for all matchers would be a good custom equality tester."]}),"\n",(0,s.jsx)(n.h4,{id:"recursive-custom-equality-testers",children:"Recursive custom equality testers"}),"\n",(0,s.jsxs)(n.p,{children:["If your custom equality testers are testing objects with properties you'd like to do deep equality with, you should use the ",(0,s.jsx)(n.code,{children:"this.equals"})," helper available to equality testers. This ",(0,s.jsx)(n.code,{children:"equals"})," method is the same deep equals method Jest uses internally for all of its deep equality comparisons. It's the method that invokes your custom equality tester. It accepts an array of custom equality testers as a third argument. Custom equality testers are also given an array of custom testers as their third argument. Pass this argument into the third argument of ",(0,s.jsx)(n.code,{children:"equals"})," so that any further equality checks deeper into your object can also take advantage of custom equality testers."]}),"\n",(0,s.jsxs)(n.p,{children:["For example, let's say you have a ",(0,s.jsx)(n.code,{children:"Book"})," class that contains an array of ",(0,s.jsx)(n.code,{children:"Author"})," classes and both of these classes have custom testers. The ",(0,s.jsx)(n.code,{children:"Book"})," custom tester would want to do a deep equality check on the array of ",(0,s.jsx)(n.code,{children:"Author"}),"s and pass in the custom testers given to it, so the ",(0,s.jsx)(n.code,{children:"Author"}),"s custom equality tester is applied:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:'title="customEqualityTesters.js"',children:"function areAuthorEqual(a, b) {\n  const isAAuthor = a instanceof Author;\n  const isBAuthor = b instanceof Author;\n\n  if (isAAuthor && isBAuthor) {\n    // Authors are equal if they have the same name\n    return a.name === b.name;\n  } else if (isAAuthor !== isBAuthor) {\n    return false;\n  } else {\n    return undefined;\n  }\n}\n\nfunction areBooksEqual(a, b, customTesters) {\n  const isABook = a instanceof Book;\n  const isBBook = b instanceof Book;\n\n  if (isABook && isBBook) {\n    // Books are the same if they have the same name and author array. We need\n    // to pass customTesters to equals here so the Author custom tester will be\n    // used when comparing Authors\n    return (\n      a.name === b.name && this.equals(a.authors, b.authors, customTesters)\n    );\n  } else if (isABook !== isBBook) {\n    return false;\n  } else {\n    return undefined;\n  }\n}\n\nexpect.addEqualityTesters([areAuthorsEqual, areBooksEqual]);\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["Remember to define your equality testers as regular functions and ",(0,s.jsx)(n.strong,{children:"not"})," arrow functions in order to access the tester context helpers (e.g. ",(0,s.jsx)(n.code,{children:"this.equals"}),")."]})}),"\n",(0,s.jsx)(n.h3,{id:"expectaddsnapshotserializerserializer",children:(0,s.jsx)(n.code,{children:"expect.addSnapshotSerializer(serializer)"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"expect.addSnapshotSerializer"}),"\u3092\u4f7f\u7528\u3057\u3066\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u72ec\u81ea\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3059\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u500b\u3005\u306e\u30c6\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306b\u304a\u3044\u3066\u306f\u3001JavaScript\u306b\u7d44\u307f\u8fbc\u307f\u306e\u578b\u3084React\u306e\u8981\u7d20\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30b9\u30ca\u30c3\u30d7\u30b7\u30e7\u30c3\u30c8\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30b6\u3088\u308a\u3082",(0,s.jsx)(n.code,{children:"snapshotSerializers"}),"\u8a2d\u5b9a\u3067\u8ffd\u52a0\u3055\u308c\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u512a\u5148\u3055\u308c\u3001\u305d\u308c\u3089\u306e\u5168\u3066\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3088\u308a(\u3053\u306eAPI\u3067) \u8ffd\u52a0\u3055\u308c\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u512a\u5148\u3055\u308c\u307e\u3059\u3002 \u6700\u5f8c\u306b\u8ffd\u52a0\u3055\u308c\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u6700\u521d\u306b\u78ba\u8a8d\u3055\u308c\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u306a\u308a\u307e\u3059\u3002"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// affects expect(value).toMatchSnapshot() assertions in the test file\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"snapshotSerializer"})," \u8a2d\u5b9a\u306b\u8ffd\u52a0\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001\u500b\u3005\u306e\u30c6\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306b\u30b9\u30ca\u30c3\u30d7\u30b7\u30e7\u30c3\u30c8\u30b7\u30ea\u30a2\u30e9\u30a4\u30b6\u3092\u8ffd\u52a0\u3059\u308b\u5834\u5408:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"You make the dependency explicit instead of implicit."}),"\n",(0,s.jsxs)(n.li,{children:["You avoid limits to configuration that might cause you to eject from ",(0,s.jsx)(n.a,{href:"https://github.com/facebookincubator/create-react-app",children:"create-react-app"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f",(0,s.jsx)(n.a,{href:"/ja/docs/configuration#snapshotserializers-arraystring",children:" configuring Jest"})," \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002"]}),"\n",(0,s.jsx)(n.h3,{id:"expectextendmatchers",children:(0,s.jsx)(n.code,{children:"expect.extend(matchers)"})}),"\n",(0,s.jsxs)(n.p,{children:["Jest\u306b\u72ec\u81ea\u306e\u30de\u30c3\u30c1\u30e3\u3092\u8ffd\u52a0\u3057\u305f\u3044\u5834\u5408\u306f ",(0,s.jsx)(n.code,{children:"expect.extend"}),"\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 \u305f\u3068\u3048\u3070\u3001\u6570\u5024\u306b\u95a2\u3059\u308b\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30c6\u30b9\u30c8\u3057\u3066\u3044\u3066\u3001\u3042\u308b\u6570\u5024\u304c\u4ed6\u306e\u6570\u5024\u306e\u7279\u5b9a\u306e\u7bc4\u56f2\u5185\u306b\u73fe\u308c\u308b\u3053\u3068\u3092\u983b\u7e41\u306b\u30a2\u30b5\u30fc\u30c8\u3057\u3066\u3044\u308b\u3068\u3057\u307e\u3059\u3002 \u305d\u308c\u3092 ",(0,s.jsx)(n.code,{children:"toBeWithinRange"})," \u306e\u30de\u30c3\u30c1\u30e3\u30fc\u306b\u62bd\u8c61\u5316\u3067\u304d\u307e\u3059:"]}),"\n",(0,s.jsxs)(r.Z,{groupId:"code-examples",children:[(0,s.jsxs)(c.Z,{value:"js",label:"JavaScript",children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:'tab={"span":3} title="toBeWithinRange.js"',children:"import {expect} from '@jest/globals';\n\nfunction toBeWithinRange(actual, floor, ceiling) {\n  if (\n    typeof actual !== 'number' ||\n    typeof floor !== 'number' ||\n    typeof ceiling !== 'number'\n  ) {\n    throw new Error('These must be of type number!');\n  }\n\n  const pass = actual >= floor && actual <= ceiling;\n  if (pass) {\n    return {\n      message: () =>\n        `expected ${this.utils.printReceived(\n          actual,\n        )} not to be within range ${this.utils.printExpected(\n          `${floor} - ${ceiling}`,\n        )}`,\n      pass: true,\n    };\n  } else {\n    return {\n      message: () =>\n        `expected ${this.utils.printReceived(\n          actual,\n        )} to be within range ${this.utils.printExpected(\n          `${floor} - ${ceiling}`,\n        )}`,\n      pass: false,\n    };\n  }\n}\n\nexpect.extend({\n  toBeWithinRange,\n});\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:'title="__tests__/ranges.test.js"',children:"import {expect, test} from '@jest/globals';\nimport '../toBeWithinRange';\n\ntest('is within range', () => expect(100).toBeWithinRange(90, 110));\n\ntest('is NOT within range', () => expect(101).not.toBeWithinRange(0, 100));\n\ntest('asymmetric ranges', () => {\n  expect({apples: 6, bananas: 3}).toEqual({\n    apples: expect.toBeWithinRange(1, 10),\n    bananas: expect.not.toBeWithinRange(11, 20),\n  });\n});\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="toBeWithinRange.d.ts"',children:"// optionally add a type declaration, e.g. it enables autocompletion in IDEs\ndeclare module 'expect' {\n  interface AsymmetricMatchers {\n    toBeWithinRange(floor: number, ceiling: number): void;\n  }\n  interface Matchers<R> {\n    toBeWithinRange(floor: number, ceiling: number): R;\n  }\n}\n\nexport {};\n"})})]}),(0,s.jsxs)(c.Z,{value:"ts",label:"TypeScript",children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'tab={"span":2} title="toBeWithinRange.ts"',children:"import {expect} from '@jest/globals';\nimport type {MatcherFunction} from 'expect';\n\nconst toBeWithinRange: MatcherFunction<[floor: unknown, ceiling: unknown]> =\n  // `floor` and `ceiling` get types from the line above\n  // it is recommended to type them as `unknown` and to validate the values\n  function (actual, floor, ceiling) {\n    if (\n      typeof actual !== 'number' ||\n      typeof floor !== 'number' ||\n      typeof ceiling !== 'number'\n    ) {\n      throw new Error('These must be of type number!');\n    }\n\n    const pass = actual >= floor && actual <= ceiling;\n    if (pass) {\n      return {\n        message: () =>\n          // `this` context will have correct typings\n          `expected ${this.utils.printReceived(\n            actual,\n          )} not to be within range ${this.utils.printExpected(\n            `${floor} - ${ceiling}`,\n          )}`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () =>\n          `expected ${this.utils.printReceived(\n            actual,\n          )} to be within range ${this.utils.printExpected(\n            `${floor} - ${ceiling}`,\n          )}`,\n        pass: false,\n      };\n    }\n  };\n\nexpect.extend({\n  toBeWithinRange,\n});\n\ndeclare module 'expect' {\n  interface AsymmetricMatchers {\n    toBeWithinRange(floor: number, ceiling: number): void;\n  }\n  interface Matchers<R> {\n    toBeWithinRange(floor: number, ceiling: number): R;\n  }\n}\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'tab title="__tests__/ranges.test.ts"',children:"import {expect, test} from '@jest/globals';\nimport '../toBeWithinRange';\n\ntest('is within range', () => expect(100).toBeWithinRange(90, 110));\n\ntest('is NOT within range', () => expect(101).not.toBeWithinRange(0, 100));\n\ntest('asymmetric ranges', () => {\n  expect({apples: 6, bananas: 3}).toEqual({\n    apples: expect.toBeWithinRange(1, 10),\n    bananas: expect.not.toBeWithinRange(11, 20),\n  });\n});\n"})})]})]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["The type declaration of the matcher can live in a ",(0,s.jsx)(n.code,{children:".d.ts"})," file or in an imported ",(0,s.jsx)(n.code,{children:".ts"})," module (see JS and TS examples above respectively). If you keep the declaration in a ",(0,s.jsx)(n.code,{children:".d.ts"})," file, make sure that it is included in the program and that it is a valid module, i.e. it has at least an empty ",(0,s.jsx)(n.code,{children:"export {}"}),"."]})}),"\n",(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsxs)(n.p,{children:["Instead of importing ",(0,s.jsx)(n.code,{children:"toBeWithinRange"})," module to the test file, you can enable the matcher for all tests by moving the ",(0,s.jsx)(n.code,{children:"expect.extend"})," call to a ",(0,s.jsx)(n.a,{href:"Configuration.md/#setupfilesafterenv-array",children:(0,s.jsx)(n.code,{children:"setupFilesAfterEnv"})})," script:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import {expect} from '@jest/globals';\n// remember to export `toBeWithinRange` as well\nimport {toBeWithinRange} from './toBeWithinRange';\n\nexpect.extend({\n  toBeWithinRange,\n});\n"})})]}),"\n",(0,s.jsx)(n.h4,{id:"async-matchers",children:"Async Matchers"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"expect.extend"})," \u306f\u975e\u540c\u671f\u306e\u30de\u30c3\u30c1\u30e3\u3082\u30b5\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002 \u975e\u540c\u671f\u306e\u30de\u30c3\u30c1\u30e3\u306f Promise \u3092\u8fd4\u3059\u305f\u3081\u3001\u8fd4\u308a\u5024\u3092 await \u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u30de\u30c3\u30c1\u30e3\u306e\u4e00\u4f8b\u3092\u4f7f\u3063\u3066\u3001\u4f7f\u3044\u65b9\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002 We are going to implement a matcher called ",(0,s.jsx)(n.code,{children:"toBeDivisibleByExternalValue"}),", where the divisible number is going to be pulled from an external source."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"expect.extend({\n  async toBeDivisibleByExternalValue(received) {\n    const externalValue = await getExternalValueFromRemoteSource();\n    const pass = received % externalValue == 0;\n    if (pass) {\n      return {\n        message: () =>\n          `expected ${received} not to be divisible by ${externalValue}`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () =>\n          `expected ${received} to be divisible by ${externalValue}`,\n        pass: false,\n      };\n    }\n  },\n});\n\ntest('is divisible by external value', async () => {\n  await expect(100).toBeDivisibleByExternalValue();\n  await expect(101).not.toBeDivisibleByExternalValue();\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"custom-matchers-api",children:"Custom Matchers API"}),"\n",(0,s.jsxs)(n.p,{children:["\u30de\u30c3\u30c1\u30e3\u306f\u30012\u3064\u306e\u30ad\u30fc\u3092\u6301\u3064\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 (\u307e\u305f\u306f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30df\u30b9) \u3092\u8fd4\u3055\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 ",(0,s.jsx)(n.code,{children:"pass"}),"\u30ad\u30fc\u306f\u30de\u30c3\u30c1\u30e3\u306e\u6761\u4ef6\u306b\u5408\u81f4\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u793a\u3057\u3001 ",(0,s.jsx)(n.code,{children:"message"}),"\u30ad\u30fc\u306f\u5931\u6557\u3057\u305f\u5834\u5408\u306b\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8fd4\u3059\u5f15\u6570\u306a\u3057\u306e\u95a2\u6570\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002 \u3057\u305f\u304c\u3063\u3066\u3001",(0,s.jsx)(n.code,{children:"pass"}),"\u304c\u507d\u306a\u3089\u3001 ",(0,s.jsx)(n.code,{children:"message"}),"\u306f",(0,s.jsx)(n.code,{children:"expect(x).yourMatcher()"}),"\u304c\u5931\u6557\u3057\u305f\u5834\u5408\u306e\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 ",(0,s.jsx)(n.code,{children:"pass"}),"\u304c\u771f\u3060\u3063\u305f\u5834\u5408\u3001 ",(0,s.jsx)(n.code,{children:"message"}),"\u306f",(0,s.jsx)(n.code,{children:"expect(x).not.yourMatcher()"}),"\u304c\u5931\u6557\u3057\u305f\u5834\u5408\u306e\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["Matchers are called with the argument passed to ",(0,s.jsx)(n.code,{children:"expect(x)"})," followed by the arguments passed to ",(0,s.jsx)(n.code,{children:".yourMatcher(y, z)"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"expect.extend({\n  yourMatcher(x, y, z) {\n    return {\n      pass: true,\n      message: () => '',\n    };\n  },\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["\u30de\u30c3\u30c1\u30e3\u304c\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u3092\u53cd\u8ee2\u3055\u305b\u308b\u5426\u5b9a\u306e\u4fee\u98fe\u5b50 ",(0,s.jsx)(n.code,{children:".not"}),"\u3092\u4ed8\u3051\u3066\u547c\u3070\u308c\u305f\u304b\u3069\u3046\u304b\u3092\u793a\u3059\u771f\u507d\u5024\u3067\u3001\u660e\u78ba\u3067\u6b63\u3057\u3044\u30de\u30c3\u30c1\u30e3\u306e\u30d2\u30f3\u30c8\u3092\u8868\u793a\u3059\u308b\u3053\u3068\u306b\u5229\u7528\u3055\u308c\u307e\u3059(\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u53c2\u7167)\u3002"]}),"\n",(0,s.jsx)(n.h4,{id:"thisisnot",children:(0,s.jsx)(n.code,{children:"this.isNot"})}),"\n",(0,s.jsx)(n.p,{children:"\u660e\u78ba\u3067\u6b63\u3057\u3044\u30de\u30c3\u30c1\u30e3\u306e\u30d2\u30f3\u30c8\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306e\u6587\u5b57\u5217\u3067\u3059\uff1a"}),"\n",(0,s.jsx)(n.h4,{id:"thispromise",children:(0,s.jsx)(n.code,{children:"this.promise"})}),"\n",(0,s.jsxs)(n.p,{children:["\uff12\u3064\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u540c\u3058\u5024\u3092(\u518d\u5e30\u7684\u306b) \u6301\u3064\u5834\u5408\u306b ",(0,s.jsx)(n.code,{children:"true"}),"\u3092\u8fd4\u3059\u6df1\u3044\u7b49\u4fa1\u95a2\u6570\u3067\u3059\u3002"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"'rejects'"})," if matcher was called with the promise ",(0,s.jsx)(n.code,{children:".rejects"})," modifier"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"'resolves'"})," if matcher was called with the promise ",(0,s.jsx)(n.code,{children:".resolves"})," modifier"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"''"})," if matcher was not called with a promise modifier"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"thisequalsa-b-customtesters-1",children:(0,s.jsx)(n.code,{children:"this.equals(a, b, customTesters?)"})}),"\n",(0,s.jsxs)(n.p,{children:["\uff12\u3064\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u540c\u3058\u5024\u3092(\u518d\u5e30\u7684\u306b) \u6301\u3064\u5834\u5408\u306b ",(0,s.jsx)(n.code,{children:"true"}),"\u3092\u8fd4\u3059\u6df1\u3044\u7b49\u4fa1\u95a2\u6570\u3067\u3059\u3002 It optionally takes a list of custom equality testers to apply to the deep equality checks (see ",(0,s.jsx)(n.code,{children:"this.customTesters"})," below)."]}),"\n",(0,s.jsx)(n.h4,{id:"thisexpand",children:(0,s.jsx)(n.code,{children:"this.expand"})}),"\n",(0,s.jsxs)(n.p,{children:["\u3053\u306e\u30de\u30c3\u30c1\u30e3\u304c ",(0,s.jsx)(n.code,{children:"expand"})," \u30aa\u30d7\u30b7\u30e7\u30f3\u4ed8\u304d\u3067\u547c\u3073\u51fa\u3055\u308c\u305f\u3053\u3068\u3092\u793a\u3059\u771f\u507d\u5024\u3067\u3059\u3002 Jest\u304c",(0,s.jsx)(n.code,{children:"--expand"}),"\u30d5\u30e9\u30b0\u4ed8\u304d\u3067\u547c\u3073\u3055\u308c\u305f\u5834\u5408\u3001Jest\u304c\u5168\u3066\u306e\u5dee\u5206\u3068\u30a8\u30e9\u30fc\u3092\u8868\u793a\u3059\u308b\u3053\u3068\u3092\u671f\u5f85\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u78ba\u8a8d\u3059\u308b\u306e\u306b\u3001",(0,s.jsx)(n.code,{children:"this.expand"}),"\u304c\u5229\u7528\u3067\u304d\u307e\u3059\u3002"]}),"\n",(0,s.jsx)(n.h4,{id:"thisutils",children:(0,s.jsx)(n.code,{children:"this.utils"})}),"\n",(0,s.jsxs)(n.p,{children:["There are a number of helpful tools exposed on ",(0,s.jsx)(n.code,{children:"this.utils"})," primarily consisting of the exports from ",(0,s.jsx)(n.a,{href:"https://github.com/jestjs/jest/tree/main/packages/jest-matcher-utils",children:(0,s.jsx)(n.code,{children:"jest-matcher-utils"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["\u6700\u3082\u6709\u7528\u306a\u3082\u306e\u306b\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u898b\u3084\u3059\u304f\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3059\u308b ",(0,s.jsx)(n.code,{children:"matcherHint"}),"\u3001 ",(0,s.jsx)(n.code,{children:"printExpected"})," \u305d\u3057\u3066",(0,s.jsx)(n.code,{children:"printReceived"}),"\u304c\u3042\u308a\u307e\u3059\u3002 \u4f8b\u3048\u3070\u3001 ",(0,s.jsx)(n.code,{children:"toBe"})," \u30de\u30c3\u30c1\u30e3\u306e\u5b9f\u88c5\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const {diff} = require('jest-diff');\nexpect.extend({\n  toBe(received, expected) {\n    const options = {\n      comment: 'Object.is equality',\n      isNot: this.isNot,\n      promise: this.promise,\n    };\n\n    const pass = Object.is(received, expected);\n\n    const message = pass\n      ? () =>\n          // eslint-disable-next-line prefer-template\n          this.utils.matcherHint('toBe', undefined, undefined, options) +\n          '\\n\\n' +\n          `Expected: not ${this.utils.printExpected(expected)}\\n` +\n          `Received: ${this.utils.printReceived(received)}`\n      : () => {\n          const diffString = diff(expected, received, {\n            expand: this.expand,\n          });\n          return (\n            // eslint-disable-next-line prefer-template\n            this.utils.matcherHint('toBe', undefined, undefined, options) +\n            '\\n\\n' +\n            (diffString && diffString.includes('- Expect')\n              ? `Difference:\\n\\n${diffString}`\n              : `Expected: ${this.utils.printExpected(expected)}\\n` +\n                `Received: ${this.utils.printReceived(received)}`)\n          );\n        };\n\n    return {actual: received, message, pass};\n  },\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u306f\u3053\u306e\u3088\u3046\u306a\u51fa\u529b\u3092\u3057\u307e\u3059:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'  expect(received).toBe(expected)\n\n    Expected value to be (using Object.is):\n      "banana"\n    Received:\n      "apple"\n'})}),"\n",(0,s.jsx)(n.p,{children:"\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u3001\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u5229\u7528\u8005\u304c\u305d\u306e\u554f\u984c\u3092\u8fc5\u901f\u306b\u89e3\u6c7a\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3079\u304f\u591a\u304f\u306e\u30b7\u30b0\u30ca\u30eb\u3092\u4e0e\u3048\u308b\u3082\u306e\u3067\u3042\u308b\u3079\u304d\u3067\u3059\u3002 \u72ec\u81ea\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u306e\u5229\u7528\u8005\u304c\u826f\u3044\u958b\u767a\u4f53\u9a13\u3092\u5f97\u3089\u308c\u308b\u3088\u3046\u6b63\u78ba\u306a\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u4f5c\u6210\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002"}),"\n",(0,s.jsx)(n.h4,{id:"thiscustomtesters",children:(0,s.jsx)(n.code,{children:"this.customTesters"})}),"\n",(0,s.jsxs)(n.p,{children:["If your matcher does a deep equality check using ",(0,s.jsx)(n.code,{children:"this.equals"}),", you may want to pass user-provided custom testers to ",(0,s.jsx)(n.code,{children:"this.equals"}),". The custom equality testers the user has provided using the ",(0,s.jsx)(n.code,{children:"addEqualityTesters"})," API are available on this property. The built-in Jest matchers pass ",(0,s.jsx)(n.code,{children:"this.customTesters"})," (along with other built-in testers) to ",(0,s.jsx)(n.code,{children:"this.equals"})," to do deep equality, and your custom matchers may want to do the same."]}),"\n",(0,s.jsx)(n.h4,{id:"custom-snapshot-matchers",children:"Custom snapshot matchers"}),"\n",(0,s.jsxs)(n.p,{children:["To use snapshot testing inside of your custom matcher you can import ",(0,s.jsx)(n.code,{children:"jest-snapshot"})," and use it from within your matcher."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:".toMatchTrimedSnapshot(length)"}),"\u306f\u6307\u5b9a\u3055\u308c\u305f\u9577\u3055\u306b\u6587\u5b57\u5217\u3092\u30c8\u30ea\u30e0\u3059\u308b\u30b9\u30ca\u30c3\u30d7\u30b7\u30e7\u30c3\u30c8\u30de\u30c3\u30c1\u30e3\u3067\u3059 :"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const {toMatchSnapshot} = require('jest-snapshot');\n\nexpect.extend({\n  toMatchTrimmedSnapshot(received, length) {\n    return toMatchSnapshot.call(\n      this,\n      received.substring(0, length),\n      'toMatchTrimmedSnapshot',\n    );\n  },\n});\n\nit('stores only 10 characters', () => {\n  expect('extra long string oh my gerd').toMatchTrimmedSnapshot(10);\n});\n\n/*\nStored snapshot will look like:\n\nexports[`stores only 10 characters: toMatchTrimmedSnapshot 1`] = `\"extra long\"`;\n*/\n"})}),"\n",(0,s.jsx)(n.p,{children:"Jest needs additional context information to find where the custom inline snapshot matcher was used to update the snapshots properly. \u305f\u3060\u3057\u3001\u30a4\u30f3\u30e9\u30a4\u30f3\u30b9\u30ca\u30c3\u30d7\u30b7\u30e7\u30c3\u30c8\u306f\u5e38\u306b\u6700\u521d\u306e\u5f15\u6570\u306b\u8ffd\u52a0\u3057\u3088\u3046\u3068\u3057\u307e\u3059\u3002 \u6700\u521d\u306e\u5f15\u6570\u304c\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u30de\u30c3\u30c1\u30e3\u3067\u3042\u308b\u5834\u5408\u306f\u30012\u756a\u76ee\u306e\u5f15\u6570\u306b\u8ffd\u52a0\u3057\u3088\u3046\u3068\u3057\u307e\u3059\u3002"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const {toMatchInlineSnapshot} = require('jest-snapshot');\n\nexpect.extend({\n  toMatchTrimmedInlineSnapshot(received, ...rest) {\n    return toMatchInlineSnapshot.call(this, received.substring(0, 10), ...rest);\n  },\n});\n\nit('stores only 10 characters', () => {\n  expect('extra long string oh my gerd').toMatchTrimmedInlineSnapshot();\n  /*\n  The snapshot will be added inline like\n  expect('extra long string oh my gerd').toMatchTrimmedInlineSnapshot(\n    `\"extra long\"`\n  );\n  */\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"async",children:"async"}),"\n",(0,s.jsxs)(n.p,{children:["If your custom inline snapshot matcher is async i.e. uses ",(0,s.jsx)(n.code,{children:"async"}),"-",(0,s.jsx)(n.code,{children:"await"}),' you might encounter an error like "Multiple inline snapshots for the same call are not supported". Jest needs additional context information to find where the custom inline snapshot matcher was used to update the snapshots properly.']}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const {toMatchInlineSnapshot} = require('jest-snapshot');\n\nexpect.extend({\n  async toMatchObservationInlineSnapshot(fn, ...rest) {\n    // The error (and its stacktrace) must be created before any `await`\n    this.error = new Error();\n\n    // The implementation of `observe` doesn't matter.\n    // It only matters that the custom snapshot matcher is async.\n    const observation = await observe(async () => {\n      await fn();\n    });\n\n    return toMatchInlineSnapshot.call(this, recording, ...rest);\n  },\n});\n\nit('observes something', async () => {\n  await expect(async () => {\n    return 'async action';\n  }).toMatchTrimmedInlineSnapshot();\n  /*\n  The snapshot will be added inline like\n  await expect(async () => {\n    return 'async action';\n  }).toMatchTrimmedInlineSnapshot(`\"async action\"`);\n  */\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"bail-out",children:"Bail out"}),"\n",(0,s.jsxs)(n.p,{children:["Usually ",(0,s.jsx)(n.code,{children:"jest"})," tries to match every snapshot that is expected in a test."]}),"\n",(0,s.jsx)(n.p,{children:"Sometimes it might not make sense to continue the test if a prior snapshot failed. For example, when you make snapshots of a state-machine after various transitions you can abort the test once one transition produced the wrong state."}),"\n",(0,s.jsx)(n.p,{children:"In that case you can implement a custom snapshot matcher that throws on the first mismatch instead of collecting every mismatch."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const {toMatchInlineSnapshot} = require('jest-snapshot');\n\nexpect.extend({\n  toMatchStateInlineSnapshot(...args) {\n    this.dontThrow = () => {};\n\n    return toMatchInlineSnapshot.call(this, ...args);\n  },\n});\n\nlet state = 'initial';\n\nfunction transition() {\n  // Typo in the implementation should cause the test to fail\n  if (state === 'INITIAL') {\n    state = 'pending';\n  } else if (state === 'pending') {\n    state = 'done';\n  }\n}\n\nit('transitions as expected', () => {\n  expect(state).toMatchStateInlineSnapshot(`\"initial\"`);\n\n  transition();\n  // Already produces a mismatch. No point in continuing the test.\n  expect(state).toMatchStateInlineSnapshot(`\"loading\"`);\n\n  transition();\n  expect(state).toMatchStateInlineSnapshot(`\"done\"`);\n});\n"})})]})}const j=function(e={}){const{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(p,e)})):p(e)}},9066:(e,n,t)=>{t.d(n,{ZP:()=>c});var s=t(4246),i=t(1670);function r(e){const n=Object.assign({admonition:"admonition",p:"p",pre:"pre",code:"code",a:"a"},(0,i.ah)(),e.components);return(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)(n.p,{children:"\u3053\u306e\u30da\u30fc\u30b8\u306e TypeScript \u306e\u4f8b\u306f\u3001Jest \u306eAPI\u3092\u660e\u793a\u7684\u306b\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u305f\u5834\u5408\u306b\u306e\u307f\u52d5\u4f5c\u3057\u307e\u3059\u3002"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import {expect, jest, test} from '@jest/globals';\n"})}),(0,s.jsxs)(n.p,{children:["Consult the ",(0,s.jsx)(n.a,{href:"/ja/docs/getting-started#using-typescript",children:"Getting Started"})," guide for details on how to setup Jest with TypeScript."]})]})}const c=function(e={}){const{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(r,e)})):r(e)}}}]);