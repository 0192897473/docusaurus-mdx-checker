"use strict";(self.webpackChunkjest_website=self.webpackChunkjest_website||[]).push([[7071],{4553:(e,n,c)=>{c.r(n),c.d(n,{assets:()=>h,contentTitle:()=>d,default:()=>p,frontMatter:()=>i,metadata:()=>m,toc:()=>j});var s=c(4246),o=c(1670),t=c(8447),l=c(2599),a=c(6644),r=c(6294);const i={id:"mock-function-api",title:"\u30e2\u30c3\u30af\u95a2\u6570"},d=void 0,m={unversionedId:"mock-function-api",id:"mock-function-api",title:"\u30e2\u30c3\u30af\u95a2\u6570",description:'\u305f\u3060\u51fa\u529b\u3092\u30c6\u30b9\u30c8\u3059\u308b\u3060\u3051\u3067\u306a\u304f\u3001\u4ed6\u306e\u30b3\u30fc\u30c9\u304b\u3089\u9593\u63a5\u7684\u306b\u547c\u3073\u51fa\u3055\u308c\u305f\u95a2\u6570\u306e\u632f\u308b\u821e\u3044\u3092\u898b\u5f35\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u3001\u30e2\u30c3\u30af\u95a2\u6570\u306f "\u30b9\u30d1\u30a4"\u3068\u3082\u547c\u3070\u308c\u307e\u3059\u3002 jest.fn()\u95a2\u6570\u3067\u30e2\u30c3\u30af\u95a2\u6570\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 \u5b9f\u88c5\u304c\u4e0e\u3048\u3089\u308c\u306a\u3051\u308c\u3070\u3001\u30e2\u30c3\u30af\u95a2\u6570\u306f\u5b9f\u884c\u6642\u306bundefined\u3092\u8fd4\u3057\u307e\u3059\u3002',source:"@site/i18n/ja/docusaurus-plugin-content-docs/current/MockFunctionAPI.md",sourceDirName:".",slug:"/mock-function-api",permalink:"/ja/docs/next/mock-function-api",draft:!1,unlisted:!1,editUrl:"https://crowdin.com/project/jest-v2/ja",tags:[],version:"current",frontMatter:{id:"mock-function-api",title:"\u30e2\u30c3\u30af\u95a2\u6570"},sidebar:"api",previous:{title:"Expect",permalink:"/ja/docs/next/expect"},next:{title:"Jest\u30aa\u30d6\u30b8\u30a7\u30af\u30c8",permalink:"/ja/docs/next/jest-object"}},h={},j=[{value:"\u30e1\u30bd\u30c3\u30c9",id:"\u30e1\u30bd\u30c3\u30c9",level:2},{value:"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9",id:"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9",level:2},{value:"<code>mockFn.getMockName()</code>",id:"mockfngetmockname",level:3},{value:"<code>mockFn.mock.calls</code>",id:"mockfnmockcalls",level:3},{value:"<code>mockFn.mock.results</code>",id:"mockfnmockresults",level:3},{value:"<code>mockFn.mock.instances</code>",id:"mockfnmockinstances",level:3},{value:"<code>mockFn.mock.contexts</code>",id:"mockfnmockcontexts",level:3},{value:"<code>mockFn.mock.lastCall</code>",id:"mockfnmocklastcall",level:3},{value:"<code>mockFn.mockClear()</code>",id:"mockfnmockclear",level:3},{value:"<code>mockFn.mockReset()</code>",id:"mockfnmockreset",level:3},{value:"<code>mockFn.mockRestore()</code>",id:"mockfnmockrestore",level:3},{value:"<code>mockFn.mockImplementation(fn)</code>",id:"mockfnmockimplementationfn",level:3},{value:"<code>mockFn.mockImplementationOnce(fn)</code>",id:"mockfnmockimplementationoncefn",level:3},{value:"<code>mockFn.mockName(name)</code>",id:"mockfnmocknamename",level:3},{value:"<code>mockFn.mockReturnThis()</code>",id:"mockfnmockreturnthis",level:3},{value:"<code>mockFn.mockReturnValue(value)</code>",id:"mockfnmockreturnvaluevalue",level:3},{value:"<code>mockFn.mockReturnValueOnce(value)</code>",id:"mockfnmockreturnvalueoncevalue",level:3},{value:"<code>mockFn.mockResolvedValue(value)</code>",id:"mockfnmockresolvedvaluevalue",level:3},{value:"<code>mockFn.mockResolvedValueOnce(value)</code>",id:"mockfnmockresolvedvalueoncevalue",level:3},{value:"<code>mockFn.mockRejectedValue(value)</code>",id:"mockfnmockrejectedvaluevalue",level:3},{value:"<code>mockFn.mockRejectedValueOnce(value)</code>",id:"mockfnmockrejectedvalueoncevalue",level:3},{value:"<code>mockFn.withImplementation(fn, callback)</code>",id:"mockfnwithimplementationfn-callback",level:3},{value:"Replaced Properties",id:"replaced-properties",level:2},{value:"<code>replacedProperty.replaceValue(value)</code>",id:"replacedpropertyreplacevaluevalue",level:3},{value:"<code>replacedProperty.restore()</code>",id:"replacedpropertyrestore",level:3},{value:"TypeScript Usage",id:"typescript-usage",level:2},{value:"<code>jest.fn(implementation?)</code>",id:"jestfnimplementation",level:3},{value:"<code>jest.Mock&lt;T&gt;</code>",id:"jestmockt",level:3},{value:"<code>jest.Mocked&lt;Source&gt;</code>",id:"jestmockedsource",level:3},{value:"<code>jest.Replaced&lt;Source&gt;</code>",id:"jestreplacedsource",level:3},{value:"<code>jest.mocked(source, options?)</code>",id:"jestmockedsource-options",level:3},{value:"<code>jest.Spied&lt;Source&gt;</code>",id:"jestspiedsource",level:3}];function u(e){const n=Object.assign({p:"p",code:"code",h2:"h2",hr:"hr",h3:"h3",a:"a",pre:"pre",ul:"ul",li:"li",admonition:"admonition"},(0,o.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:['\u305f\u3060\u51fa\u529b\u3092\u30c6\u30b9\u30c8\u3059\u308b\u3060\u3051\u3067\u306a\u304f\u3001\u4ed6\u306e\u30b3\u30fc\u30c9\u304b\u3089\u9593\u63a5\u7684\u306b\u547c\u3073\u51fa\u3055\u308c\u305f\u95a2\u6570\u306e\u632f\u308b\u821e\u3044\u3092\u898b\u5f35\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u3001\u30e2\u30c3\u30af\u95a2\u6570\u306f "\u30b9\u30d1\u30a4"\u3068\u3082\u547c\u3070\u308c\u307e\u3059\u3002 ',(0,s.jsx)(n.code,{children:"jest.fn()"}),"\u95a2\u6570\u3067\u30e2\u30c3\u30af\u95a2\u6570\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 \u5b9f\u88c5\u304c\u4e0e\u3048\u3089\u308c\u306a\u3051\u308c\u3070\u3001\u30e2\u30c3\u30af\u95a2\u6570\u306f\u5b9f\u884c\u6642\u306b",(0,s.jsx)(n.code,{children:"undefined"}),"\u3092\u8fd4\u3057\u307e\u3059\u3002"]}),"\n","\n",(0,s.jsx)(a.ZP,{}),"\n",(0,s.jsx)(n.h2,{id:"\u30e1\u30bd\u30c3\u30c9",children:"\u30e1\u30bd\u30c3\u30c9"}),"\n","\n","\n",(0,s.jsx)(r.Z,{toc:j.slice(1)}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9",children:"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9"}),"\n",(0,s.jsx)(n.h3,{id:"mockfngetmockname",children:(0,s.jsx)(n.code,{children:"mockFn.getMockName()"})}),"\n",(0,s.jsxs)(n.p,{children:["Returns the mock name string set by calling ",(0,s.jsx)(n.a,{href:"#mockfnmocknamename",children:(0,s.jsx)(n.code,{children:".mockName()"})}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"mockfnmockcalls",children:(0,s.jsx)(n.code,{children:"mockFn.mock.calls"})}),"\n",(0,s.jsx)(n.p,{children:"\u30e2\u30c3\u30af\u95a2\u6570\u306b\u884c\u308f\u308c\u305f\u5168\u3066\u306e\u30b3\u30fc\u30eb\u3092\u542b\u3080\u914d\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002 \u914d\u5217\u306e\u500b\u3005\u306e\u8981\u7d20\u306f\u3001\u30b3\u30fc\u30eb\u306b\u6e21\u3055\u308c\u305f\u5f15\u6570\u306e\u914d\u5217\u3067\u3059\u3002"}),"\n",(0,s.jsxs)(n.p,{children:["\u4f8b: ",(0,s.jsx)(n.code,{children:"f('arg1', 'arg2')"}),"\u3068",(0,s.jsx)(n.code,{children:"f('arg3', 'arg4')"}),"\u306e\u5f62\u30672\u56de\u547c\u3070\u308c\u308b\u30e2\u30c3\u30af\u95a2\u6570",(0,s.jsx)(n.code,{children:"f"}),"\u306f\u6b21\u306e\u3088\u3046\u306a",(0,s.jsx)(n.code,{children:"mock.calls"}),"\u306e\u914d\u5217\u3092\u6301\u3061\u307e\u3059:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"[\n  ['arg1', 'arg2'],\n  ['arg3', 'arg4'],\n];\n"})}),"\n",(0,s.jsx)(n.h3,{id:"mockfnmockresults",children:(0,s.jsx)(n.code,{children:"mockFn.mock.results"})}),"\n",(0,s.jsxs)(n.p,{children:["\u30e2\u30c3\u30af\u95a2\u6570\u306b\u5bfe\u3057\u3066\u884c\u308f\u308c\u305f\u3059\u3079\u3066\u306e\u547c\u3073\u51fa\u3057\u306e\u7d50\u679c\u3092\u542b\u3080\u914d\u5217\u3002 \u3053\u306e\u914d\u5217\u306e\u5404\u8981\u7d20\u306f\u3001 ",(0,s.jsx)(n.code,{children:"\u30bf\u30a4\u30d7"})," \u30d7\u30ed\u30d1\u30c6\u30a3\u3068 ",(0,s.jsx)(n.code,{children:"\u5024"})," \u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u6301\u3064\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002 ",(0,s.jsx)(n.code,{children:"type"})," \u306f\u4ee5\u4e0b\u306e\u3044\u305a\u308c\u304b\u306b\u306a\u308a\u307e\u3059:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"'return'"})," - \u6b63\u5e38\u7d42\u4e86\u3057\u305f\u30b3\u30fc\u30eb\u3092\u793a\u3057\u307e\u3059\u3002"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"'throw'"})," - \u5024\u3092\u8fd4\u3057\u3066\u547c\u3073\u51fa\u3057\u304c\u5b8c\u4e86\u3057\u305f\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"'incomplete'"})," - \u547c\u3073\u51fa\u3057\u304c\u307e\u3060\u5b8c\u4e86\u3057\u3066\u3044\u306a\u3044\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002 \u3053\u308c\u306f\u3001\u30e2\u30c3\u30af\u95a2\u6570\u81ea\u4f53\u306e\u4e2d\u304b\u3089\u7d50\u679c\u3092\u30c6\u30b9\u30c8\u3059\u308b\u5834\u5408\u3084\u3001\u30e2\u30c3\u30af\u95a2\u6570\u306b\u3088\u3063\u3066\u547c\u3073\u51fa\u3055\u308c\u305f\u95a2\u6570\u5185\u304b\u3089\u306e\u7d50\u679c\u3092\u30c6\u30b9\u30c8\u3059\u308b\u5834\u5408\u306b\u767a\u751f\u3057\u307e\u3059\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"value"})," \u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u306f\u3001\u30b9\u30ed\u30fc\u307e\u305f\u306f\u8fd4\u3055\u308c\u305f\u5024\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002 ",(0,s.jsx)(n.code,{children:"value"})," \u306f ",(0,s.jsx)(n.code,{children:"type === 'incomplete'"})," \u306e\u5834\u5408\u306f undefined \u3067\u3059\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"new"})," \u306b\u3088\u308a\u30e2\u30c3\u30af\u95a2\u6570\u304b\u3089\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3055\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5168\u3066\u306e\u914d\u5217\u3002"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"[\n  {\n    type: 'return',\n    value: 'result1',\n  },\n  {\n    type: 'throw',\n    value: {\n      /* Error instance */\n    },\n  },\n  {\n    type: 'return',\n    value: 'result2',\n  },\n];\n"})}),"\n",(0,s.jsx)(n.h3,{id:"mockfnmockinstances",children:(0,s.jsx)(n.code,{children:"mockFn.mock.instances"})}),"\n",(0,s.jsxs)(n.p,{children:["\u4f8b: 2\u56de\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3055\u308c\u305f\u30e2\u30c3\u30af\u95a2\u6570\u306f\u6b21\u306e\u3088\u3046\u306a",(0,s.jsx)(n.code,{children:"mock.instances"}),"\u914d\u5217\u3092\u6301\u3061\u307e\u3059:"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"#mockfnmockcalls",children:(0,s.jsx)(n.code,{children:"mockFn.mock.calls"})})," \u3068 ",(0,s.jsx)(n.a,{href:"#mockfnmockinstances",children:(0,s.jsx)(n.code,{children:"mockFn.mock.instances"})}),"\u306e\u914d\u5217\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u5168\u3066\u306e\u60c5\u5831\u3092\u30ea\u30bb\u30c3\u30c8\u3057\u307e\u3059\u3002"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const mockFn = jest.fn();\n\nconst a = new mockFn();\nconst b = new mockFn();\n\nmockFn.mock.instances[0] === a; // true\nmockFn.mock.instances[1] === b; // true\n"})}),"\n",(0,s.jsx)(n.h3,{id:"mockfnmockcontexts",children:(0,s.jsx)(n.code,{children:"mockFn.mock.contexts"})}),"\n",(0,s.jsx)(n.p,{children:"An array that contains the contexts for all calls of the mock function."}),"\n",(0,s.jsxs)(n.p,{children:["A context is the ",(0,s.jsx)(n.code,{children:"this"})," value that a function receives when called. The context can be set using ",(0,s.jsx)(n.code,{children:"Function.prototype.bind"}),", ",(0,s.jsx)(n.code,{children:"Function.prototype.call"})," or ",(0,s.jsx)(n.code,{children:"Function.prototype.apply"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"\u4f8b\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const mockFn = jest.fn();\n\nconst boundMockFn = mockFn.bind(thisContext0);\nboundMockFn('a', 'b');\nmockFn.call(thisContext1, 'a', 'b');\nmockFn.apply(thisContext2, ['a', 'b']);\n\nmockFn.mock.contexts[0] === thisContext0; // true\nmockFn.mock.contexts[1] === thisContext1; // true\nmockFn.mock.contexts[2] === thisContext2; // true\n"})}),"\n",(0,s.jsx)(n.h3,{id:"mockfnmocklastcall",children:(0,s.jsx)(n.code,{children:"mockFn.mock.lastCall"})}),"\n",(0,s.jsxs)(n.p,{children:["An array containing the call arguments of the last call that was made to this mock function. If the function was not called, it will return ",(0,s.jsx)(n.code,{children:"undefined"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["For example: A mock function ",(0,s.jsx)(n.code,{children:"f"})," that has been called twice, with the arguments ",(0,s.jsx)(n.code,{children:"f('arg1', 'arg2')"}),", and then with the arguments ",(0,s.jsx)(n.code,{children:"f('arg3', 'arg4')"}),", would have a ",(0,s.jsx)(n.code,{children:"mock.lastCall"})," array that looks like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"['arg3', 'arg4'];\n"})}),"\n",(0,s.jsx)(n.h3,{id:"mockfnmockclear",children:(0,s.jsx)(n.code,{children:"mockFn.mockClear()"})}),"\n",(0,s.jsxs)(n.p,{children:["Clears all information stored in the ",(0,s.jsx)(n.a,{href:"#mockfnmockcalls",children:(0,s.jsx)(n.code,{children:"mockFn.mock.calls"})}),", ",(0,s.jsx)(n.a,{href:"#mockfnmockinstances",children:(0,s.jsx)(n.code,{children:"mockFn.mock.instances"})}),", ",(0,s.jsx)(n.a,{href:"#mockfnmockcontexts",children:(0,s.jsx)(n.code,{children:"mockFn.mock.contexts"})})," and ",(0,s.jsx)(n.a,{href:"#mockfnmockresults",children:(0,s.jsx)(n.code,{children:"mockFn.mock.results"})})," arrays. Often this is useful when you want to clean up a mocks usage data between two assertions."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"configuration#clearmocks-boolean",children:(0,s.jsx)(n.code,{children:"clearMocks"})})," configuration option is available to clear mocks automatically before each tests."]}),"\n",(0,s.jsx)(n.admonition,{type:"danger",children:(0,s.jsxs)(n.p,{children:["Beware that ",(0,s.jsx)(n.code,{children:"mockFn.mockClear()"})," will replace ",(0,s.jsx)(n.code,{children:"mockFn.mock"}),", not just reset the values of its properties! You should, therefore, avoid assigning ",(0,s.jsx)(n.code,{children:"mockFn.mock"})," to other variables, temporary or not, to make sure you don't access stale data."]})}),"\n",(0,s.jsx)(n.h3,{id:"mockfnmockreset",children:(0,s.jsx)(n.code,{children:"mockFn.mockReset()"})}),"\n",(0,s.jsxs)(n.p,{children:["Does everything that ",(0,s.jsx)(n.a,{href:"#mockfnmockclear",children:(0,s.jsx)(n.code,{children:"mockFn.mockClear()"})})," does, and also replaces the mock implementation with an empty function, returning ",(0,s.jsx)(n.code,{children:"undefined"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"configuration#resetmocks-boolean",children:(0,s.jsx)(n.code,{children:"resetMocks"})})," configuration option is available to reset mocks automatically before each test."]}),"\n",(0,s.jsx)(n.h3,{id:"mockfnmockrestore",children:(0,s.jsx)(n.code,{children:"mockFn.mockRestore()"})}),"\n",(0,s.jsxs)(n.p,{children:["Does everything that ",(0,s.jsx)(n.a,{href:"#mockfnmockreset",children:(0,s.jsx)(n.code,{children:"mockFn.mockReset()"})})," does, and also restores the original (non-mocked) implementation."]}),"\n",(0,s.jsx)(n.p,{children:"\u3042\u308b\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3067\u30e2\u30c3\u30af\u95a2\u6570\u3092\u5229\u7528\u3057\u3066\u4ed6\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3067\u306f\u672c\u7269\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u623b\u3057\u305f\u3044\u3068\u304d\u306b\u4fbf\u5229\u3067\u3059\u3002"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"configuration#restoremocks-boolean",children:(0,s.jsx)(n.code,{children:"restoreMocks"})})," configuration option is available to restore mocks automatically before each test."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"mockFn.mockRestore()"})," only works when the mock was created with ",(0,s.jsx)(n.code,{children:"jest.spyOn()"}),". \u3053\u306e\u305f\u3081\u624b\u52d5\u3067 ",(0,s.jsx)(n.code,{children:"jest.fn()"}),"\u3092\u5272\u308a\u5f53\u3066\u305f\u5834\u5408\u306f\u81ea\u5206\u3067\u5fa9\u5143\u4f5c\u696d\u3092\u884c\u308f\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3053\u3068\u306b\u6c17\u3092\u3064\u3051\u3066\u4e0b\u3055\u3044\u3002"]})}),"\n",(0,s.jsx)(n.h3,{id:"mockfnmockimplementationfn",children:(0,s.jsx)(n.code,{children:"mockFn.mockImplementation(fn)"})}),"\n",(0,s.jsx)(n.p,{children:"\u30e2\u30c3\u30af\u306e\u5b9f\u88c5\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u308b\u95a2\u6570\u3092\u53d7\u3051\u53d6\u308a\u307e\u3059\u3002 \u30e2\u30c3\u30af\u81ea\u4f53\u306f\u305d\u308c\u81ea\u8eab\u304b\u3089\u51fa\u3066\u304d\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u4e2d\u306b\u4e0e\u3048\u3089\u308c\u305f\u5168\u3066\u306e\u30b3\u30fc\u30eb\u3092\u3044\u307e\u3060\u8a18\u9332\u3057\u3066\u3044\u307e\u3059 - \u9055\u3044\u306f\u30e2\u30c3\u30af\u304c\u30b3\u30fc\u30eb\u3055\u308c\u305f\u3068\u304d\u306b\u5b9f\u88c5\u3055\u308c\u305f\u95a2\u6570\u3082\u5b9f\u884c\u3055\u308c\u308b\u3053\u3068\u3067\u3059\u3002"}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"jest.fn(implementation)"})," is a shorthand for ",(0,s.jsx)(n.code,{children:"jest.fn().mockImplementation(implementation)"}),"."]})}),"\n",(0,s.jsxs)(t.Z,{groupId:"code-examples",children:[(0,s.jsx)(l.Z,{value:"js",label:"JavaScript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"tab",children:"const mockFn = jest.fn(scalar => 42 + scalar);\n\nmockFn(0); // 42\nmockFn(1); // 43\n\nmockFn.mockImplementation(scalar => 36 + scalar);\n\nmockFn(2); // 38\nmockFn(3); // 39\n"})})}),(0,s.jsx)(l.Z,{value:"ts",label:"TypeScript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"tab",children:"import {jest} from '@jest/globals';\n\nconst mockFn = jest.fn((scalar: number) => 42 + scalar);\n\nmockFn(0); // 42\nmockFn(1); // 43\n\nmockFn.mockImplementation(scalar => 36 + scalar);\n\nmockFn(2); // 38\nmockFn(3); // 39\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:".mockImplementation()"})," can also be used to mock class constructors:"]}),"\n",(0,s.jsxs)(t.Z,{groupId:"code-examples",children:[(0,s.jsxs)(l.Z,{value:"js",label:"JavaScript",children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:'tab={"span":2} title="SomeClass.js"',children:"module.exports = class SomeClass {\n  method(a, b) {}\n};\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:'title="SomeClass.test.js"',children:"const SomeClass = require('./SomeClass');\n\njest.mock('./SomeClass'); // this happens automatically with automocking\n\nconst mockMethod = jest.fn();\nSomeClass.mockImplementation(() => {\n  return {\n    method: mockMethod,\n  };\n});\n\nconst some = new SomeClass();\nsome.method('a', 'b');\n\nconsole.log('Calls to method: ', mockMethod.mock.calls);\n"})})]}),(0,s.jsxs)(l.Z,{value:"ts",label:"TypeScript",children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'tab={"span":2} title="SomeClass.ts"',children:"export class SomeClass {\n  method(a: string, b: string): void {}\n}\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="SomeClass.test.ts"',children:"import {jest} from '@jest/globals';\nimport {SomeClass} from './SomeClass';\n\njest.mock('./SomeClass'); // this happens automatically with automocking\n\nconst mockMethod = jest.fn<(a: string, b: string) => void>();\njest.mocked(SomeClass).mockImplementation(() => {\n  return {\n    method: mockMethod,\n  };\n});\n\nconst some = new SomeClass();\nsome.method('a', 'b');\n\nconsole.log('Calls to method: ', mockMethod.mock.calls);\n"})})]})]}),"\n",(0,s.jsx)(n.h3,{id:"mockfnmockimplementationoncefn",children:(0,s.jsx)(n.code,{children:"mockFn.mockImplementationOnce(fn)"})}),"\n",(0,s.jsx)(n.p,{children:"\u30e2\u30c3\u30af\u95a2\u6570\u3078\u306e1\u56de\u306e\u30b3\u30fc\u30eb\u306b\u5bfe\u3059\u308b\u5b9f\u88c5\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u308b\u95a2\u6570\u3092\u53d7\u3051\u53d6\u308a\u307e\u3059\u3002 \u95a2\u6570\u3078\u306e\u8907\u6570\u56de\u306e\u30b3\u30fc\u30eb\u304c\u7570\u306a\u308b\u7d50\u679c\u3092\u8fd4\u305b\u308b\u3088\u3046\u3001\u30c1\u30a7\u30fc\u30f3\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002"}),"\n",(0,s.jsxs)(t.Z,{groupId:"code-examples",children:[(0,s.jsx)(l.Z,{value:"js",label:"JavaScript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"tab",children:"const mockFn = jest\n  .fn()\n  .mockImplementationOnce(cb => cb(null, true))\n  .mockImplementationOnce(cb => cb(null, false));\n\nmockFn((err, val) => console.log(val)); // true\nmockFn((err, val) => console.log(val)); // false\n"})})}),(0,s.jsx)(l.Z,{value:"ts",label:"TypeScript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"tab",children:"import {jest} from '@jest/globals';\n\nconst mockFn = jest\n  .fn<(cb: (a: null, b: boolean) => void) => void>()\n  .mockImplementationOnce(cb => cb(null, true))\n  .mockImplementationOnce(cb => cb(null, false));\n\nmockFn((err, val) => console.log(val)); // true\nmockFn((err, val) => console.log(val)); // false\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:["When the mocked function runs out of implementations defined with ",(0,s.jsx)(n.code,{children:".mockImplementationOnce()"}),", it will execute the default implementation set with ",(0,s.jsx)(n.code,{children:"jest.fn(() => defaultValue)"})," or ",(0,s.jsx)(n.code,{children:".mockImplementation(() => defaultValue)"})," if they were called:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const mockFn = jest\n  .fn(() => 'default')\n  .mockImplementationOnce(() => 'first call')\n  .mockImplementationOnce(() => 'second call');\n\nmockFn(); // 'first call'\nmockFn(); // 'second call'\nmockFn(); // 'default'\nmockFn(); // 'default'\n"})}),"\n",(0,s.jsx)(n.h3,{id:"mockfnmocknamename",children:(0,s.jsx)(n.code,{children:"mockFn.mockName(name)"})}),"\n",(0,s.jsxs)(n.p,{children:["Accepts a string to use in test result output in place of ",(0,s.jsx)(n.code,{children:"'jest.fn()'"})," to indicate which mock function is being referenced."]}),"\n",(0,s.jsx)(n.p,{children:"\u4f8b\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const mockFn = jest.fn().mockName('mockedFunction');\n\n// mockFn();\nexpect(mockFn).toHaveBeenCalled();\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u4e0b\u8a18\u306e\u95a2\u6570\u306e\u7cd6\u8863\u95a2\u6570\u3067\u3059\u3002"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"expect(mockedFunction).toHaveBeenCalled()\n\nExpected number of calls: >= 1\nReceived number of calls:    0\n"})}),"\n",(0,s.jsx)(n.h3,{id:"mockfnmockreturnthis",children:(0,s.jsx)(n.code,{children:"mockFn.mockReturnThis()"})}),"\n",(0,s.jsx)(n.p,{children:"Shorthand for:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"jest.fn(function () {\n  return this;\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"mockfnmockreturnvaluevalue",children:(0,s.jsx)(n.code,{children:"mockFn.mockReturnValue(value)"})}),"\n",(0,s.jsx)(n.p,{children:"Shorthand for:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"jest.fn().mockImplementation(() => value);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["\u305f\u3068\u3048\u3070\u3001\u3042\u308b\u30e2\u30c3\u30af\u95a2\u6570 ",(0,s.jsx)(n.code,{children:"f"})," \u304c3\u56de\u547c\u3070\u308c\u305f\u6642\u3001",(0,s.jsx)(n.code,{children:"'result1'"})," \u304c\u8fd4\u308a\u3001\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u3001",(0,s.jsx)(n.code,{children:"'result2'"})," \u304c\u8fd4\u3063\u305f\u5834\u5408\u3001",(0,s.jsx)(n.code,{children:"mock.returnValues"})," \u914d\u5217\u306f\u6b21\u306e\u3088\u3046\u306a\u5024\u306b\u306a\u308a\u307e\u3059\u3002"]}),"\n",(0,s.jsxs)(t.Z,{groupId:"code-examples",children:[(0,s.jsx)(l.Z,{value:"js",label:"JavaScript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"tab",children:"const mock = jest.fn();\n\nmock.mockReturnValue(42);\nmock(); // 42\n\nmock.mockReturnValue(43);\nmock(); // 43\n"})})}),(0,s.jsx)(l.Z,{value:"ts",label:"TypeScript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"tab",children:"import {jest} from '@jest/globals';\n\nconst mock = jest.fn<() => number>();\n\nmock.mockReturnValue(42);\nmock(); // 42\n\nmock.mockReturnValue(43);\nmock(); // 43\n"})})})]}),"\n",(0,s.jsx)(n.h3,{id:"mockfnmockreturnvalueoncevalue",children:(0,s.jsx)(n.code,{children:"mockFn.mockReturnValueOnce(value)"})}),"\n",(0,s.jsx)(n.p,{children:"Shorthand for:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"jest.fn().mockImplementationOnce(() => value);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["\u30e2\u30c3\u30af\u95a2\u6570\u30921\u56de\u547c\u3073\u51fa\u3057\u305f\u3068\u304d\u306b\u8fd4\u3059\u5024\u3092\u53d7\u3051\u53d6\u308a\u307e\u3059\u3002 \u6b21\u306e\u30e2\u30c3\u30af\u95a2\u6570\u3078\u306e\u30b3\u30fc\u30eb\u304c\u7570\u306a\u308b\u5024\u3092\u8fd4\u305b\u308b\u3088\u3046\u30c1\u30a7\u30fc\u30f3\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u4f7f\u7528\u3067\u304d\u308b ",(0,s.jsx)(n.code,{children:"mockReturnValueOnce"}),"\u306e\u5024\u304c\u7121\u3044\u5834\u5408\u306f\u3001 ",(0,s.jsx)(n.code,{children:"mockReturnValue"}),"\u3067\u8a2d\u5b9a\u3055\u308c\u305f\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002"]}),"\n",(0,s.jsxs)(t.Z,{groupId:"code-examples",children:[(0,s.jsx)(l.Z,{value:"js",label:"JavaScript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"tab",children:"const mockFn = jest\n  .fn()\n  .mockReturnValue('default')\n  .mockReturnValueOnce('first call')\n  .mockReturnValueOnce('second call');\n\nmockFn(); // 'first call'\nmockFn(); // 'second call'\nmockFn(); // 'default'\nmockFn(); // 'default'\n"})})}),(0,s.jsx)(l.Z,{value:"ts",label:"TypeScript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"tab",children:"import {jest} from '@jest/globals';\n\nconst mockFn = jest\n  .fn<() => string>()\n  .mockReturnValue('default')\n  .mockReturnValueOnce('first call')\n  .mockReturnValueOnce('second call');\n\nmockFn(); // 'first call'\nmockFn(); // 'second call'\nmockFn(); // 'default'\nmockFn(); // 'default'\n"})})})]}),"\n",(0,s.jsx)(n.h3,{id:"mockfnmockresolvedvaluevalue",children:(0,s.jsx)(n.code,{children:"mockFn.mockResolvedValue(value)"})}),"\n",(0,s.jsx)(n.p,{children:"Shorthand for:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"jest.fn().mockImplementation(() => Promise.resolve(value));\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u4e0b\u8a18\u306e\u95a2\u6570\u306e\u7cd6\u8863\u95a2\u6570\u3067\u3059\u3002"}),"\n",(0,s.jsxs)(t.Z,{groupId:"code-examples",children:[(0,s.jsx)(l.Z,{value:"js",label:"JavaScript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"tab",children:"test('async test', async () => {\n  const asyncMock = jest.fn().mockResolvedValue(43);\n\n  await asyncMock(); // 43\n});\n"})})}),(0,s.jsx)(l.Z,{value:"ts",label:"TypeScript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"tab",children:"import {jest, test} from '@jest/globals';\n\ntest('async test', async () => {\n  const asyncMock = jest.fn<() => Promise<number>>().mockResolvedValue(43);\n\n  await asyncMock(); // 43\n});\n"})})})]}),"\n",(0,s.jsx)(n.h3,{id:"mockfnmockresolvedvalueoncevalue",children:(0,s.jsx)(n.code,{children:"mockFn.mockResolvedValueOnce(value)"})}),"\n",(0,s.jsx)(n.p,{children:"Shorthand for:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"jest.fn().mockImplementationOnce(() => Promise.resolve(value));\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u4e0b\u8a18\u306e\u95a2\u6570\u306e\u7cd6\u8863\u95a2\u6570\u3067\u3059\u3002"}),"\n",(0,s.jsxs)(t.Z,{groupId:"code-examples",children:[(0,s.jsx)(l.Z,{value:"js",label:"JavaScript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"tab",children:"test('async test', async () => {\n  const asyncMock = jest\n    .fn()\n    .mockResolvedValue('default')\n    .mockResolvedValueOnce('first call')\n    .mockResolvedValueOnce('second call');\n\n  await asyncMock(); // 'first call'\n  await asyncMock(); // 'second call'\n  await asyncMock(); // 'default'\n  await asyncMock(); // 'default'\n});\n"})})}),(0,s.jsx)(l.Z,{value:"ts",label:"TypeScript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"tab",children:"import {jest, test} from '@jest/globals';\n\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn<() => Promise<string>>()\n    .mockResolvedValue('default')\n    .mockResolvedValueOnce('first call')\n    .mockResolvedValueOnce('second call');\n\n  await asyncMock(); // 'first call'\n  await asyncMock(); // 'second call'\n  await asyncMock(); // 'default'\n  await asyncMock(); // 'default'\n});\n"})})})]}),"\n",(0,s.jsx)(n.h3,{id:"mockfnmockrejectedvaluevalue",children:(0,s.jsx)(n.code,{children:"mockFn.mockRejectedValue(value)"})}),"\n",(0,s.jsx)(n.p,{children:"Shorthand for:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"jest.fn().mockImplementation(() => Promise.reject(value));\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u4e0b\u8a18\u306e\u95a2\u6570\u306e\u7cd6\u8863\u95a2\u6570\u3067\u3059\u3002"}),"\n",(0,s.jsxs)(t.Z,{groupId:"code-examples",children:[(0,s.jsx)(l.Z,{value:"js",label:"JavaScript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"tab",children:"test('async test', async () => {\n  const asyncMock = jest\n    .fn()\n    .mockRejectedValue(new Error('Async error message'));\n\n  await asyncMock(); // throws 'Async error message'\n});\n"})})}),(0,s.jsx)(l.Z,{value:"ts",label:"TypeScript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"tab",children:"import {jest, test} from '@jest/globals';\n\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn<() => Promise<never>>()\n    .mockRejectedValue(new Error('Async error message'));\n\n  await asyncMock(); // throws 'Async error message'\n});\n"})})})]}),"\n",(0,s.jsx)(n.h3,{id:"mockfnmockrejectedvalueoncevalue",children:(0,s.jsx)(n.code,{children:"mockFn.mockRejectedValueOnce(value)"})}),"\n",(0,s.jsx)(n.p,{children:"Shorthand for:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"jest.fn().mockImplementationOnce(() => Promise.reject(value));\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Useful together with ",(0,s.jsx)(n.code,{children:".mockResolvedValueOnce()"})," or to reject with different exceptions over multiple async calls:"]}),"\n",(0,s.jsxs)(t.Z,{groupId:"code-examples",children:[(0,s.jsx)(l.Z,{value:"js",label:"JavaScript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"tab",children:"test('async test', async () => {\n  const asyncMock = jest\n    .fn()\n    .mockResolvedValueOnce('first call')\n    .mockRejectedValueOnce(new Error('Async error message'));\n\n  await asyncMock(); // 'first call'\n  await asyncMock(); // throws 'Async error message'\n});\n"})})}),(0,s.jsx)(l.Z,{value:"ts",label:"TypeScript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"tab",children:"import {jest, test} from '@jest/globals';\n\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn<() => Promise<string>>()\n    .mockResolvedValueOnce('first call')\n    .mockRejectedValueOnce(new Error('Async error message'));\n\n  await asyncMock(); // 'first call'\n  await asyncMock(); // throws 'Async error message'\n});\n"})})})]}),"\n",(0,s.jsx)(n.h3,{id:"mockfnwithimplementationfn-callback",children:(0,s.jsx)(n.code,{children:"mockFn.withImplementation(fn, callback)"})}),"\n",(0,s.jsx)(n.p,{children:"Accepts a function which should be temporarily used as the implementation of the mock while the callback is being executed."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('test', () => {\n  const mock = jest.fn(() => 'outside callback');\n\n  mock.withImplementation(\n    () => 'inside callback',\n    () => {\n      mock(); // 'inside callback'\n    },\n  );\n\n  mock(); // 'outside callback'\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"mockFn.withImplementation"})," can be used regardless of whether or not the callback is asynchronous (returns a ",(0,s.jsx)(n.code,{children:"thenable"}),"). If the callback is asynchronous a promise will be returned. Awaiting the promise will await the callback and reset the implementation."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('async test', async () => {\n  const mock = jest.fn(() => 'outside callback');\n\n  // We await this call since the callback is async\n  await mock.withImplementation(\n    () => 'inside callback',\n    async () => {\n      mock(); // 'inside callback'\n    },\n  );\n\n  mock(); // 'outside callback'\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"replaced-properties",children:"Replaced Properties"}),"\n",(0,s.jsx)(n.h3,{id:"replacedpropertyreplacevaluevalue",children:(0,s.jsx)(n.code,{children:"replacedProperty.replaceValue(value)"})}),"\n",(0,s.jsxs)(n.p,{children:["Changes the value of already replaced property. This is useful when you want to replace property and then adjust the value in specific tests. As an alternative, you can call ",(0,s.jsx)(n.a,{href:"/ja/docs/next/jest-object#jestreplacepropertyobject-propertykey-value",children:(0,s.jsx)(n.code,{children:"jest.replaceProperty()"})})," multiple times on same property."]}),"\n",(0,s.jsx)(n.h3,{id:"replacedpropertyrestore",children:(0,s.jsx)(n.code,{children:"replacedProperty.restore()"})}),"\n",(0,s.jsx)(n.p,{children:"Restores object's property to the original value."}),"\n",(0,s.jsxs)(n.p,{children:["Beware that ",(0,s.jsx)(n.code,{children:"replacedProperty.restore()"})," only works when the property value was replaced with ",(0,s.jsx)(n.a,{href:"/ja/docs/next/jest-object#jestreplacepropertyobject-propertykey-value",children:(0,s.jsx)(n.code,{children:"jest.replaceProperty()"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"configuration#restoremocks-boolean",children:(0,s.jsx)(n.code,{children:"restoreMocks"})})," configuration option is available to restore replaced properties automatically before each test."]}),"\n",(0,s.jsx)(n.h2,{id:"typescript-usage",children:"TypeScript Usage"}),"\n",(0,s.jsx)(a.ZP,{}),"\n",(0,s.jsx)(n.h3,{id:"jestfnimplementation",children:(0,s.jsx)(n.code,{children:"jest.fn(implementation?)"})}),"\n",(0,s.jsxs)(n.p,{children:["Correct mock typings will be inferred if implementation is passed to ",(0,s.jsx)(n.a,{href:"/ja/docs/next/jest-object#jestfnimplementation",children:(0,s.jsx)(n.code,{children:"jest.fn()"})}),". There are many use cases where the implementation is omitted. To ensure type safety you may pass a generic type argument (also see the examples above for more reference):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import {expect, jest, test} from '@jest/globals';\nimport type add from './add';\nimport calculate from './calc';\n\ntest('calculate calls add', () => {\n  // Create a new mock that can be used in place of `add`.\n  const mockAdd = jest.fn<typeof add>();\n\n  // `.mockImplementation()` now can infer that `a` and `b` are `number`\n  // and that the returned value is a `number`.\n  mockAdd.mockImplementation((a, b) => {\n    // Yes, this mock is still adding two numbers but imagine this\n    // was a complex function we are mocking.\n    return a + b;\n  });\n\n  // `mockAdd` is properly typed and therefore accepted by anything\n  // requiring `add`.\n  calculate(mockAdd, 1, 2);\n\n  expect(mockAdd).toHaveBeenCalledTimes(1);\n  expect(mockAdd).toHaveBeenCalledWith(1, 2);\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"jestmockt",children:(0,s.jsx)(n.code,{children:"jest.Mock<T>"})}),"\n",(0,s.jsxs)(n.p,{children:["Constructs the type of a mock function, e.g. the return type of ",(0,s.jsx)(n.code,{children:"jest.fn()"}),". It can be useful if you have to defined a recursive mock function:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import {jest} from '@jest/globals';\n\nconst sumRecursively: jest.Mock<(value: number) => number> = jest.fn(value => {\n  if (value === 0) {\n    return 0;\n  } else {\n    return value + fn(value - 1);\n  }\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"jestmockedsource",children:(0,s.jsx)(n.code,{children:"jest.Mocked<Source>"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"jest.Mocked<Source>"})," utility type returns the ",(0,s.jsx)(n.code,{children:"Source"})," type wrapped with type definitions of Jest mock function."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import {expect, jest, test} from '@jest/globals';\nimport type {fetch} from 'node-fetch';\n\njest.mock('node-fetch');\n\nlet mockedFetch: jest.Mocked<typeof fetch>;\n\nafterEach(() => {\n  mockedFetch.mockClear();\n});\n\ntest('makes correct call', () => {\n  mockedFetch = getMockedFetch();\n  // ...\n});\n\ntest('returns correct data', () => {\n  mockedFetch = getMockedFetch();\n  // ...\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Types of classes, functions or objects can be passed as type argument to ",(0,s.jsx)(n.code,{children:"jest.Mocked<Source>"}),". If you prefer to constrain the input type, use: ",(0,s.jsx)(n.code,{children:"jest.MockedClass<Source>"}),", ",(0,s.jsx)(n.code,{children:"jest.MockedFunction<Source>"})," or ",(0,s.jsx)(n.code,{children:"jest.MockedObject<Source>"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"jestreplacedsource",children:(0,s.jsx)(n.code,{children:"jest.Replaced<Source>"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"jest.Replaced<Source>"})," utility type returns the ",(0,s.jsx)(n.code,{children:"Source"})," type wrapped with type definitions of Jest ",(0,s.jsx)(n.a,{href:"#replaced-properties",children:"replaced property"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="src/utils.ts"',children:"export function isLocalhost(): boolean {\n  return process.env['HOSTNAME'] === 'localhost';\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="src/__tests__/utils.test.ts"',children:"import {afterEach, expect, it, jest} from '@jest/globals';\nimport {isLocalhost} from '../utils';\n\nlet replacedEnv: jest.Replaced<typeof process.env> | undefined = undefined;\n\nafterEach(() => {\n  replacedEnv?.restore();\n});\n\nit('isLocalhost should detect localhost environment', () => {\n  replacedEnv = jest.replaceProperty(process, 'env', {HOSTNAME: 'localhost'});\n\n  expect(isLocalhost()).toBe(true);\n});\n\nit('isLocalhost should detect non-localhost environment', () => {\n  replacedEnv = jest.replaceProperty(process, 'env', {HOSTNAME: 'example.com'});\n\n  expect(isLocalhost()).toBe(false);\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"jestmockedsource-options",children:(0,s.jsx)(n.code,{children:"jest.mocked(source, options?)"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"mocked()"})," helper method wraps types of the ",(0,s.jsx)(n.code,{children:"source"})," object and its deep nested members with type definitions of Jest mock function. You can pass ",(0,s.jsx)(n.code,{children:"{shallow: true}"})," as the ",(0,s.jsx)(n.code,{children:"options"})," argument to disable the deeply mocked behavior."]}),"\n",(0,s.jsxs)(n.p,{children:["Returns the ",(0,s.jsx)(n.code,{children:"source"})," object."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="song.ts"',children:"export const song = {\n  one: {\n    more: {\n      time: (t: number) => {\n        return t;\n      },\n    },\n  },\n};\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="song.test.ts"',children:"import {expect, jest, test} from '@jest/globals';\nimport {song} from './song';\n\njest.mock('./song');\njest.spyOn(console, 'log');\n\nconst mockedSong = jest.mocked(song);\n// or through `jest.Mocked<Source>`\n// const mockedSong = song as jest.Mocked<typeof song>;\n\ntest('deep method is typed correctly', () => {\n  mockedSong.one.more.time.mockReturnValue(12);\n\n  expect(mockedSong.one.more.time(10)).toBe(12);\n  expect(mockedSong.one.more.time.mock.calls).toHaveLength(1);\n});\n\ntest('direct usage', () => {\n  jest.mocked(console.log).mockImplementation(() => {\n    return;\n  });\n\n  console.log('one more time');\n\n  expect(jest.mocked(console.log).mock.calls).toHaveLength(1);\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"jestspiedsource",children:(0,s.jsx)(n.code,{children:"jest.Spied<Source>"})}),"\n",(0,s.jsxs)(n.p,{children:["Constructs the type of a spied class or function (i.e. the return type of ",(0,s.jsx)(n.code,{children:"jest.spyOn()"}),")."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="__utils__/setDateNow.ts"',children:"import {jest} from '@jest/globals';\n\nexport function setDateNow(now: number): jest.Spied<typeof Date.now> {\n  return jest.spyOn(Date, 'now').mockReturnValue(now);\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import {afterEach, expect, jest, test} from '@jest/globals';\nimport {setDateNow} from './__utils__/setDateNow';\n\nlet spiedDateNow: jest.Spied<typeof Date.now> | undefined = undefined;\n\nafterEach(() => {\n  spiedDateNow?.mockReset();\n});\n\ntest('renders correctly with a given date', () => {\n  spiedDateNow = setDateNow(1482363367071);\n  // ...\n\n  expect(spiedDateNow).toHaveBeenCalledTimes(1);\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Types of a class or function can be passed as type argument to ",(0,s.jsx)(n.code,{children:"jest.Spied<Source>"}),". If you prefer to constrain the input type, use: ",(0,s.jsx)(n.code,{children:"jest.SpiedClass<Source>"})," or ",(0,s.jsx)(n.code,{children:"jest.SpiedFunction<Source>"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"jest.SpiedGetter<Source>"})," or ",(0,s.jsx)(n.code,{children:"jest.SpiedSetter<Source>"})," to create the type of a spied getter or setter respectively."]})]})}const p=function(e={}){const{wrapper:n}=Object.assign({},(0,o.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(u,e)})):u(e)}},6644:(e,n,c)=>{c.d(n,{ZP:()=>l});var s=c(4246),o=c(1670);function t(e){const n=Object.assign({admonition:"admonition",p:"p",pre:"pre",code:"code",a:"a"},(0,o.ah)(),e.components);return(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)(n.p,{children:"\u3053\u306e\u30da\u30fc\u30b8\u306e TypeScript \u306e\u4f8b\u306f\u3001Jest \u306eAPI\u3092\u660e\u793a\u7684\u306b\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u305f\u5834\u5408\u306b\u306e\u307f\u52d5\u4f5c\u3057\u307e\u3059\u3002"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import {expect, jest, test} from '@jest/globals';\n"})}),(0,s.jsxs)(n.p,{children:["Consult the ",(0,s.jsx)(n.a,{href:"/ja/docs/next/getting-started#using-typescript",children:"Getting Started"})," guide for details on how to setup Jest with TypeScript."]})]})}const l=function(e={}){const{wrapper:n}=Object.assign({},(0,o.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(t,e)})):t(e)}}}]);