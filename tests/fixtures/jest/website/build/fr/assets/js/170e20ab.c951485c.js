"use strict";(self.webpackChunkjest_website=self.webpackChunkjest_website||[]).push([[9793],{6049:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>u,contentTitle:()=>d,default:()=>j,frontMatter:()=>i,metadata:()=>m,toc:()=>p});var c=s(4246),o=s(1670),t=s(8447),l=s(2599),a=s(4191),r=s(6294);const i={id:"mock-function-api",title:"Fonctions simul\xe9es"},d=void 0,m={unversionedId:"mock-function-api",id:"version-29.4/mock-function-api",title:"Fonctions simul\xe9es",description:"Les fonctions simul\xe9es sont \xe9galement connues sous le nom d'\xab\xa0espions\xa0\xbb, car elles vous permettent d'espionner le comportement d'une fonction qui est appel\xe9e indirectement par un autre code, plut\xf4t que de tester uniquement la sortie. Vous pouvez cr\xe9er une fonction simul\xe9e avec jest.fn(). Si aucune impl\xe9mentation n\u2019est donn\xe9e, la fonction simul\xe9e retournera undefined lorsqu\u2019elle est appel\xe9e.",source:"@site/i18n/fr/docusaurus-plugin-content-docs/version-29.4/MockFunctionAPI.md",sourceDirName:".",slug:"/mock-function-api",permalink:"/fr/docs/29.4/mock-function-api",draft:!1,unlisted:!1,editUrl:"https://crowdin.com/project/jest-v2/fr",tags:[],version:"29.4",frontMatter:{id:"mock-function-api",title:"Fonctions simul\xe9es"},sidebar:"api",previous:{title:"Expect",permalink:"/fr/docs/29.4/expect"},next:{title:"L'objet Jest",permalink:"/fr/docs/29.4/jest-object"}},u={},p=[{value:"M\xe9thodes",id:"m\xe9thodes",level:2},{value:"R\xe9f\xe9rence",id:"r\xe9f\xe9rence",level:2},{value:"<code>mockFn.getMockName()</code>",id:"mockfngetmockname",level:3},{value:"<code>mockFn.mock.calls</code>",id:"mockfnmockcalls",level:3},{value:"<code>mockFn.mock.results</code>",id:"mockfnmockresults",level:3},{value:"<code>mockFn.mock.instances</code>",id:"mockfnmockinstances",level:3},{value:"<code>mockFn.mock.contexts</code>",id:"mockfnmockcontexts",level:3},{value:"<code>mockFn.mock.lastCall</code>",id:"mockfnmocklastcall",level:3},{value:"<code>mockFn.mockClear()</code>",id:"mockfnmockclear",level:3},{value:"<code>mockFn.mockReset()</code>",id:"mockfnmockreset",level:3},{value:"<code>mockFn.mockRestore()</code>",id:"mockfnmockrestore",level:3},{value:"<code>mockFn.mockImplementation(fn)</code>",id:"mockfnmockimplementationfn",level:3},{value:"<code>mockFn.mockImplementationOnce(fn)</code>",id:"mockfnmockimplementationoncefn",level:3},{value:"<code>mockFn.mockName(name)</code>",id:"mockfnmocknamename",level:3},{value:"<code>mockFn.mockReturnThis()</code>",id:"mockfnmockreturnthis",level:3},{value:"<code>mockFn.mockReturnValue(value)</code>",id:"mockfnmockreturnvaluevalue",level:3},{value:"<code>mockFn.mockReturnValueOnce(value)</code>",id:"mockfnmockreturnvalueoncevalue",level:3},{value:"<code>mockFn.mockResolvedValue(value)</code>",id:"mockfnmockresolvedvaluevalue",level:3},{value:"<code>mockFn.mockResolvedValueOnce(value)</code>",id:"mockfnmockresolvedvalueoncevalue",level:3},{value:"<code>mockFn.mockRejectedValue(value)</code>",id:"mockfnmockrejectedvaluevalue",level:3},{value:"<code>mockFn.mockRejectedValueOnce(value)</code>",id:"mockfnmockrejectedvalueoncevalue",level:3},{value:"<code>mockFn.withImplementation(fn, callback)</code>",id:"mockfnwithimplementationfn-callback",level:3},{value:"Replaced Properties",id:"replaced-properties",level:2},{value:"<code>replacedProperty.replaceValue(value)</code>",id:"replacedpropertyreplacevaluevalue",level:3},{value:"<code>replacedProperty.restore()</code>",id:"replacedpropertyrestore",level:3},{value:"TypeScript Usage",id:"typescript-usage",level:2},{value:"<code>jest.fn(implementation?)</code>",id:"jestfnimplementation",level:3},{value:"<code>jest.Mock&lt;T&gt;</code>",id:"jestmockt",level:3},{value:"<code>jest.Mocked&lt;Source&gt;</code>",id:"jestmockedsource",level:3},{value:"<code>jest.Replaced&lt;Source&gt;</code>",id:"jestreplacedsource",level:3},{value:"<code>jest.mocked(source, options?)</code>",id:"jestmockedsource-options",level:3},{value:"<code>jest.Spied&lt;Source&gt;</code>",id:"jestspiedsource",level:3}];function h(e){const n=Object.assign({p:"p",code:"code",h2:"h2",hr:"hr",h3:"h3",a:"a",pre:"pre",ul:"ul",li:"li",admonition:"admonition"},(0,o.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.p,{children:["Les fonctions simul\xe9es sont \xe9galement connues sous le nom d'\xab\xa0espions\xa0\xbb, car elles vous permettent d'espionner le comportement d'une fonction qui est appel\xe9e indirectement par un autre code, plut\xf4t que de tester uniquement la sortie. Vous pouvez cr\xe9er une fonction simul\xe9e avec ",(0,c.jsx)(n.code,{children:"jest.fn()"}),". Si aucune impl\xe9mentation n\u2019est donn\xe9e, la fonction simul\xe9e retournera ",(0,c.jsx)(n.code,{children:"undefined"})," lorsqu\u2019elle est appel\xe9e."]}),"\n","\n",(0,c.jsx)(a.ZP,{}),"\n",(0,c.jsx)(n.h2,{id:"m\xe9thodes",children:"M\xe9thodes"}),"\n","\n","\n",(0,c.jsx)(r.Z,{toc:p.slice(1)}),"\n",(0,c.jsx)(n.hr,{}),"\n",(0,c.jsx)(n.h2,{id:"r\xe9f\xe9rence",children:"R\xe9f\xe9rence"}),"\n",(0,c.jsx)(n.h3,{id:"mockfngetmockname",children:(0,c.jsx)(n.code,{children:"mockFn.getMockName()"})}),"\n",(0,c.jsxs)(n.p,{children:["Returns the mock name string set by calling ",(0,c.jsx)(n.a,{href:"#mockfnmocknamename",children:(0,c.jsx)(n.code,{children:".mockName()"})}),"."]}),"\n",(0,c.jsx)(n.h3,{id:"mockfnmockcalls",children:(0,c.jsx)(n.code,{children:"mockFn.mock.calls"})}),"\n",(0,c.jsx)(n.p,{children:"Un tableau contenant les arguments d'appel de tous les appels qui ont \xe9t\xe9 faits \xe0 cette fonction simul\xe9e. Chaque \xe9l\xe9ment du tableau est un tableau d'arguments qui ont \xe9t\xe9 pass\xe9s pendant l'appel."}),"\n",(0,c.jsxs)(n.p,{children:["Par exemple\xa0: Une fonction simul\xe9e ",(0,c.jsx)(n.code,{children:"f"})," qui a \xe9t\xe9 appel\xe9e deux fois, avec les arguments ",(0,c.jsx)(n.code,{children:"f('arg1', 'arg2')"}),", puis avec les arguments ",(0,c.jsx)(n.code,{children:"f('arg3', 'arg4')"}),", aurait un tableau ",(0,c.jsx)(n.code,{children:"mock.calls"})," qui ressemble \xe0 ceci\xa0:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"[\n  ['arg1', 'arg2'],\n  ['arg3', 'arg4'],\n];\n"})}),"\n",(0,c.jsx)(n.h3,{id:"mockfnmockresults",children:(0,c.jsx)(n.code,{children:"mockFn.mock.results"})}),"\n",(0,c.jsxs)(n.p,{children:["Un tableau contenant les r\xe9sultats de tous les appels qui ont \xe9t\xe9 faits \xe0 cette fonction simul\xe9e. Chaque entr\xe9e de ce tableau est un objet contenant une propri\xe9t\xe9 ",(0,c.jsx)(n.code,{children:"type"}),", et une propri\xe9t\xe9 ",(0,c.jsx)(n.code,{children:"value"}),". ",(0,c.jsx)(n.code,{children:"type"})," sera l'un des suivants\xa0:"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"'return'"})," - Indique que l'appel s'est termin\xe9 en retournant normalement."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"'throw'"})," - Indique que l'appel s'est termin\xe9 en levant une valeur."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"'incomplete'"})," - Indique que l'appel n'est pas encore termin\xe9. Cela se produit si vous testez le r\xe9sultat \xe0 partir de la fonction simul\xe9e elle-m\xeame, ou \xe0 partir d'une fonction qui a \xe9t\xe9 appel\xe9e par la fonction simul\xe9e."]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["La propri\xe9t\xe9 ",(0,c.jsx)(n.code,{children:"value"})," contient la valeur qui a \xe9t\xe9 lev\xe9e ou retourn\xe9e. ",(0,c.jsx)(n.code,{children:"value"})," est ind\xe9finie lorsque ",(0,c.jsx)(n.code,{children:"type === 'incomplete'"}),"."]}),"\n",(0,c.jsxs)(n.p,{children:["Par exemple\xa0: Une fonction simul\xe9e ",(0,c.jsx)(n.code,{children:"f"})," qui a \xe9t\xe9 appel\xe9e trois fois, renvoyant ",(0,c.jsx)(n.code,{children:"'result1'"}),", lan\xe7ant une erreur, puis renvoyant ",(0,c.jsx)(n.code,{children:"'result2'"}),", aurait un tableau ",(0,c.jsx)(n.code,{children:"mock.results"})," qui ressemble \xe0 ceci\xa0:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"[\n  {\n    type: 'return',\n    value: 'result1',\n  },\n  {\n    type: 'throw',\n    value: {\n      /* Error instance */\n    },\n  },\n  {\n    type: 'return',\n    value: 'result2',\n  },\n];\n"})}),"\n",(0,c.jsx)(n.h3,{id:"mockfnmockinstances",children:(0,c.jsx)(n.code,{children:"mockFn.mock.instances"})}),"\n",(0,c.jsxs)(n.p,{children:["Un tableau qui contient toutes les instances d'objet qui ont \xe9t\xe9 instanci\xe9es \xe0 partir de cette fonction simul\xe9e en utilisant ",(0,c.jsx)(n.code,{children:"new"}),"."]}),"\n",(0,c.jsxs)(n.p,{children:["Par exemple : Une fonction simul\xe9e qui a \xe9t\xe9 instanci\xe9e deux fois aurait le tableau ",(0,c.jsx)(n.code,{children:"mock.instances"})," suivant\xa0:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const mockFn = jest.fn();\n\nconst a = new mockFn();\nconst b = new mockFn();\n\nmockFn.mock.instances[0] === a; // true\nmockFn.mock.instances[1] === b; // true\n"})}),"\n",(0,c.jsx)(n.h3,{id:"mockfnmockcontexts",children:(0,c.jsx)(n.code,{children:"mockFn.mock.contexts"})}),"\n",(0,c.jsx)(n.p,{children:"Un tableau qui contient les contextes pour tous les appels de la fonction simul\xe9e."}),"\n",(0,c.jsxs)(n.p,{children:["Un contexte est la valeur ",(0,c.jsx)(n.code,{children:"this"})," qu'une fonction re\xe7oit lorsqu'elle est appel\xe9e. Le contexte peut \xeatre d\xe9fini en utilisant ",(0,c.jsx)(n.code,{children:"Function.prototype.bind"}),", ",(0,c.jsx)(n.code,{children:"Function.prototype.call"})," ou ",(0,c.jsx)(n.code,{children:"Function.prototype.apply"}),"."]}),"\n",(0,c.jsx)(n.p,{children:"Par exemple\xa0:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const mockFn = jest.fn();\n\nconst boundMockFn = mockFn.bind(thisContext0);\nboundMockFn('a', 'b');\nmockFn.call(thisContext1, 'a', 'b');\nmockFn.apply(thisContext2, ['a', 'b']);\n\nmockFn.mock.contexts[0] === thisContext0; // true\nmockFn.mock.contexts[1] === thisContext1; // true\nmockFn.mock.contexts[2] === thisContext2; // true\n"})}),"\n",(0,c.jsx)(n.h3,{id:"mockfnmocklastcall",children:(0,c.jsx)(n.code,{children:"mockFn.mock.lastCall"})}),"\n",(0,c.jsxs)(n.p,{children:["Un tableau contenant les arguments d'appel du dernier appel qui a \xe9t\xe9 fait \xe0 cette fonction simul\xe9e. Si la fonction n'a pas \xe9t\xe9 appel\xe9e, elle retournera ",(0,c.jsx)(n.code,{children:"undefined"}),"."]}),"\n",(0,c.jsxs)(n.p,{children:["Par exemple\xa0: Une fonction simul\xe9e ",(0,c.jsx)(n.code,{children:"f"})," qui a \xe9t\xe9 appel\xe9e deux fois, avec les arguments ",(0,c.jsx)(n.code,{children:"f('arg1', 'arg2')"}),", puis avec les arguments ",(0,c.jsx)(n.code,{children:"f('arg3', 'arg4')"}),", aurait un tableau ",(0,c.jsx)(n.code,{children:"mock.lastCall"})," qui ressemble \xe0 ceci\xa0:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"['arg3', 'arg4'];\n"})}),"\n",(0,c.jsx)(n.h3,{id:"mockfnmockclear",children:(0,c.jsx)(n.code,{children:"mockFn.mockClear()"})}),"\n",(0,c.jsxs)(n.p,{children:["Efface toutes les informations stock\xe9es dans les tableaux ",(0,c.jsx)(n.a,{href:"#mockfnmockcalls",children:(0,c.jsx)(n.code,{children:"mockFn.mock.calls"})}),", ",(0,c.jsx)(n.a,{href:"#mockfnmockinstances",children:(0,c.jsx)(n.code,{children:"mockFn.mock.instances"})}),", ",(0,c.jsx)(n.a,{href:"#mockfnmockcontexts",children:(0,c.jsx)(n.code,{children:"mockFn.mock.contexts"})})," et ",(0,c.jsx)(n.a,{href:"#mockfnmockresults",children:(0,c.jsx)(n.code,{children:"mockFn.mock.results"})}),". Souvent, cela est utile lorsque vous voulez nettoyer les donn\xe9es d'utilisation d'une simulation entre deux assertions."]}),"\n",(0,c.jsxs)(n.p,{children:["L'option de configuration ",(0,c.jsx)(n.a,{href:"configuration#clearmocks-boolean",children:(0,c.jsx)(n.code,{children:"clearMocks"})})," est disponible pour effacer les simulations automatiquement avant chaque test."]}),"\n",(0,c.jsx)(n.admonition,{type:"danger",children:(0,c.jsxs)(n.p,{children:["Attention, ",(0,c.jsx)(n.code,{children:"mockFn.mockClear()"})," remplacera ",(0,c.jsx)(n.code,{children:"mockFn.mock"}),", et ne se contentera pas de r\xe9initialiser les valeurs de ses propri\xe9t\xe9s\xa0! Vous devriez donc \xe9viter d'assigner ",(0,c.jsx)(n.code,{children:"mockFn.mock"})," \xe0 d'autres variables, temporaires ou non, pour \xeatre s\xfbr de ne pas acc\xe9der \xe0 des donn\xe9es p\xe9rim\xe9es."]})}),"\n",(0,c.jsx)(n.h3,{id:"mockfnmockreset",children:(0,c.jsx)(n.code,{children:"mockFn.mockReset()"})}),"\n",(0,c.jsxs)(n.p,{children:["Does everything that ",(0,c.jsx)(n.a,{href:"#mockfnmockclear",children:(0,c.jsx)(n.code,{children:"mockFn.mockClear()"})})," does, and also replaces the mock implementation with an empty function, returning ",(0,c.jsx)(n.code,{children:"undefined"}),"."]}),"\n",(0,c.jsxs)(n.p,{children:["The ",(0,c.jsx)(n.a,{href:"configuration#resetmocks-boolean",children:(0,c.jsx)(n.code,{children:"resetMocks"})})," configuration option is available to reset mocks automatically before each test."]}),"\n",(0,c.jsx)(n.h3,{id:"mockfnmockrestore",children:(0,c.jsx)(n.code,{children:"mockFn.mockRestore()"})}),"\n",(0,c.jsxs)(n.p,{children:["Fait tout ce que ",(0,c.jsx)(n.a,{href:"#mockfnmockreset",children:(0,c.jsx)(n.code,{children:"mockFn.mockReset()"})})," fait, et restaure \xe9galement l'impl\xe9mentation originale (non simul\xe9e)."]}),"\n",(0,c.jsx)(n.p,{children:"Ceci est utile lorsque vous voulez simuler des fonctions dans certains cas de test et restaurer l'impl\xe9mentation originale dans d'autres."}),"\n",(0,c.jsxs)(n.p,{children:["L'option de configuration ",(0,c.jsx)(n.a,{href:"configuration#restoremocks-boolean",children:(0,c.jsx)(n.code,{children:"restoreMocks"})})," est disponible pour restaurer les simulations automatiquement avant chaque test."]}),"\n",(0,c.jsx)(n.admonition,{type:"info",children:(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"mockFn.mockRestore()"})," only works when the mock was created with ",(0,c.jsx)(n.code,{children:"jest.spyOn()"}),". Vous devez donc vous occuper vous-m\xeame de la restauration lorsque vous assignez manuellement ",(0,c.jsx)(n.code,{children:"jest.fn()"}),"."]})}),"\n",(0,c.jsx)(n.h3,{id:"mockfnmockimplementationfn",children:(0,c.jsx)(n.code,{children:"mockFn.mockImplementation(fn)"})}),"\n",(0,c.jsx)(n.p,{children:"Accepte une fonction qui doit \xeatre utilis\xe9e comme l'impl\xe9mentation de simulation. La simulation elle-m\xeame enregistrera toujours tous les appels qui entrent et les instances qui proviennent d'elle - la seule diff\xe9rence est que l'impl\xe9mentation sera \xe9galement ex\xe9cut\xe9e lorsque la simulation est appel\xe9e."}),"\n",(0,c.jsx)(n.admonition,{title:"astuce",type:"tip",children:(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"jest.fn(impl\xe9mentation)"})," est un raccourci pour ",(0,c.jsx)(n.code,{children:"jest.fn().mockImplementation(impl\xe9mentation)"}),"."]})}),"\n",(0,c.jsxs)(t.Z,{groupId:"code-examples",children:[(0,c.jsx)(l.Z,{value:"js",label:"JavaScript",children:(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",metastring:"tab",children:"const mockFn = jest.fn(scalar => 42 + scalar);\n\nmockFn(0); // 42\nmockFn(1); // 43\n\nmockFn.mockImplementation(scalar => 36 + scalar);\n\nmockFn(2); // 38\nmockFn(3); // 39\n"})})}),(0,c.jsx)(l.Z,{value:"ts",label:"TypeScript",children:(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",metastring:"tab",children:"import {jest} from '@jest/globals';\n\nconst mockFn = jest.fn((scalar: number) => 42 + scalar);\n\nmockFn(0); // 42\nmockFn(1); // 43\n\nmockFn.mockImplementation(scalar => 36 + scalar);\n\nmockFn(2); // 38\nmockFn(3); // 39\n"})})})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:".mockImplementation()"})," peut \xe9galement \xeatre utilis\xe9 pour simuler les constructeurs de classes\xa0:"]}),"\n",(0,c.jsxs)(t.Z,{groupId:"code-examples",children:[(0,c.jsxs)(l.Z,{value:"js",label:"JavaScript",children:[(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",metastring:'tab={"span":2} title="SomeClass.js"',children:"module.exports = class SomeClass {\n  method(a, b) {}\n};\n"})}),(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",metastring:'title="SomeClass.test.js"',children:"const SomeClass = require('./SomeClass');\n\njest.mock('./SomeClass'); // cela se produit automatiquement avec l'auto-simulation\n\nconst mockMethod = jest.fn();\nSomeClass.mockImplementation(() => {\n  return {\n    method: mockMethod,\n  };\n});\n\nconst some = new SomeClass();\nsome.method('a', 'b');\n\nconsole.log('Calls to method: ', mockMethod.mock.calls);\n"})})]}),(0,c.jsxs)(l.Z,{value:"ts",label:"TypeScript",children:[(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",metastring:'tab={"span":2} title="SomeClass.ts"',children:"export class SomeClass {\n  method(a: string, b: string): void {}\n}\n"})}),(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",metastring:'title="SomeClass.test.ts"',children:"import {jest} from '@jest/globals';\nimport {SomeClass} from './SomeClass';\n\njest.mock('./SomeClass'); // this happens automatically with automocking\n\nconst mockMethod = jest.fn<(a: string, b: string) => void>();\njest.mocked(SomeClass).mockImplementation(() => {\n  return {\n    method: mockMethod,\n  };\n});\n\nconst some = new SomeClass();\nsome.method('a', 'b');\n\nconsole.log('Calls to method: ', mockMethod.mock.calls);\n"})})]})]}),"\n",(0,c.jsx)(n.h3,{id:"mockfnmockimplementationoncefn",children:(0,c.jsx)(n.code,{children:"mockFn.mockImplementationOnce(fn)"})}),"\n",(0,c.jsx)(n.p,{children:"Accepte une fonction qui sera utilis\xe9e comme une impl\xe9mentation de simulation pour un appel \xe0 la fonction simul\xe9e. Peut \xeatre encha\xeen\xe9 de sorte que plusieurs appels de fonction produisent des r\xe9sultats diff\xe9rents."}),"\n",(0,c.jsxs)(t.Z,{groupId:"code-examples",children:[(0,c.jsx)(l.Z,{value:"js",label:"JavaScript",children:(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",metastring:"tab",children:"const mockFn = jest\n  .fn()\n  .mockImplementationOnce(cb => cb(null, true))\n  .mockImplementationOnce(cb => cb(null, false));\n\nmockFn((err, val) => console.log(val)); // true\nmockFn((err, val) => console.log(val)); // false\n"})})}),(0,c.jsx)(l.Z,{value:"ts",label:"TypeScript",children:(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",metastring:"tab",children:"import {jest} from '@jest/globals';\n\nconst mockFn = jest\n  .fn<(cb: (a: null, b: boolean) => void) => void>()\n  .mockImplementationOnce(cb => cb(null, true))\n  .mockImplementationOnce(cb => cb(null, false));\n\nmockFn((err, val) => console.log(val)); // true\nmockFn((err, val) => console.log(val)); // false\n"})})})]}),"\n",(0,c.jsxs)(n.p,{children:["Lorsque la fonction simul\xe9e manque d'impl\xe9mentations d\xe9finies avec ",(0,c.jsx)(n.code,{children:".mockImplementationOnce()"}),", elle ex\xe9cutera l'impl\xe9mentation par d\xe9faut d\xe9finie avec ",(0,c.jsx)(n.code,{children:"jest.fn(() => defaultValue)"})," ou ",(0,c.jsx)(n.code,{children:".mockImplementation(() => defaultValue)"})," s'ils ont \xe9t\xe9 appel\xe9s :"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const mockFn = jest\n  .fn(() => 'par d\xe9faut')\n  .mockImplementationOnce(() => 'premier appel')\n  .mockImplementationOnce(() => 'second appel');\n\nmockFn(); // 'premier appel'\nmockFn(); // 'second appel'\nmockFn(); // 'par d\xe9faut'\nmockFn(); // 'par d\xe9faut'\n"})}),"\n",(0,c.jsx)(n.h3,{id:"mockfnmocknamename",children:(0,c.jsx)(n.code,{children:"mockFn.mockName(name)"})}),"\n",(0,c.jsxs)(n.p,{children:["Accepte une cha\xeene \xe0 utiliser dans le r\xe9sultat du test \xe0 la place de ",(0,c.jsx)(n.code,{children:"'jest.fn()'"})," pour indiquer quelle fonction simul\xe9e est r\xe9f\xe9renc\xe9e."]}),"\n",(0,c.jsx)(n.p,{children:"Par exemple\xa0:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const mockFn = jest.fn().mockName('mockedFunction');\n\n// mockFn();\nexpect(mockFn).toHaveBeenCalled();\n"})}),"\n",(0,c.jsx)(n.p,{children:"Le r\xe9sultat est cette erreur :"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"expect(mockedFunction).toHaveBeenCalled()\n\nExpected number of calls: >= 1\nReceived number of calls:    0\n"})}),"\n",(0,c.jsx)(n.h3,{id:"mockfnmockreturnthis",children:(0,c.jsx)(n.code,{children:"mockFn.mockReturnThis()"})}),"\n",(0,c.jsx)(n.p,{children:"Shorthand for:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"jest.fn(function () {\n  return this;\n});\n"})}),"\n",(0,c.jsx)(n.h3,{id:"mockfnmockreturnvaluevalue",children:(0,c.jsx)(n.code,{children:"mockFn.mockReturnValue(value)"})}),"\n",(0,c.jsx)(n.p,{children:"Shorthand for:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"jest.fn().mockImplementation(() => value);\n"})}),"\n",(0,c.jsx)(n.p,{children:"Accepte une valeur qui sera retourn\xe9e chaque fois que la fonction simul\xe9e est appel\xe9e."}),"\n",(0,c.jsxs)(t.Z,{groupId:"code-examples",children:[(0,c.jsx)(l.Z,{value:"js",label:"JavaScript",children:(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",metastring:"tab",children:"const mock = jest.fn();\n\nmock.mockReturnValue(42);\nmock(); // 42\n\nmock.mockReturnValue(43);\nmock(); // 43\n"})})}),(0,c.jsx)(l.Z,{value:"ts",label:"TypeScript",children:(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",metastring:"tab",children:"import {jest} from '@jest/globals';\n\nconst mock = jest.fn<() => number>();\n\nmock.mockReturnValue(42);\nmock(); // 42\n\nmock.mockReturnValue(43);\nmock(); // 43\n"})})})]}),"\n",(0,c.jsx)(n.h3,{id:"mockfnmockreturnvalueoncevalue",children:(0,c.jsx)(n.code,{children:"mockFn.mockReturnValueOnce(value)"})}),"\n",(0,c.jsx)(n.p,{children:"Shorthand for:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"jest.fn().mockImplementationOnce(() => value);\n"})}),"\n",(0,c.jsxs)(n.p,{children:["Accepte une valeur qui sera retourn\xe9e pour un appel \xe0 la fonction simul\xe9e. Peut \xeatre encha\xeen\xe9 de sorte que les appels successifs \xe0 la fonction simul\xe9e retournent des valeurs diff\xe9rentes. Quand il n'y a plus de valeurs ",(0,c.jsx)(n.code,{children:"mockReturnValueOnce"})," \xe0 utiliser, les appels retourneront une valeur sp\xe9cifi\xe9e par ",(0,c.jsx)(n.code,{children:"mockReturnValue"}),"."]}),"\n",(0,c.jsxs)(t.Z,{groupId:"code-examples",children:[(0,c.jsx)(l.Z,{value:"js",label:"JavaScript",children:(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",metastring:"tab",children:"const mockFn = jest\n  .fn()\n  .mockReturnValue('par d\xe9faut')\n  .mockReturnValueOnce('premier appel')\n  .mockReturnValueOnce('deuxi\xe8me appel');\n\nmockFn(); // 'premier appel'\nmockFn(); // 'deuxi\xe8me appel'\nmockFn(); // 'par d\xe9faut'\nmockFn(); // 'par d\xe9faut'\n"})})}),(0,c.jsx)(l.Z,{value:"ts",label:"TypeScript",children:(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",metastring:"tab",children:"import {jest} from '@jest/globals';\n\nconst mockFn = jest\n  .fn<() => string>()\n  .mockReturnValue('default')\n  .mockReturnValueOnce('first call')\n  .mockReturnValueOnce('second call');\n\nmockFn(); // 'first call'\nmockFn(); // 'second call'\nmockFn(); // 'default'\nmockFn(); // 'default'\n"})})})]}),"\n",(0,c.jsx)(n.h3,{id:"mockfnmockresolvedvaluevalue",children:(0,c.jsx)(n.code,{children:"mockFn.mockResolvedValue(value)"})}),"\n",(0,c.jsx)(n.p,{children:"Shorthand for:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"jest.fn().mockImplementation(() => Promise.resolve(value));\n"})}),"\n",(0,c.jsx)(n.p,{children:"Utile pour simuler les fonctions asynchrones dans les tests asynchrones\xa0:"}),"\n",(0,c.jsxs)(t.Z,{groupId:"code-examples",children:[(0,c.jsx)(l.Z,{value:"js",label:"JavaScript",children:(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",metastring:"tab",children:"test('async test', async () => {\n  const asyncMock = jest.fn().mockResolvedValue(43);\n\n  await asyncMock(); // 43\n});\n"})})}),(0,c.jsx)(l.Z,{value:"ts",label:"TypeScript",children:(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",metastring:"tab",children:"import {jest, test} from '@jest/globals';\n\ntest('async test', async () => {\n  const asyncMock = jest.fn<() => Promise<number>>().mockResolvedValue(43);\n\n  await asyncMock(); // 43\n});\n"})})})]}),"\n",(0,c.jsx)(n.h3,{id:"mockfnmockresolvedvalueoncevalue",children:(0,c.jsx)(n.code,{children:"mockFn.mockResolvedValueOnce(value)"})}),"\n",(0,c.jsx)(n.p,{children:"Shorthand for:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"jest.fn().mockImplementationOnce(() => Promise.resolve(value));\n"})}),"\n",(0,c.jsx)(n.p,{children:"Utile pour r\xe9soudre des valeurs diff\xe9rentes sur plusieurs appels asynchrones\xa0:"}),"\n",(0,c.jsxs)(t.Z,{groupId:"code-examples",children:[(0,c.jsx)(l.Z,{value:"js",label:"JavaScript",children:(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",metastring:"tab",children:"test('async test', async () => {\n  const asyncMock = jest\n    .fn()\n    .mockResolvedValue('par d\xe9faut')\n    .mockResolvedValueOnce('premier appel')\n    .mockResolvedValueOnce('deuxi\xe8me appel');\n\n  await asyncMock(); // 'premier appel'\n  await asyncMock(); // 'deuxi\xe8me appel'\n  await asyncMock(); // 'par d\xe9faut'\n  await asyncMock(); // 'par d\xe9faut'\n});\n"})})}),(0,c.jsx)(l.Z,{value:"ts",label:"TypeScript",children:(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",metastring:"tab",children:"import {jest, test} from '@jest/globals';\n\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn<() => Promise<string>>()\n    .mockResolvedValue('default')\n    .mockResolvedValueOnce('first call')\n    .mockResolvedValueOnce('second call');\n\n  await asyncMock(); // 'first call'\n  await asyncMock(); // 'second call'\n  await asyncMock(); // 'default'\n  await asyncMock(); // 'default'\n});\n"})})})]}),"\n",(0,c.jsx)(n.h3,{id:"mockfnmockrejectedvaluevalue",children:(0,c.jsx)(n.code,{children:"mockFn.mockRejectedValue(value)"})}),"\n",(0,c.jsx)(n.p,{children:"Shorthand for:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"jest.fn().mockImplementation(() => Promise.reject(value));\n"})}),"\n",(0,c.jsx)(n.p,{children:"Utile pour cr\xe9er des fonctions simul\xe9es asynchrones qui seront toujours rejet\xe9es\xa0:"}),"\n",(0,c.jsxs)(t.Z,{groupId:"code-examples",children:[(0,c.jsx)(l.Z,{value:"js",label:"JavaScript",children:(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",metastring:"tab",children:"test('async test', async () => {\n  const asyncMock = jest\n    .fn()\n    .mockRejectedValue(new Error('Async error message'));\n\n  await asyncMock(); // l\xe8ve 'Async error message'\n});\n"})})}),(0,c.jsx)(l.Z,{value:"ts",label:"TypeScript",children:(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",metastring:"tab",children:"import {jest, test} from '@jest/globals';\n\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn<() => Promise<never>>()\n    .mockRejectedValue(new Error('Async error message'));\n\n  await asyncMock(); // throws 'Async error message'\n});\n"})})})]}),"\n",(0,c.jsx)(n.h3,{id:"mockfnmockrejectedvalueoncevalue",children:(0,c.jsx)(n.code,{children:"mockFn.mockRejectedValueOnce(value)"})}),"\n",(0,c.jsx)(n.p,{children:"Shorthand for:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"jest.fn().mockImplementationOnce(() => Promise.reject(value));\n"})}),"\n",(0,c.jsxs)(n.p,{children:["Utile avec ",(0,c.jsx)(n.code,{children:".mockResolvedValueOnce()"})," ou pour rejeter avec des exceptions diff\xe9rentes sur plusieurs appels asynchrones\xa0:"]}),"\n",(0,c.jsxs)(t.Z,{groupId:"code-examples",children:[(0,c.jsx)(l.Z,{value:"js",label:"JavaScript",children:(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",metastring:"tab",children:"test('async test', async () => {\n  const asyncMock = jest\n    .fn()\n    .mockResolvedValueOnce('premier appel')\n    .mockRejectedValueOnce(new Error('Async error message'));\n\n  await asyncMock(); // 'premier appel'\n  await asyncMock(); // l\xe8ve 'Async error message'\n});\n"})})}),(0,c.jsx)(l.Z,{value:"ts",label:"TypeScript",children:(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",metastring:"tab",children:"import {jest, test} from '@jest/globals';\n\ntest('async test', async () => {\n  const asyncMock = jest\n    .fn<() => Promise<string>>()\n    .mockResolvedValueOnce('first call')\n    .mockRejectedValueOnce(new Error('Async error message'));\n\n  await asyncMock(); // 'first call'\n  await asyncMock(); // throws 'Async error message'\n});\n"})})})]}),"\n",(0,c.jsx)(n.h3,{id:"mockfnwithimplementationfn-callback",children:(0,c.jsx)(n.code,{children:"mockFn.withImplementation(fn, callback)"})}),"\n",(0,c.jsx)(n.p,{children:"Accepts a function which should be temporarily used as the implementation of the mock while the callback is being executed."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"test('test', () => {\n  const mock = jest.fn(() => 'outside callback');\n\n  mock.withImplementation(\n    () => 'inside callback',\n    () => {\n      mock(); // 'inside callback'\n    },\n  );\n\n  mock(); // 'outside callback'\n});\n"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"mockFn.withImplementation"})," can be used regardless of whether or not the callback is asynchronous (returns a ",(0,c.jsx)(n.code,{children:"thenable"}),"). If the callback is asynchronous a promise will be returned. Awaiting the promise will await the callback and reset the implementation."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"test('async test', async () => {\n  const mock = jest.fn(() => 'outside callback');\n\n  // We await this call since the callback is async\n  await mock.withImplementation(\n    () => 'inside callback',\n    async () => {\n      mock(); // 'inside callback'\n    },\n  );\n\n  mock(); // 'outside callback'\n});\n"})}),"\n",(0,c.jsx)(n.h2,{id:"replaced-properties",children:"Replaced Properties"}),"\n",(0,c.jsx)(n.h3,{id:"replacedpropertyreplacevaluevalue",children:(0,c.jsx)(n.code,{children:"replacedProperty.replaceValue(value)"})}),"\n",(0,c.jsxs)(n.p,{children:["Changes the value of already replaced property. This is useful when you want to replace property and then adjust the value in specific tests. As an alternative, you can call ",(0,c.jsx)(n.a,{href:"/fr/docs/29.4/jest-object#jestreplacepropertyobject-propertykey-value",children:(0,c.jsx)(n.code,{children:"jest.replaceProperty()"})})," multiple times on same property."]}),"\n",(0,c.jsx)(n.h3,{id:"replacedpropertyrestore",children:(0,c.jsx)(n.code,{children:"replacedProperty.restore()"})}),"\n",(0,c.jsx)(n.p,{children:"Restores object's property to the original value."}),"\n",(0,c.jsxs)(n.p,{children:["Beware that ",(0,c.jsx)(n.code,{children:"replacedProperty.restore()"})," only works when the property value was replaced with ",(0,c.jsx)(n.a,{href:"/fr/docs/29.4/jest-object#jestreplacepropertyobject-propertykey-value",children:(0,c.jsx)(n.code,{children:"jest.replaceProperty()"})}),"."]}),"\n",(0,c.jsxs)(n.p,{children:["The ",(0,c.jsx)(n.a,{href:"configuration#restoremocks-boolean",children:(0,c.jsx)(n.code,{children:"restoreMocks"})})," configuration option is available to restore replaced properties automatically before each test."]}),"\n",(0,c.jsx)(n.h2,{id:"typescript-usage",children:"TypeScript Usage"}),"\n",(0,c.jsx)(a.ZP,{}),"\n",(0,c.jsx)(n.h3,{id:"jestfnimplementation",children:(0,c.jsx)(n.code,{children:"jest.fn(implementation?)"})}),"\n",(0,c.jsxs)(n.p,{children:["Les typages simul\xe9s corrects seront d\xe9duits, si l'impl\xe9mentation est pass\xe9e \xe0 la fonction ",(0,c.jsx)(n.a,{href:"/fr/docs/29.4/jest-object#jestfnimplementation",children:(0,c.jsx)(n.code,{children:"jest.fn()"})}),". Il existe de nombreux cas d'utilisation o\xf9 l'impl\xe9mentation est omise. Pour assurer la s\xe9curit\xe9 des types, vous pouvez passer un argument de type g\xe9n\xe9rique (voir aussi les exemples ci-dessus pour plus de r\xe9f\xe9rence)\xa0:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",children:"import {expect, jest, test} from '@jest/globals';\nimport type add from './add';\nimport calculate from './calc';\n\ntest('calculate appelle add', () => {\n  // Cr\xe9e une nouvelle simulation qui peut \xeatre utilis\xe9 \xe0 la place de `add`.\n  const mockAdd = jest.fn<typeof add>();\n\n  // `.mockImplementation()` peut maintenant d\xe9duire que `a` et `b` sont des `number`\n  // et que la valeur renvoy\xe9e est un `number`.\n  mockAdd.mockImplementation((a, b) => {\n    // Oui, cette fonction simul\xe9e ajoute toujours deux nombres mais imaginez que\n    // c'est une fonction complexe que nous simulons.\n    return  a + b\n  });\n\n  // `mockAdd` est correctement typ\xe9 et donc accept\xe9 par tout\n  //  ce que requiert `add`.\n  calculate(mockAdd, 1, 2);\n\n  expect(mockAdd).toHaveBeenCalledTimes(1);\n  expect(mockAdd).toHaveBeenCalledWith(1, 2);\n});\n"})}),"\n",(0,c.jsx)(n.h3,{id:"jestmockt",children:(0,c.jsx)(n.code,{children:"jest.Mock<T>"})}),"\n",(0,c.jsxs)(n.p,{children:["Constructs the type of a mock function, e.g. the return type of ",(0,c.jsx)(n.code,{children:"jest.fn()"}),". It can be useful if you have to defined a recursive mock function:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",children:"import {jest} from '@jest/globals';\n\nconst sumRecursively: jest.Mock<(value: number) => number> = jest.fn(value => {\n  if (value === 0) {\n    return 0;\n  } else {\n    return value + fn(value - 1);\n  }\n});\n"})}),"\n",(0,c.jsx)(n.h3,{id:"jestmockedsource",children:(0,c.jsx)(n.code,{children:"jest.Mocked<Source>"})}),"\n",(0,c.jsxs)(n.p,{children:["The ",(0,c.jsx)(n.code,{children:"jest.Mocked<Source>"})," utility type returns the ",(0,c.jsx)(n.code,{children:"Source"})," type wrapped with type definitions of Jest mock function."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",children:"import {expect, jest, test} from '@jest/globals';\nimport type {fetch} from 'node-fetch';\n\njest.mock('node-fetch');\n\nlet mockedFetch: jest.Mocked<typeof fetch>;\n\nafterEach(() => {\n  mockedFetch.mockClear();\n});\n\ntest('makes correct call', () => {\n  mockedFetch = getMockedFetch();\n  // ...\n});\n\ntest('returns correct data', () => {\n  mockedFetch = getMockedFetch();\n  // ...\n});\n"})}),"\n",(0,c.jsxs)(n.p,{children:["Types of classes, functions or objects can be passed as type argument to ",(0,c.jsx)(n.code,{children:"jest.Mocked<Source>"}),". If you prefer to constrain the input type, use: ",(0,c.jsx)(n.code,{children:"jest.MockedClass<Source>"}),", ",(0,c.jsx)(n.code,{children:"jest.MockedFunction<Source>"})," or ",(0,c.jsx)(n.code,{children:"jest.MockedObject<Source>"}),"."]}),"\n",(0,c.jsx)(n.h3,{id:"jestreplacedsource",children:(0,c.jsx)(n.code,{children:"jest.Replaced<Source>"})}),"\n",(0,c.jsxs)(n.p,{children:["The ",(0,c.jsx)(n.code,{children:"jest.Replaced<Source>"})," utility type returns the ",(0,c.jsx)(n.code,{children:"Source"})," type wrapped with type definitions of Jest ",(0,c.jsx)(n.a,{href:"#replaced-properties",children:"replaced property"}),"."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",metastring:'title="src/utils.ts"',children:"export function isLocalhost(): boolean {\n  return process.env['HOSTNAME'] === 'localhost';\n}\n"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",metastring:'title="src/__tests__/utils.test.ts"',children:"import {afterEach, expect, it, jest} from '@jest/globals';\nimport {isLocalhost} from '../utils';\n\nlet replacedEnv: jest.Replaced<typeof process.env> | undefined = undefined;\n\nafterEach(() => {\n  replacedEnv?.restore();\n});\n\nit('isLocalhost should detect localhost environment', () => {\n  replacedEnv = jest.replaceProperty(process, 'env', {HOSTNAME: 'localhost'});\n\n  expect(isLocalhost()).toBe(true);\n});\n\nit('isLocalhost should detect non-localhost environment', () => {\n  replacedEnv = jest.replaceProperty(process, 'env', {HOSTNAME: 'example.com'});\n\n  expect(isLocalhost()).toBe(false);\n});\n"})}),"\n",(0,c.jsx)(n.h3,{id:"jestmockedsource-options",children:(0,c.jsx)(n.code,{children:"jest.mocked(source, options?)"})}),"\n",(0,c.jsxs)(n.p,{children:["The ",(0,c.jsx)(n.code,{children:"mocked()"})," helper method wraps types of the ",(0,c.jsx)(n.code,{children:"source"})," object and its deep nested members with type definitions of Jest mock function. You can pass ",(0,c.jsx)(n.code,{children:"{shallow: true}"})," as the ",(0,c.jsx)(n.code,{children:"options"})," argument to disable the deeply mocked behavior."]}),"\n",(0,c.jsxs)(n.p,{children:["Returns the ",(0,c.jsx)(n.code,{children:"source"})," object."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",metastring:'title="song.ts"',children:"export const song = {\n  one: {\n    more: {\n      time: (t: number) => {\n        return t;\n      },\n    },\n  },\n};\n"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",metastring:'title="song.test.ts"',children:"import {expect, jest, test} from '@jest/globals';\nimport {song} from './song';\n\njest.mock('./song');\njest.spyOn(console, 'log');\n\nconst mockedSong = jest.mocked(song);\n// or through `jest.Mocked<Source>`\n// const mockedSong = song as jest.Mocked<typeof song>;\n\ntest('deep method is typed correctly', () => {\n  mockedSong.one.more.time.mockReturnValue(12);\n\n  expect(mockedSong.one.more.time(10)).toBe(12);\n  expect(mockedSong.one.more.time.mock.calls).toHaveLength(1);\n});\n\ntest('direct usage', () => {\n  jest.mocked(console.log).mockImplementation(() => {\n    return;\n  });\n\n  console.log('one more time');\n\n  expect(jest.mocked(console.log).mock.calls).toHaveLength(1);\n});\n"})}),"\n",(0,c.jsx)(n.h3,{id:"jestspiedsource",children:(0,c.jsx)(n.code,{children:"jest.Spied<Source>"})}),"\n",(0,c.jsxs)(n.p,{children:["Constructs the type of a spied class or function (i.e. the return type of ",(0,c.jsx)(n.code,{children:"jest.spyOn()"}),")."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",metastring:'title="__utils__/setDateNow.ts"',children:"import {jest} from '@jest/globals';\n\nexport function setDateNow(now: number): jest.Spied<typeof Date.now> {\n  return jest.spyOn(Date, 'now').mockReturnValue(now);\n}\n"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",children:"import {afterEach, expect, jest, test} from '@jest/globals';\nimport {setDateNow} from './__utils__/setDateNow';\n\nlet spiedDateNow: jest.Spied<typeof Date.now> | undefined = undefined;\n\nafterEach(() => {\n  spiedDateNow?.mockReset();\n});\n\ntest('renders correctly with a given date', () => {\n  spiedDateNow = setDateNow(1482363367071);\n  // ...\n\n  expect(spiedDateNow).toHaveBeenCalledTimes(1);\n});\n"})}),"\n",(0,c.jsxs)(n.p,{children:["Types of a class or function can be passed as type argument to ",(0,c.jsx)(n.code,{children:"jest.Spied<Source>"}),". If you prefer to constrain the input type, use: ",(0,c.jsx)(n.code,{children:"jest.SpiedClass<Source>"})," or ",(0,c.jsx)(n.code,{children:"jest.SpiedFunction<Source>"}),"."]}),"\n",(0,c.jsxs)(n.p,{children:["Use ",(0,c.jsx)(n.code,{children:"jest.SpiedGetter<Source>"})," or ",(0,c.jsx)(n.code,{children:"jest.SpiedSetter<Source>"})," to create the type of a spied getter or setter respectively."]})]})}const j=function(e={}){const{wrapper:n}=Object.assign({},(0,o.ah)(),e.components);return n?(0,c.jsx)(n,Object.assign({},e,{children:(0,c.jsx)(h,e)})):h(e)}},4191:(e,n,s)=>{s.d(n,{ZP:()=>l});var c=s(4246),o=s(1670);function t(e){const n=Object.assign({admonition:"admonition",p:"p",pre:"pre",code:"code",a:"a"},(0,o.ah)(),e.components);return(0,c.jsxs)(n.admonition,{type:"info",children:[(0,c.jsx)(n.p,{children:"Les exemples TypeScript de cette page ne fonctionneront comme document\xe9 que si vous importez explicitement les API Jest\xa0:"}),(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",children:"import {expect, jest, test} from '@jest/globals';\n"})}),(0,c.jsxs)(n.p,{children:["Veuillez consulter le guide ",(0,c.jsx)(n.a,{href:"/fr/docs/29.4/getting-started#using-typescript",children:"Premiers pas"})," pour plus de d\xe9tails sur la fa\xe7on de configurer Jest avec TypeScript."]})]})}const l=function(e={}){const{wrapper:n}=Object.assign({},(0,o.ah)(),e.components);return n?(0,c.jsx)(n,Object.assign({},e,{children:(0,c.jsx)(t,e)})):t(e)}}}]);