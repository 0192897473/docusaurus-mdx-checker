"use strict";(self.webpackChunkjest_website=self.webpackChunkjest_website||[]).push([[3079],{3517:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var n=t(4246),o=t(1670);const r={id:"bypassing-module-mocks",title:"Contournement des modules simul\xe9s"},c=void 0,i={unversionedId:"bypassing-module-mocks",id:"version-29.4/bypassing-module-mocks",title:"Contournement des modules simul\xe9s",description:"Jest vous permet de simuler des modules entiers dans vos tests, ce qui peut \xeatre utile pour v\xe9rifier si votre code appelle correctement les fonctions de ce module. Cependant, vous souhaitez parfois utiliser des parties d'un module simul\xe9 dans votre fichier de test, auquel cas vous souhaitez acc\xe9der \xe0 l'impl\xe9mentation originale, plut\xf4t qu'\xe0 une version simul\xe9e.",source:"@site/i18n/fr/docusaurus-plugin-content-docs/version-29.4/BypassingModuleMocks.md",sourceDirName:".",slug:"/bypassing-module-mocks",permalink:"/fr/docs/29.4/bypassing-module-mocks",draft:!1,unlisted:!1,editUrl:"https://crowdin.com/project/jest-v2/fr",tags:[],version:"29.4",frontMatter:{id:"bypassing-module-mocks",title:"Contournement des modules simul\xe9s"},sidebar:"docs",previous:{title:"Simulations de classe ES6",permalink:"/fr/docs/29.4/es6-class-mocks"},next:{title:"Modules ECMAScript",permalink:"/fr/docs/29.4/ecmascript-modules"}},a={},d=[];function l(e){const s=Object.assign({p:"p",em:"em",code:"code",pre:"pre"},(0,o.ah)(),e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(s.p,{children:["Jest vous permet de simuler des modules entiers dans vos tests, ce qui peut \xeatre utile pour v\xe9rifier si votre code appelle correctement les fonctions de ce module. Cependant, vous souhaitez parfois utiliser des parties d'un module simul\xe9 dans votre ",(0,n.jsx)(s.em,{children:"fichier de test"}),", auquel cas vous souhaitez acc\xe9der \xe0 l'impl\xe9mentation originale, plut\xf4t qu'\xe0 une version simul\xe9e."]}),"\n",(0,n.jsxs)(s.p,{children:["Consid\xe9rons l'\xe9criture d'un sc\xe9nario de test pour cette fonction ",(0,n.jsx)(s.code,{children:"createUser"}),"\xa0:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-javascript",metastring:'title="createUser.js"',children:"import fetch from 'node-fetch';\n\nexport const createUser = async () => {\n  const response = await fetch('https://website.com/users', {method: 'POST'});\n  const userId = await response.text();\n  return userId;\n};\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Votre test devra simuler la fonction ",(0,n.jsx)(s.code,{children:"fetch"})," afin de s'assurer qu'elle est appel\xe9e sans effectuer la requ\xeate r\xe9seau. Cependant, vous devrez \xe9galement simuler la valeur de retour de ",(0,n.jsx)(s.code,{children:"fetch"})," avec un ",(0,n.jsx)(s.code,{children:"Response"})," (envelopp\xe9 dans une ",(0,n.jsx)(s.code,{children:"Promesse"}),"), car notre fonction l'utilise pour r\xe9cup\xe9rer l'ID de l'utilisateur cr\xe9\xe9. Vous pouvez donc, dans un premier temps, essayer d'\xe9crire un test comme celui-ci\xa0:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-javascript",children:"jest.mock('node-fetch');\n\nimport fetch, {Response} from 'node-fetch';\nimport {createUser} from './createUser';\n\ntest('createUser appelle fetch avec les bons arguments et retourne l\\'ID de l\\'utilisateur', async () => {\n  fetch.mockReturnValue(Promise.resolve(new Response('4')));\n\n  const userId = await createUser();\n\n  expect(fetch).toHaveBeenCalledTimes(1);\n  expect(fetch).toHaveBeenCalledWith('https://website.com/users', {\n    method: 'POST',\n  });\n  expect(userId).toBe('4');\n});\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Cependant, si vous ex\xe9cutez ce test, vous constaterez que la fonction ",(0,n.jsx)(s.code,{children:"createUser"})," \xe9choue, lan\xe7ant l'erreur\xa0: ",(0,n.jsx)(s.code,{children:"TypeError\xa0: response.text is not a function"}),". Cela est d\xfb au fait que la classe ",(0,n.jsx)(s.code,{children:"Response"})," que vous avez import\xe9e de ",(0,n.jsx)(s.code,{children:"node-fetch"})," a \xe9t\xe9 simul\xe9e (en raison de l'appel ",(0,n.jsx)(s.code,{children:"jest.mock"})," en haut du fichier de test) et ne se comporte donc plus comme elle le devrait."]}),"\n",(0,n.jsxs)(s.p,{children:["Pour contourner de tels probl\xe8mes, Jest fournit la fonction d'aide ",(0,n.jsx)(s.code,{children:"jest.requireActual"}),". Pour que le test ci-dessus fonctionne, apportez la modification suivante aux importations dans le fichier de test\xa0:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-javascript",children:"// AVANT\njest.mock('node-fetch');\nimport fetch, {Response} from 'node-fetch';\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-javascript",children:"// APRES\njest.mock('node-fetch');\nimport fetch from 'node-fetch';\nconst {Response} = jest.requireActual('node-fetch');\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Cela permet \xe0 votre fichier de test d'importer l'objet ",(0,n.jsx)(s.code,{children:"Response"})," r\xe9el de ",(0,n.jsx)(s.code,{children:"node-fetch"}),", plut\xf4t qu'une version simul\xe9e. Cela signifie que le test va maintenant passer correctement."]})]})}const u=function(e={}){const{wrapper:s}=Object.assign({},(0,o.ah)(),e.components);return s?(0,n.jsx)(s,Object.assign({},e,{children:(0,n.jsx)(l,e)})):l(e)}},1670:(e,s,t)=>{t.d(s,{Zo:()=>i,ah:()=>r});var n=t(7378);const o=n.createContext({});function r(e){const s=n.useContext(o);return n.useMemo((()=>"function"==typeof e?e(s):{...s,...e}),[s,e])}const c={};function i({components:e,children:s,disableParentContext:t}){let i;return i=t?"function"==typeof e?e({}):e||c:r(e),n.createElement(o.Provider,{value:i},s)}}}]);