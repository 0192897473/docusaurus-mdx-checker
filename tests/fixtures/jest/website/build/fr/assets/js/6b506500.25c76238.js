"use strict";(self.webpackChunkjest_website=self.webpackChunkjest_website||[]).push([[9234],{2620:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>h,contentTitle:()=>d,default:()=>m,frontMatter:()=>l,metadata:()=>u,toc:()=>p});var t=s(4246),r=s(1670),o=s(8447),i=s(2599),a=s(5926),c=s(6294);const l={id:"expect",title:"Expect"},d=void 0,u={unversionedId:"expect",id:"expect",title:"Expect",description:"Lorsque vous \xe9crivez des tests, vous devez souvent v\xe9rifier que les valeurs remplissent certaines conditions. expect vous donne acc\xe8s \xe0 un certain nombre de \xab\xa0comparateurs\xa0\xbb qui vous permettent de valider diff\xe9rentes choses.",source:"@site/i18n/fr/docusaurus-plugin-content-docs/current/ExpectAPI.md",sourceDirName:".",slug:"/expect",permalink:"/fr/docs/next/expect",draft:!1,unlisted:!1,editUrl:"https://crowdin.com/project/jest-v2/fr",tags:[],version:"current",frontMatter:{id:"expect",title:"Expect"},sidebar:"api",previous:{title:"Globals",permalink:"/fr/docs/next/api"},next:{title:"Fonctions simul\xe9es",permalink:"/fr/docs/next/mock-function-api"}},h={},p=[{value:"R\xe9f\xe9rence",id:"r\xe9f\xe9rence",level:2},{value:"Expect",id:"expect",level:2},{value:"<code>expect(value)</code>",id:"expectvalue",level:3},{value:"Modifiers",id:"modifiers",level:2},{value:"<code>.not</code>",id:"not",level:3},{value:"<code>.resolves</code>",id:"resolves",level:3},{value:"<code>.rejects</code>",id:"rejects",level:3},{value:"Matchers",id:"matchers",level:2},{value:"<code>.toBe(value)</code>",id:"tobevalue",level:3},{value:"<code>.toHaveBeenCalled()</code>",id:"tohavebeencalled",level:3},{value:"<code>.toHaveBeenCalledTimes(number)</code>",id:"tohavebeencalledtimesnumber",level:3},{value:"<code>.toHaveBeenCalledWith(arg1, arg2, ...)</code>",id:"tohavebeencalledwitharg1-arg2-",level:3},{value:"<code>.toHaveBeenLastCalledWith(arg1, arg2, ...)</code>",id:"tohavebeenlastcalledwitharg1-arg2-",level:3},{value:"<code>.toHaveBeenNthCalledWith(nthCall, arg1, arg2, ....)</code>",id:"tohavebeennthcalledwithnthcall-arg1-arg2-",level:3},{value:"<code>.toHaveReturned()</code>",id:"tohavereturned",level:3},{value:"<code>.toHaveReturnedTimes(number)</code>",id:"tohavereturnedtimesnumber",level:3},{value:"<code>.toHaveReturnedWith(value)</code>",id:"tohavereturnedwithvalue",level:3},{value:"<code>.toHaveLastReturnedWith(value)</code>",id:"tohavelastreturnedwithvalue",level:3},{value:"<code>.toHaveNthReturnedWith(nthCall, value)</code>",id:"tohaventhreturnedwithnthcall-value",level:3},{value:"<code>.toHaveLength(number)</code>",id:"tohavelengthnumber",level:3},{value:"<code>.toHaveProperty(keyPath, value?)</code>",id:"tohavepropertykeypath-value",level:3},{value:"<code>.toBeCloseTo(number, numDigits?)</code>",id:"tobeclosetonumber-numdigits",level:3},{value:"<code>.toBeDefined()</code>",id:"tobedefined",level:3},{value:"<code>.toBeFalsy()</code>",id:"tobefalsy",level:3},{value:"<code>.toBeGreaterThan(number | bigint)</code>",id:"tobegreaterthannumber--bigint",level:3},{value:"<code>.toBeGreaterThanOrEqual(number | bigint)</code>",id:"tobegreaterthanorequalnumber--bigint",level:3},{value:"<code>.toBeLessThan(number | bigint)</code>",id:"tobelessthannumber--bigint",level:3},{value:"<code>.toBeLessThanOrEqual(number | bigint)</code>",id:"tobelessthanorequalnumber--bigint",level:3},{value:"<code>.toBeInstanceOf(Class)</code>",id:"tobeinstanceofclass",level:3},{value:"<code>.toBeNull()</code>",id:"tobenull",level:3},{value:"<code>.toBeTruthy()</code>",id:"tobetruthy",level:3},{value:"<code>.toBeUndefined()</code>",id:"tobeundefined",level:3},{value:"<code>.toBeNaN()</code>",id:"tobenan",level:3},{value:"<code>.toContain(item)</code>",id:"tocontainitem",level:3},{value:"<code>.toContainEqual(item)</code>",id:"tocontainequalitem",level:3},{value:"<code>.toEqual(value)</code>",id:"toequalvalue",level:3},{value:"<code>.toMatch(regexp | string)</code>",id:"tomatchregexp--string",level:3},{value:"<code>.toMatchObject(object)</code>",id:"tomatchobjectobject",level:3},{value:"<code>.toMatchSnapshot(propertyMatchers?, hint?)</code>",id:"tomatchsnapshotpropertymatchers-hint",level:3},{value:"<code>.toMatchInlineSnapshot(propertyMatchers?, inlineSnapshot)</code>",id:"tomatchinlinesnapshotpropertymatchers-inlinesnapshot",level:3},{value:"<code>.toStrictEqual(value)</code>",id:"tostrictequalvalue",level:3},{value:"<code>.toThrow(error?)</code>",id:"tothrowerror",level:3},{value:"<code>.toThrowErrorMatchingSnapshot(hint?)</code>",id:"tothrowerrormatchingsnapshothint",level:3},{value:"<code>.toThrowErrorMatchingInlineSnapshot(inlineSnapshot)</code>",id:"tothrowerrormatchinginlinesnapshotinlinesnapshot",level:3},{value:"Asymmetric Matchers",id:"asymmetric-matchers",level:2},{value:"<code>expect.anything()</code>",id:"expectanything",level:3},{value:"<code>expect.any(constructor)</code>",id:"expectanyconstructor",level:3},{value:"<code>expect.arrayContaining(array)</code>",id:"expectarraycontainingarray",level:3},{value:"<code>expect.not.arrayContaining(array)</code>",id:"expectnotarraycontainingarray",level:3},{value:"<code>expect.closeTo(number, numDigits?)</code>",id:"expectclosetonumber-numdigits",level:3},{value:"<code>expect.objectContaining(object)</code>",id:"expectobjectcontainingobject",level:3},{value:"<code>expect.not.objectContaining(object)</code>",id:"expectnotobjectcontainingobject",level:3},{value:"<code>expect.stringContaining(string)</code>",id:"expectstringcontainingstring",level:3},{value:"<code>expect.not.stringContaining(string)</code>",id:"expectnotstringcontainingstring",level:3},{value:"<code>expect.stringMatching(string | regexp)</code>",id:"expectstringmatchingstring--regexp",level:3},{value:"<code>expect.not.stringMatching(string | regexp)</code>",id:"expectnotstringmatchingstring--regexp",level:3},{value:"Assertion Count",id:"assertion-count",level:2},{value:"<code>expect.assertions(number)</code>",id:"expectassertionsnumber",level:3},{value:"<code>expect.hasAssertions()</code>",id:"expecthasassertions",level:3},{value:"Extend Utilities",id:"extend-utilities",level:2},{value:"<code>expect.addEqualityTesters(testers)</code>",id:"expectaddequalitytesterstesters",level:3},{value:"Custom equality testers API",id:"custom-equality-testers-api",level:4},{value:"<code>this.equals(a, b, customTesters?)</code>",id:"thisequalsa-b-customtesters",level:4},{value:"Matchers vs Testers",id:"matchers-vs-testers",level:4},{value:"Recursive custom equality testers",id:"recursive-custom-equality-testers",level:4},{value:"<code>expect.addSnapshotSerializer(serializer)</code>",id:"expectaddsnapshotserializerserializer",level:3},{value:"<code>expect.extend(matchers)</code>",id:"expectextendmatchers",level:3},{value:"Async Matchers",id:"async-matchers",level:4},{value:"Custom Matchers API",id:"custom-matchers-api",level:4},{value:"<code>this.isNot</code>",id:"thisisnot",level:4},{value:"<code>this.promise</code>",id:"thispromise",level:4},{value:"<code>this.equals(a, b, customTesters?)</code>",id:"thisequalsa-b-customtesters-1",level:4},{value:"<code>this.expand</code>",id:"thisexpand",level:4},{value:"<code>this.utils</code>",id:"thisutils",level:4},{value:"<code>this.customTesters</code>",id:"thiscustomtesters",level:4},{value:"Custom snapshot matchers",id:"custom-snapshot-matchers",level:4},{value:"async",id:"async",level:4},{value:"Bail out",id:"bail-out",level:4}];function x(e){const n=Object.assign({p:"p",code:"code",admonition:"admonition",a:"a",h2:"h2",hr:"hr",h3:"h3",pre:"pre",strong:"strong",ul:"ul",li:"li",em:"em",h4:"h4"},(0,r.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Lorsque vous \xe9crivez des tests, vous devez souvent v\xe9rifier que les valeurs remplissent certaines conditions. ",(0,t.jsx)(n.code,{children:"expect"})," vous donne acc\xe8s \xe0 un certain nombre de \xab\xa0comparateurs\xa0\xbb qui vous permettent de valider diff\xe9rentes choses."]}),"\n",(0,t.jsx)(n.admonition,{title:"astuce",type:"tip",children:(0,t.jsxs)(n.p,{children:["For additional Jest matchers maintained by the Jest Community check out ",(0,t.jsx)(n.a,{href:"https://github.com/jest-community/jest-extended",children:(0,t.jsx)(n.code,{children:"jest-extended"})}),"."]})}),"\n","\n",(0,t.jsx)(a.ZP,{}),"\n",(0,t.jsx)(n.h2,{id:"r\xe9f\xe9rence",children:"R\xe9f\xe9rence"}),"\n","\n","\n",(0,t.jsx)(c.Z,{toc:p.slice(1)}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"expect",children:"Expect"}),"\n",(0,t.jsx)(n.h3,{id:"expectvalue",children:(0,t.jsx)(n.code,{children:"expect(value)"})}),"\n",(0,t.jsxs)(n.p,{children:["La fonction ",(0,t.jsx)(n.code,{children:"expect"})," est utilis\xe9e \xe0 chaque fois que vous souhaitez tester une valeur. Vous appellerez rarement ",(0,t.jsx)(n.code,{children:"expect"})," par lui-m\xeame. Au lieu de cela, vous utiliserez ",(0,t.jsx)(n.code,{children:"expect"})," avec une fonction \xab\xa0comparateur\xa0\xbb pour v\xe9rifier quelque chose sur une valeur."]}),"\n",(0,t.jsxs)(n.p,{children:["Il est plus facile de comprendre cela avec un exemple. Supposons que vous ayez une m\xe9thode ",(0,t.jsx)(n.code,{children:"bestLaCroixFlavor()"})," qui est cens\xe9e renvoyer la cha\xeene ",(0,t.jsx)(n.code,{children:"'grapefruit'"}),". Voici comment vous pourriez tester cela\xa0:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"test('la meilleure saveur est le pamplemousse', () => {\n  expect(bestLaCroixFlavor()).toBe('grapefruit');\n});\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Dans ce cas, ",(0,t.jsx)(n.code,{children:"toBe"})," est la fonction comparateur. Il existe un grand nombre de fonctions comparateur diff\xe9rentes, document\xe9es ci-dessous, pour vous aider \xe0 tester diff\xe9rentes choses."]}),"\n",(0,t.jsxs)(n.p,{children:["L'argument de ",(0,t.jsx)(n.code,{children:"expect"})," doit \xeatre la valeur que votre code produit, et le param\xe8tre du comparateur doit \xeatre la valeur correcte. Si vous les confondez, vos tests fonctionneront toujours, mais les messages d'erreur des tests qui \xe9chouent seront \xe9tranges."]}),"\n",(0,t.jsx)(n.h2,{id:"modifiers",children:"Modifiers"}),"\n",(0,t.jsx)(n.h3,{id:"not",children:(0,t.jsx)(n.code,{children:".not"})}),"\n",(0,t.jsxs)(n.p,{children:["Si vous savez comment tester quelque chose, ",(0,t.jsx)(n.code,{children:".not"})," vous permet de tester son oppos\xe9. Par exemple, ce code teste que le meilleur go\xfbt de La Croix n'est pas coconut :"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"test('la meilleure saveur n\\'est pas coconut', () => {\n  expect(bestLaCroixFlavor()).not.toBe('coconut');\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"resolves",children:(0,t.jsx)(n.code,{children:".resolves"})}),"\n",(0,t.jsxs)(n.p,{children:["Utilisez ",(0,t.jsx)(n.code,{children:"resolves"})," pour d\xe9baller la valeur d'une promesse remplie afin que tout autre comparateur puisse \xeatre encha\xeen\xe9. Si la promesse est rejet\xe9e, l'assertion \xe9choue."]}),"\n",(0,t.jsxs)(n.p,{children:["Par exemple, ce code teste que la promesse se r\xe9sout et que la valeur r\xe9sultante est ",(0,t.jsx)(n.code,{children:"'lemon'"})," :"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"test('resolves to lemon', () => {\n  // assurez-vous d'ajouter une instruction return\n  return expect(Promise.resolve('lemon')).resolves.toBe('lemon');\n});\n"})}),"\n",(0,t.jsxs)(n.admonition,{title:"remarque",type:"note",children:[(0,t.jsxs)(n.p,{children:["Since you are still testing promises, the test is still asynchronous. Par cons\xe9quent, vous devrez ",(0,t.jsx)(n.a,{href:"/fr/docs/next/asynchronous#promises",children:"dire \xe0 Jest d'attendre"})," en retournant l'assertion non envelopp\xe9e."]}),(0,t.jsxs)(n.p,{children:["Alternativement, vous pouvez utiliser ",(0,t.jsx)(n.code,{children:"async/wait"})," en combinaison avec ",(0,t.jsx)(n.code,{children:".resolves"}),"\xa0:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"test('resolves to lemon', async () => {\n  await expect(Promise.resolve('lemon')).resolves.toBe('lemon');\n  await expect(Promise.resolve('lemon')).resolves.not.toBe('octopus');\n});\n"})})]}),"\n",(0,t.jsx)(n.h3,{id:"rejects",children:(0,t.jsx)(n.code,{children:".rejects"})}),"\n",(0,t.jsxs)(n.p,{children:["Utilisez ",(0,t.jsx)(n.code,{children:".rejects"})," pour d\xe9baller la raison d'une promesse rejet\xe9e afin que tout autre comparateur puisse \xeatre encha\xeen\xe9. Si la promesse est remplie, l'assertion \xe9choue."]}),"\n",(0,t.jsxs)(n.p,{children:["Par exemple, ce code teste que la promesse rejette avec la raison ",(0,t.jsx)(n.code,{children:"'octopus'"}),"\xa0:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"test('rejects to octopus', () => {\n  // assurez-vous d'ajouter une instruction return\n  return expect(Promise.reject(new Error('octopus'))).rejects.toThrow(\n    'octopus',\n  );\n});\n"})}),"\n",(0,t.jsxs)(n.admonition,{title:"remarque",type:"note",children:[(0,t.jsxs)(n.p,{children:["Since you are still testing promises, the test is still asynchronous. Par cons\xe9quent, vous devrez ",(0,t.jsx)(n.a,{href:"/fr/docs/next/asynchronous#promises",children:"dire \xe0 Jest d'attendre"})," en retournant l'assertion non envelopp\xe9e."]}),(0,t.jsxs)(n.p,{children:["Alternativement, vous pouvez utiliser ",(0,t.jsx)(n.code,{children:"async/wait"})," en combinaison avec ",(0,t.jsx)(n.code,{children:".rejects"}),"\xa0."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"test('rejects to octopus', async () => {\n  await expect(Promise.reject(new Error('octopus'))).rejects.toThrow('octopus');\n});\n"})})]}),"\n",(0,t.jsx)(n.h2,{id:"matchers",children:"Matchers"}),"\n",(0,t.jsx)(n.h3,{id:"tobevalue",children:(0,t.jsx)(n.code,{children:".toBe(value)"})}),"\n",(0,t.jsxs)(n.p,{children:["Utilisez ",(0,t.jsx)(n.code,{children:".toBe"})," pour comparer des valeurs primitives ou pour v\xe9rifier l'identit\xe9 r\xe9f\xe9rentielle d'instances d'objets. Il appelle ",(0,t.jsx)(n.code,{children:"Object.is"})," pour comparer les valeurs, ce qui est encore mieux pour les tests que l'op\xe9rateur d'\xe9galit\xe9 stricte ",(0,t.jsx)(n.code,{children:"==="}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Par exemple, ce code validera certaines propri\xe9t\xe9s de l'objet ",(0,t.jsx)(n.code,{children:"can"}),"\xa0:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const can = {\n  name: 'pamplemousse',\n  ounces: 12,\n};\n\ndescribe('le can', () => {\n  test('a 12 ounces', () => {\n    expect(can.ounces).toBe(12);\n  });\n\n  test('a un nom sophistiqu\xe9', () => {\n    expect(can.name).toBe('pamplemousse');\n  });\n});\n"})}),"\n",(0,t.jsxs)(n.p,{children:["N'utilisez pas ",(0,t.jsx)(n.code,{children:".toBe"})," avec des nombres \xe0 virgule flottante. Par exemple, en raison de l'arrondi, en JavaScript ",(0,t.jsx)(n.code,{children:"0.2 + 0.1"})," n'est pas strictement \xe9gal \xe0 ",(0,t.jsx)(n.code,{children:"0.3"}),". Si vous avez des nombres \xe0 virgule flottante, essayez \xe0 la place ",(0,t.jsx)(n.code,{children:".toBeCloseTo"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Bien que le comparateur ",(0,t.jsx)(n.code,{children:".toBe"})," ",(0,t.jsx)(n.strong,{children:"v\xe9rifie"})," l'identit\xe9 r\xe9f\xe9rentielle, il ",(0,t.jsx)(n.strong,{children:"reporte"})," une comparaison profonde des valeurs si l'assertion \xe9choue. Si les diff\xe9rences entre les propri\xe9t\xe9s ne vous aident pas \xe0 comprendre pourquoi un test \xe9choue, surtout si le rapport est volumineux, vous pouvez d\xe9placer la comparaison dans la fonction ",(0,t.jsx)(n.code,{children:"expect"}),". Par exemple, pour v\xe9rifier si des \xe9l\xe9ments ont ou non la m\xeame instance\xa0:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["rewrite ",(0,t.jsx)(n.code,{children:"expect(received).toBe(expected)"})," as ",(0,t.jsx)(n.code,{children:"expect(Object.is(received, expected)).toBe(true)"})]}),"\n",(0,t.jsxs)(n.li,{children:["rewrite ",(0,t.jsx)(n.code,{children:"expect(received).not.toBe(expected)"})," as ",(0,t.jsx)(n.code,{children:"expect(Object.is(received, expected)).toBe(false)"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"tohavebeencalled",children:(0,t.jsx)(n.code,{children:".toHaveBeenCalled()"})}),"\n",(0,t.jsxs)(n.p,{children:["Aussi sous l'alias\xa0: ",(0,t.jsx)(n.code,{children:".toBeCalled()"})]}),"\n",(0,t.jsxs)(n.p,{children:["Utilisez ",(0,t.jsx)(n.code,{children:".toHaveBeenCalledWith"})," pour vous assurer qu'une fonction simul\xe9e a \xe9t\xe9 appel\xe9e avec des arguments sp\xe9cifiques. Les arguments sont v\xe9rifi\xe9s avec le m\xeame algorithme que celui de ",(0,t.jsx)(n.code,{children:".toEqual"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Par exemple, supposons que vous avez une fonction ",(0,t.jsx)(n.code,{children:"drinkAll(boisson, flavour)"})," qui prend une fonction ",(0,t.jsx)(n.code,{children:"drink"})," et l'applique \xe0 toutes les boissons disponibles. Vous pourriez v\xe9rifier que ",(0,t.jsx)(n.code,{children:"drink"})," est appel\xe9e pour ",(0,t.jsx)(n.code,{children:"'lemon'"}),", mais pas pour ",(0,t.jsx)(n.code,{children:"'octopus'"}),", parce que la saveur ",(0,t.jsx)(n.code,{children:"'octopus'"})," est vraiment bizarre et pourquoi quelque chose serait-il aromatis\xe9 \xe0 l'octopus\xa0? Vous pouvez le faire avec cette suite de tests\xa0:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"function drinkAll(callback, flavour) {\n  if (flavour !== 'octopus') {\n    callback(flavour);\n  }\n}\n\ndescribe('drinkAll', () => {\n  test('boit quelque chose \xe0 la saveur lemon', () => {\n    const drink = jest.fn();\n    drinkAll(drink, 'lemon');\n    expect(drink).toHaveBeenCalled();\n  });\n\n  test('ne boit pas quelque chose \xe0 la saveur octopus', () => {\n    const drink = jest.fn();\n    drinkAll(drink, 'octopus');\n    expect(drink).not.toHaveBeenCalled();\n  });\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"tohavebeencalledtimesnumber",children:(0,t.jsx)(n.code,{children:".toHaveBeenCalledTimes(number)"})}),"\n",(0,t.jsxs)(n.p,{children:["Aussi sous l'alias\xa0: ",(0,t.jsx)(n.code,{children:".toBeCalledTimes(number)"})]}),"\n",(0,t.jsxs)(n.p,{children:["Utilisez ",(0,t.jsx)(n.code,{children:".toHaveBeenCalledTimes"})," pour vous assurer qu'une fonction simul\xe9e a \xe9t\xe9 appel\xe9e le nombre exact de fois."]}),"\n",(0,t.jsxs)(n.p,{children:["Par exemple, supposons que vous ayez une fonction ",(0,t.jsx)(n.code,{children:"drinkEach(drink, Array<flavor>)"})," qui prend une fonction ",(0,t.jsx)(n.code,{children:"drink"})," et l'applique \xe0 un tableau de boissons pass\xe9es. Vous pouvez v\xe9rifier que la fonction drink a \xe9t\xe9 appel\xe9e le nombre exact de fois. Vous pouvez le faire avec cette suite de tests\xa0:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"test('drinkEach boit chaque drink', () => {\n  const drink = jest.fn();\n  drinkEach(drink, ['lemon', 'octopus']);\n  expect(drink).toHaveBeenCalledTimes(2);\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"tohavebeencalledwitharg1-arg2-",children:(0,t.jsx)(n.code,{children:".toHaveBeenCalledWith(arg1, arg2, ...)"})}),"\n",(0,t.jsxs)(n.p,{children:["Aussi sous l'alias\xa0: ",(0,t.jsx)(n.code,{children:".toBeCalledWith()"})]}),"\n",(0,t.jsxs)(n.p,{children:["Utilisez ",(0,t.jsx)(n.code,{children:".toHaveBeenCalledWith"})," pour vous assurer qu'une fonction simul\xe9e a \xe9t\xe9 appel\xe9e avec des arguments sp\xe9cifiques. Les arguments sont v\xe9rifi\xe9s avec le m\xeame algorithme que celui de ",(0,t.jsx)(n.code,{children:".toEqual"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Par exemple, supposons que vous pouvez enregistrer une boisson avec une fonction ",(0,t.jsx)(n.code,{children:"register"}),", et que ",(0,t.jsx)(n.code,{children:"applyToAll(f)"})," devrait appliquer la fonction ",(0,t.jsx)(n.code,{children:"f"})," \xe0 toutes les boissons enregistr\xe9es. Pour vous assurer que cela fonctionne, vous pouvez \xe9crire\xa0:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"test('l\\'enregistrement s\\'applique correctement \xe0 orange La Croix', () => {\n  const beverage = new LaCroix('orange');\n  register(beverage);\n  const f = jest.fn();\n  applyToAll(f);\n  expect(f).toHaveBeenCalledWith(beverage);\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"tohavebeenlastcalledwitharg1-arg2-",children:(0,t.jsx)(n.code,{children:".toHaveBeenLastCalledWith(arg1, arg2, ...)"})}),"\n",(0,t.jsxs)(n.p,{children:["Aussi sous l'alias\xa0: ",(0,t.jsx)(n.code,{children:".lastCalledWith(arg1, arg2, ...)"})]}),"\n",(0,t.jsxs)(n.p,{children:["Si vous avez une fonction simul\xe9e, vous pouvez utiliser ",(0,t.jsx)(n.code,{children:".toHaveBeenLastCalledWith"})," pour tester avec quels arguments il a \xe9t\xe9 appel\xe9 en dernier. Par exemple, supposons que vous avez une fonction ",(0,t.jsx)(n.code,{children:"applyToAllFlavors(f)"})," qui applique ",(0,t.jsx)(n.code,{children:"f"})," \xe0 un tas de saveurs, et que vous voulez vous assurer que lorsque vous l'appelez, la derni\xe8re saveur sur laquelle elle op\xe8re est ",(0,t.jsx)(n.code,{children:"'mango'"}),". Vous pouvez \xe9crire\xa0:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"test('appliquation \xe0 tous les parfums, mango est le dernier', () => {\n  const drink = jest.fn();\n  applyToAllFlavors(drink);\n  expect(drink).toHaveBeenLastCalledWith('mango');\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"tohavebeennthcalledwithnthcall-arg1-arg2-",children:(0,t.jsx)(n.code,{children:".toHaveBeenNthCalledWith(nthCall, arg1, arg2, ....)"})}),"\n",(0,t.jsxs)(n.p,{children:["Aussi sous l'alias\xa0: ",(0,t.jsx)(n.code,{children:".nthCalledWith(nthCall, arg1, arg2, ...)"})]}),"\n",(0,t.jsxs)(n.p,{children:["Si vous avez une fonction simul\xe9e, vous pouvez utiliser ",(0,t.jsx)(n.code,{children:".toHaveBeenNthCalledWith"})," pour tester avec quels arguments elle a \xe9t\xe9 \xe9ni\xe8mement appel\xe9e. Par exemple, supposons que vous ayez une fonction ",(0,t.jsx)(n.code,{children:"drinkEach(drink, Array<flavor>)"})," qui applique ",(0,t.jsx)(n.code,{children:"f"})," \xe0 un tas de saveurs, et vous voulez vous assurer que lorsque vous l'appelez, la premi\xe8re saveur sur laquelle elle op\xe8re est ",(0,t.jsx)(n.code,{children:"'lemon'"})," et la seconde ",(0,t.jsx)(n.code,{children:"'octopus'"}),". Vous pouvez \xe9crire\xa0:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"test('drinkEach boit chaque drink', () => {\n  const drink = jest.fn();\n  drinkEach(drink, ['lemon', 'octopus']);\n  expect(drink).toHaveBeenNthCalledWith(1, 'lemon');\n  expect(drink).toHaveBeenNthCalledWith(2, 'octopus');\n});\n"})}),"\n",(0,t.jsx)(n.admonition,{title:"remarque",type:"note",children:(0,t.jsx)(n.p,{children:"L'argument nth doit \xeatre un entier positif \xe0 partir de 1."})}),"\n",(0,t.jsx)(n.h3,{id:"tohavereturned",children:(0,t.jsx)(n.code,{children:".toHaveReturned()"})}),"\n",(0,t.jsxs)(n.p,{children:["Aussi sous l'alias\xa0: ",(0,t.jsx)(n.code,{children:".toReturn()"})]}),"\n",(0,t.jsxs)(n.p,{children:["Si vous avez une fonction simul\xe9e, vous pouvez utiliser ",(0,t.jsx)(n.code,{children:".toHaveReturned"})," pour tester que la fonction simul\xe9e a retourn\xe9 avec succ\xe8s (c'est-\xe0-dire qu'elle n'a pas lanc\xe9 d'erreur) au moins une fois. Par exemple, supposons que vous avez un ",(0,t.jsx)(n.code,{children:"drink"})," simul\xe9 qui renvoie ",(0,t.jsx)(n.code,{children:"true"}),". Vous pouvez \xe9crire\xa0:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"test('drinks retourne', () => {\n  const drink = jest.fn(() => true);\n\n  drink();\n\n  expect(drink).toHaveReturned();\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"tohavereturnedtimesnumber",children:(0,t.jsx)(n.code,{children:".toHaveReturnedTimes(number)"})}),"\n",(0,t.jsxs)(n.p,{children:["Aussi sous l'alias\xa0: ",(0,t.jsx)(n.code,{children:".toReturnTimes(nombre)"})]}),"\n",(0,t.jsxs)(n.p,{children:["Utilisez ",(0,t.jsx)(n.code,{children:".toHaveReturnedTimes"})," pour vous assurer qu'une fonction simul\xe9e est retourn\xe9e avec succ\xe8s (c'est-\xe0-dire qu'elle n'a pas lanc\xe9 d'erreur) un nombre exact de fois. Les appels \xe0 la fonction simul\xe9e qui provoquent une erreur ne sont pas comptabilis\xe9s dans le nombre de retours de la fonction."]}),"\n",(0,t.jsxs)(n.p,{children:["Par exemple, supposons que vous avez un ",(0,t.jsx)(n.code,{children:"drink"})," simul\xe9 qui renvoie ",(0,t.jsx)(n.code,{children:"true"}),". Vous pouvez \xe9crire\xa0:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"test('drink retourne 2 fois', () => {\n  const drink = jest.fn(() => true);\n\n  drink();\n  drink();\n\n  expect(drink).toHaveReturnedTimes(2);\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"tohavereturnedwithvalue",children:(0,t.jsx)(n.code,{children:".toHaveReturnedWith(value)"})}),"\n",(0,t.jsxs)(n.p,{children:["Aussi sous l'alias\xa0: ",(0,t.jsx)(n.code,{children:".toReturnWith(value)"})]}),"\n",(0,t.jsxs)(n.p,{children:["Utilisez ",(0,t.jsx)(n.code,{children:".toHaveReturnedWith"})," pour vous assurer qu'une fonction simul\xe9e a retourn\xe9 une valeur sp\xe9cifique."]}),"\n",(0,t.jsxs)(n.p,{children:["Par exemple, supposons que vous ayez un ",(0,t.jsx)(n.code,{children:"drink"})," simul\xe9 qui renvoie le nom de la boisson qui a \xe9t\xe9 consomm\xe9e. Vous pouvez \xe9crire\xa0:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"test('drink retourne La Croix', () => {\n  const beverage = {name: 'La Croix'};\n  const drink = jest.fn(beverage => beverage.name);\n\n  drink(beverage);\n\n  expect(drink).toHaveReturnedWith('La Croix');\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"tohavelastreturnedwithvalue",children:(0,t.jsx)(n.code,{children:".toHaveLastReturnedWith(value)"})}),"\n",(0,t.jsxs)(n.p,{children:["Aussi sous l'alias\xa0: ",(0,t.jsx)(n.code,{children:".lastReturnedWith(value)"})]}),"\n",(0,t.jsxs)(n.p,{children:["Utilisez ",(0,t.jsx)(n.code,{children:".toHaveLastReturnedWith"})," pour tester la valeur sp\xe9cifique que la derni\xe8re fonction simul\xe9e a retourn\xe9e. Si le dernier appel \xe0 la fonction simul\xe9e a g\xe9n\xe9r\xe9 une erreur, alors ce comparateur \xe9chouera, quelle que soit la valeur que vous avez fournie comme valeur de retour attendue."]}),"\n",(0,t.jsxs)(n.p,{children:["Par exemple, supposons que vous ayez un ",(0,t.jsx)(n.code,{children:"drink"})," simul\xe9 qui renvoie le nom de la boisson qui a \xe9t\xe9 consomm\xe9e. Vous pouvez \xe9crire\xa0:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"test('drink retourne La Croix (Orange) en dernier', () => {\n  const beverage1 = {name: 'La Croix (Lemon)'};\n  const beverage2 = {name: 'La Croix (Orange)'};\n  const drink = jest.fn(beverage => beverage.name);\n\n  drink(beverage1);\n  drink(beverage2);\n\n  expect(drink).toHaveLastReturnedWith('La Croix (Orange)');\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"tohaventhreturnedwithnthcall-value",children:(0,t.jsx)(n.code,{children:".toHaveNthReturnedWith(nthCall, value)"})}),"\n",(0,t.jsxs)(n.p,{children:["Aussi sous l'alias\xa0: ",(0,t.jsx)(n.code,{children:".nthReturnedWith(nthCall, valeur)"})]}),"\n",(0,t.jsxs)(n.p,{children:["Utilisez ",(0,t.jsx)(n.code,{children:".toHaveNthReturnedWith"})," pour tester la valeur sp\xe9cifique retourn\xe9e par une fonction simul\xe9e pour le ni\xe8me appel. Si le ni\xe8me appel \xe0 la fonction simul\xe9e a lanc\xe9 une erreur, alors ce r\xe9sultat \xe9chouera quelle que soit la valeur que vous avez fournie comme valeur de retour attendue."]}),"\n",(0,t.jsxs)(n.p,{children:["Par exemple, supposons que vous ayez un ",(0,t.jsx)(n.code,{children:"drink"})," simul\xe9 qui renvoie le nom de la boisson qui a \xe9t\xe9 consomm\xe9e. Vous pouvez \xe9crire\xa0:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"test('drink retourne les ni\xe8mes appels attendus', () => {\n  const beverage1 = {name: 'La Croix (Lemon)'};\n  const beverage2 = {name: 'La Croix (Orange)'};\n  const drink = jest.fn(beverage => beverage.name);\n\n  drink(beverage1);\n  drink(beverage2);\n\n  expect(drink).toHaveNthReturnedWith(1, 'La Croix (Lemon)');\n  expect(drink).toHaveNthReturnedWith(2, 'La Croix (Orange)');\n});\n"})}),"\n",(0,t.jsx)(n.admonition,{title:"remarque",type:"note",children:(0,t.jsx)(n.p,{children:"L'argument nth doit \xeatre un entier positif \xe0 partir de 1."})}),"\n",(0,t.jsx)(n.h3,{id:"tohavelengthnumber",children:(0,t.jsx)(n.code,{children:".toHaveLength(number)"})}),"\n",(0,t.jsxs)(n.p,{children:["Utilisez ",(0,t.jsx)(n.code,{children:".toHaveLength"})," pour v\xe9rifier qu'un objet a une propri\xe9t\xe9 ",(0,t.jsx)(n.code,{children:".length"})," et il est d\xe9fini \xe0 une certaine valeur num\xe9rique."]}),"\n",(0,t.jsx)(n.p,{children:"Ceci est particuli\xe8rement utile pour v\xe9rifier la taille des tableaux ou des cha\xeenes."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"expect([1, 2, 3]).toHaveLength(3);\nexpect('abc').toHaveLength(3);\nexpect('').not.toHaveLength(5);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"tohavepropertykeypath-value",children:(0,t.jsx)(n.code,{children:".toHaveProperty(keyPath, value?)"})}),"\n",(0,t.jsxs)(n.p,{children:["Utilisez ",(0,t.jsx)(n.code,{children:".toHaveProperty"})," pour v\xe9rifier si la propri\xe9t\xe9 pour la r\xe9f\xe9rence fournie ",(0,t.jsx)(n.code,{children:"keyPath"})," existe pour un objet. Pour v\xe9rifier les propri\xe9t\xe9s profond\xe9ment imbriqu\xe9es dans un objet, vous pouvez utiliser ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Property_accessors",children:"la notation du point"})," ou un tableau contenant le keyPath pour les r\xe9f\xe9rences profondes."]}),"\n",(0,t.jsxs)(n.p,{children:["Vous pouvez fournir un argument facultatif ",(0,t.jsx)(n.code,{children:"value"})," pour comparer la valeur de la propri\xe9t\xe9 re\xe7ue (de mani\xe8re r\xe9cursive pour toutes les propri\xe9t\xe9s des instances d'objets, \xe9galement appel\xe9e \xe9galit\xe9 profonde, comme le comparateur ",(0,t.jsx)(n.code,{children:"toEqual"}),")."]}),"\n",(0,t.jsxs)(n.p,{children:["L'exemple suivant contient un objet ",(0,t.jsx)(n.code,{children:"houseForSale"})," avec des propri\xe9t\xe9s imbriqu\xe9es. Nous utilisons ",(0,t.jsx)(n.code,{children:"toHaveProperty"})," pour v\xe9rifier l'existence et les valeurs de diverses propri\xe9t\xe9s dans l'objet."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Objet contenant les fonctionnalit\xe9s de la maison \xe0 tester\nconst houseForSale = {\n  bath: true,\n  bedrooms: 4,\n  kitchen: {\n    amenities: ['oven', 'stove', 'washer'],\n    area: 20,\n    wallColor: 'white',\n    'nice.oven': true,\n  },\n  livingroom: {\n    amenities: [\n      {\n        couch: [\n          ['large', {dimensions: [20, 20]}],\n          ['small', {dimensions: [10, 10]}],\n        ],\n      },\n    ],\n  },\n  'ceiling.height': 2,\n};\n\ntest('cette maison a mes fonctionnalit\xe9s d\xe9sir\xe9es', () => {\n  // Exemple de r\xe9f\xe9rencement\n  expect(houseForSale).toHaveProperty('bath');\n  expect(houseForSale).toHaveProperty('bedrooms', 4);\n\n  expect(houseForSale).not.toHaveProperty('pool');\n\n  // R\xe9f\xe9rencement profond \xe0 l'aide de la notation par points\n  expect(houseForSale).toHaveProperty('kitchen.area', 20);\n  expect(houseForSale).toHaveProperty('kitchen.amenities', [\n    'oven',\n    'stove',\n    'washer',\n  ]);\n\n  expect(houseForSale).not.toHaveProperty('kitchen.open');\n\n  // R\xe9f\xe9rencement profond en utilisant un tableau contenant le keyPath\n  expect(houseForSale).toHaveProperty(['kitchen', 'area'], 20);\n  expect(houseForSale).toHaveProperty(\n    ['kitchen', 'amenities'],\n    ['oven', 'stove', 'washer'],\n  );\n  expect(houseForSale).toHaveProperty(['kitchen', 'amenities', 0], 'oven');\n  expect(houseForSale).toHaveProperty(\n    'livingroom.amenities[0].couch[0][1].dimensions[0]',\n    20,\n  );\n  expect(houseForSale).toHaveProperty(['kitchen', 'nice.oven']);\n  expect(houseForSale).not.toHaveProperty(['kitchen', 'open']);\n\n  // Referencing keys with dot in the key itself\n  expect(houseForSale).toHaveProperty(['ceiling.height'], 'tall');\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"tobeclosetonumber-numdigits",children:(0,t.jsx)(n.code,{children:".toBeCloseTo(number, numDigits?)"})}),"\n",(0,t.jsxs)(n.p,{children:["Utilisez ",(0,t.jsx)(n.code,{children:"toBeCloseTo"})," pour comparer les nombres \xe0 virgule flottante pour une \xe9galit\xe9 approximative."]}),"\n",(0,t.jsxs)(n.p,{children:["L'argument optionnel ",(0,t.jsx)(n.code,{children:"numDigits"})," limite le nombre de chiffres \xe0 v\xe9rifier ",(0,t.jsx)(n.strong,{children:"apr\xe8s"})," le point d\xe9cimal. Pour la valeur par d\xe9faut ",(0,t.jsx)(n.code,{children:"2"}),", le crit\xe8re de test est ",(0,t.jsx)(n.code,{children:"Math.abs(expected - received) < 0.005"})," (c'est-\xe0-dire ",(0,t.jsx)(n.code,{children:"10 ** -2 / 2"}),")."]}),"\n",(0,t.jsx)(n.p,{children:"Les comparaisons intuitives d'\xe9galit\xe9 \xe9chouent souvent, car l'arithm\xe9tique sur les valeurs d\xe9cimales (base 10) comporte souvent des erreurs d'arrondi dans la repr\xe9sentation binaire avec une pr\xe9cision limit\xe9e (base 2). Par exemple, ce test \xe9choue\xa0:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"test('l\\'addition fonctionne sainement avec les d\xe9cimales', () => {\n  expect(0.2 + 0.1).toBe(0.3); // \xe9choue\xa0!\n});\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Il \xe9choue car en JavaScript, ",(0,t.jsx)(n.code,{children:"0.2 + 0.1"})," est en fait ",(0,t.jsx)(n.code,{children:"0.3000000000004"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Par exemple, ce test passe avec une pr\xe9cision de 5 chiffres\xa0:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"test('l\\'addition fonctionne sainement avec les d\xe9cimales', () => {\n  expect(0.2 + 0.1).toBeCloseTo(0.3, 5);\n});\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Comme les erreurs en virgule flottante sont le probl\xe8me que ",(0,t.jsx)(n.code,{children:"toBeCloseTo"})," r\xe9sout, il ne supporte pas les grandes valeurs enti\xe8res."]}),"\n",(0,t.jsx)(n.h3,{id:"tobedefined",children:(0,t.jsx)(n.code,{children:".toBeDefined()"})}),"\n",(0,t.jsxs)(n.p,{children:["Utilisez ",(0,t.jsx)(n.code,{children:".toBeDefined"})," pour v\xe9rifier qu'une variable n'est pas undefined. Par exemple, si vous voulez v\xe9rifier qu'une fonction ",(0,t.jsx)(n.code,{children:"fetchNewFlavorIdea()"})," retourne ",(0,t.jsx)(n.em,{children:"quelque chose"}),", vous pouvez \xe9crire\xa0:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"test('il y a une nouvelle id\xe9e de saveur', () => {\n  expect(fetchNewFlavorIdea()).toBeDefined();\n});\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Vous pourriez \xe9crire ",(0,t.jsx)(n.code,{children:"expect(fetchNewFlavorIdea()).not.toBe(undefined)"}),", mais il est pr\xe9f\xe9rable d'\xe9viter de faire r\xe9f\xe9rence \xe0 ",(0,t.jsx)(n.code,{children:"undefined"})," directement dans votre code."]}),"\n",(0,t.jsx)(n.h3,{id:"tobefalsy",children:(0,t.jsx)(n.code,{children:".toBeFalsy()"})}),"\n",(0,t.jsxs)(n.p,{children:["Utilisez ",(0,t.jsx)(n.code,{children:".toBeFalsy"})," lorsque vous ne vous souciez pas de ce qu'est une valeur et que vous voulez vous assurer qu'une valeur est fausse dans un contexte bool\xe9en. Par exemple, disons que vous avez un code d'application qui ressemble \xe0 ceci\xa0:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"drinkSomeLaCroix();\nif (!getErrors()) {\n  drinkMoreLaCroix();\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Vous pouvez ne pas vous soucier de ce que ",(0,t.jsx)(n.code,{children:"getErrors"})," renvoie, sp\xe9cifiquement - il pourrait retourner ",(0,t.jsx)(n.code,{children:"false"}),", ",(0,t.jsx)(n.code,{children:"null"}),", ou ",(0,t.jsx)(n.code,{children:"0"}),", et votre code fonctionnerait toujours. Donc, si vous voulez tester qu'il n'y a pas d'erreurs apr\xe8s avoir consomm\xe9 La Croix, vous pouvez \xe9crire\xa0:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"test('drinking La Croix ne conduit pas \xe0 des erreurs', () => {\n  drinkSomeLaCroix();\n  expect(getErrors()).toBeFalsy();\n});\n"})}),"\n",(0,t.jsxs)(n.p,{children:["En JavaScript, il y a six valeurs fausses\xa0: ",(0,t.jsx)(n.code,{children:"false"}),", ",(0,t.jsx)(n.code,{children:"0"}),", ",(0,t.jsx)(n.code,{children:"''"}),", ",(0,t.jsx)(n.code,{children:"null"}),", ",(0,t.jsx)(n.code,{children:"undefined"})," et ",(0,t.jsx)(n.code,{children:"NaN"}),". Tout le reste est vrai."]}),"\n",(0,t.jsx)(n.h3,{id:"tobegreaterthannumber--bigint",children:(0,t.jsx)(n.code,{children:".toBeGreaterThan(number | bigint)"})}),"\n",(0,t.jsxs)(n.p,{children:["Utilisez ",(0,t.jsx)(n.code,{children:"toBeGreaterThan"})," pour comparer ",(0,t.jsx)(n.code,{children:"re\xe7u > attendu"})," pour des valeurs num\xe9riques ou de grands entiers. Par exemple, tester que ",(0,t.jsx)(n.code,{children:"ouncesPerCan()"})," retourne une valeur de plus de 10 onces\xa0:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"test('ounces per can est plus grand que 10', () => {\n  expect(ouncesPerCan()).toBeGreaterThan(10);\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"tobegreaterthanorequalnumber--bigint",children:(0,t.jsx)(n.code,{children:".toBeGreaterThanOrEqual(number | bigint)"})}),"\n",(0,t.jsxs)(n.p,{children:["Utilisez ",(0,t.jsx)(n.code,{children:"toBeGreaterThanOrEqual"})," pour comparer ",(0,t.jsx)(n.code,{children:"re\xe7u >= attendu"})," pour des valeurs num\xe9riques ou de grands entiers. Par exemple, tester que ",(0,t.jsx)(n.code,{children:"ouncesPerCan()"})," retourne une valeur d'au moins 12 onces\xa0:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"test('ounces per can est au moins plus grand que 12', () => {\n  expect(ouncesPerCan()).toBeGreaterThanOrEqual(12);\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"tobelessthannumber--bigint",children:(0,t.jsx)(n.code,{children:".toBeLessThan(number | bigint)"})}),"\n",(0,t.jsxs)(n.p,{children:["Utilisez ",(0,t.jsx)(n.code,{children:"toBeLessThan"})," pour comparer ",(0,t.jsx)(n.code,{children:"re\xe7u < attendu"})," pour des valeurs num\xe9riques ou de grands entiers. Par exemple, tester que ",(0,t.jsx)(n.code,{children:"ouncesPerCan()"})," retourne une valeur de moins de 20 onces\xa0:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"test('ounces per can est inf\xe9rieur \xe0 20', () => {\n  expect(ouncesPerCan()).toBeLessThan(20);\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"tobelessthanorequalnumber--bigint",children:(0,t.jsx)(n.code,{children:".toBeLessThanOrEqual(number | bigint)"})}),"\n",(0,t.jsxs)(n.p,{children:["Utilisez ",(0,t.jsx)(n.code,{children:"toBeLessThanOrEqual"})," pour comparer ",(0,t.jsx)(n.code,{children:"re\xe7u <= attendu"})," pour des valeurs num\xe9riques ou de grands entiers. Par exemple, tester que ",(0,t.jsx)(n.code,{children:"ouncesPerCan()"})," retourne une valeur d'au plus 12 onces\xa0:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"test('ounces per can est au plus de 12', () => {\n  expect(ouncesPerCan()).toBeLessThanOrEqual(12);\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"tobeinstanceofclass",children:(0,t.jsx)(n.code,{children:".toBeInstanceOf(Class)"})}),"\n",(0,t.jsxs)(n.p,{children:["Utilisez ",(0,t.jsx)(n.code,{children:".toBeInstanceOf(Class)"})," pour v\xe9rifier qu'un objet est une instance d'une classe. Ce comparateur utilise ",(0,t.jsx)(n.code,{children:"instanceof"})," en dessous."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"class A {}\n\nexpect(new A()).toBeInstanceOf(A);\nexpect(() => {}).toBeInstanceOf(Function);\nexpect(new A()).toBeInstanceOf(Function); // throws\n"})}),"\n",(0,t.jsx)(n.h3,{id:"tobenull",children:(0,t.jsx)(n.code,{children:".toBeNull()"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:".toBeNull()"})," est identique \xe0 ",(0,t.jsx)(n.code,{children:".toBe(null)"})," mais les messages d'erreur sont un peu plus jolis. Utilisez donc ",(0,t.jsx)(n.code,{children:".toBeNull()"})," lorsque vous voulez v\xe9rifier que quelque chose est null."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"function bloop() {\n  return null;\n}\n\ntest('bloop retourne null', () => {\n  expect(bloop()).toBeNull();\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"tobetruthy",children:(0,t.jsx)(n.code,{children:".toBeTruthy()"})}),"\n",(0,t.jsxs)(n.p,{children:["Utilisez ",(0,t.jsx)(n.code,{children:".toBeTruthy"})," lorsque vous ne vous souciez pas de ce qu'est une valeur et que vous voulez vous assurer qu'une valeur est vraie dans un contexte bool\xe9en. Par exemple, disons que vous avez un code d'application qui ressemble \xe0 ceci\xa0:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"drinkSomeLaCroix();\nif (thirstInfo()) {\n  drinkMoreLaCroix();\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Vous pouvez ne pas vous soucier de ce que ",(0,t.jsx)(n.code,{children:"thirstInfo"})," renvoie, sp\xe9cifiquement - il pourrait retourner ",(0,t.jsx)(n.code,{children:"true"})," ou un objet complexe, et votre code fonctionnerait toujours. Ainsi, si vous voulez tester que ",(0,t.jsx)(n.code,{children:"thirstInfo"})," sera vrai apr\xe8s avoir bu du La Croix, vous pouvez \xe9crire\xa0:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"test('boire du La Croix conduit \xe0 avoir des infos sur la soif', () => {\n  drinkSomeLaCroix();\n  expect(thirstInfo()).toBeTruthy();\n});\n"})}),"\n",(0,t.jsxs)(n.p,{children:["En JavaScript, il y a six valeurs fausses\xa0: ",(0,t.jsx)(n.code,{children:"false"}),", ",(0,t.jsx)(n.code,{children:"0"}),", ",(0,t.jsx)(n.code,{children:"''"}),", ",(0,t.jsx)(n.code,{children:"null"}),", ",(0,t.jsx)(n.code,{children:"undefined"})," et ",(0,t.jsx)(n.code,{children:"NaN"}),". Tout le reste est vrai."]}),"\n",(0,t.jsx)(n.h3,{id:"tobeundefined",children:(0,t.jsx)(n.code,{children:".toBeUndefined()"})}),"\n",(0,t.jsxs)(n.p,{children:["Utilisez ",(0,t.jsx)(n.code,{children:".toBeUndefined"})," pour v\xe9rifier qu'une variable est undefined. Par exemple, si vous voulez v\xe9rifier qu'une fonction ",(0,t.jsx)(n.code,{children:"bestDrinkForFlavor(flavor)"})," renvoie ",(0,t.jsx)(n.code,{children:"undefined"})," pour la saveur ",(0,t.jsx)(n.code,{children:"'octopus'"}),", car il n'existe pas de bonne boisson aromatis\xe9e \xe0 l'octopus\xa0:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"test('la meilleure boisson pour la saveur octopus est undefined', () => {\n  expect(bestDrinkForFlavor('octopus')).toBeUndefined();\n});\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Vous pourriez \xe9crire ",(0,t.jsx)(n.code,{children:"expect(bestDrinkForFlavor('octopus')).toBe(undefined)"}),", mais il est pr\xe9f\xe9rable d'\xe9viter de faire r\xe9f\xe9rence \xe0 ",(0,t.jsx)(n.code,{children:"undefined"})," directement dans votre code."]}),"\n",(0,t.jsx)(n.h3,{id:"tobenan",children:(0,t.jsx)(n.code,{children:".toBeNaN()"})}),"\n",(0,t.jsxs)(n.p,{children:["Utilisez ",(0,t.jsx)(n.code,{children:".toBeNaN"})," lorsque vous v\xe9rifiez qu'une valeur est ",(0,t.jsx)(n.code,{children:"NaN"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"test('passe lorsque la valeur est NaN', () => {\n  expect(NaN).toBeNaN();\n  expect(1).not.toBeNaN();\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"tocontainitem",children:(0,t.jsx)(n.code,{children:".toContain(item)"})}),"\n",(0,t.jsxs)(n.p,{children:["Utilisez ",(0,t.jsx)(n.code,{children:".toContain"})," lorsque vous voulez v\xe9rifier qu'un \xe9l\xe9ment est dans un tableau. Pour tester les \xe9l\xe9ments du tableau, on utilise ",(0,t.jsx)(n.code,{children:"==="}),", un contr\xf4le d'\xe9galit\xe9 strict. ",(0,t.jsx)(n.code,{children:".toContain"})," peut \xe9galement v\xe9rifier si une cha\xeene de caract\xe8res est une sous-cha\xeene d'une autre cha\xeene."]}),"\n",(0,t.jsxs)(n.p,{children:["Par exemple, si ",(0,t.jsx)(n.code,{children:"getAllFlavors()"})," retourne un tableau de saveurs et vous voulez \xeatre s\xfbr que ",(0,t.jsx)(n.code,{children:"lime"})," est l\xe0, vous pouvez \xe9crire\xa0:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"test('la liste de saveurs contient lime', () => {\n  expect(getAllFlavors()).toContain('lime');\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:"Ce comparateur accepte \xe9galement d'autres it\xe9rables tels que les cha\xeenes, les sets, les listes de noeuds et les collections HTML."}),"\n",(0,t.jsx)(n.h3,{id:"tocontainequalitem",children:(0,t.jsx)(n.code,{children:".toContainEqual(item)"})}),"\n",(0,t.jsxs)(n.p,{children:["Utilisez ",(0,t.jsx)(n.code,{children:".toContainEqual"})," lorsque vous voulez v\xe9rifier qu'un \xe9l\xe9ment ayant une structure et des valeurs sp\xe9cifiques est contenu dans un tableau. Pour tester les \xe9l\xe9ments du tableau, ce comparateur v\xe9rifie r\xe9cursivement l'\xe9galit\xe9 de tous les champs, plut\xf4t que de v\xe9rifier l'identit\xe9 des objets."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"describe('ma boisson', () => {\n  test('est d\xe9licieuse et non acide', () => {\n    const myBeverage = {delicious: true, sour: false};\n    expect(myBeverages()).toContainEqual(myBeverage);\n  });\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"toequalvalue",children:(0,t.jsx)(n.code,{children:".toEqual(value)"})}),"\n",(0,t.jsxs)(n.p,{children:["Utilisez ",(0,t.jsx)(n.code,{children:".toEqual"})," pour comparer r\xe9cursivement toutes les propri\xe9t\xe9s des instances d'objets (\xe9galement connu sous le nom d'\xe9galit\xe9 \xab\xa0profonde\xa0\xbb). Il appelle ",(0,t.jsx)(n.code,{children:"Object.is"})," pour comparer des valeurs primitives, ce qui est encore mieux pour les tests que l'op\xe9rateur d'\xe9galit\xe9 stricte ",(0,t.jsx)(n.code,{children:"==="}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Par exemple, ",(0,t.jsx)(n.code,{children:".toEqual"})," et ",(0,t.jsx)(n.code,{children:".toBe"})," se comportent diff\xe9remment dans cette suite de tests, de sorte que tous les tests passent :"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const can1 = {\n  flavor: 'grapefruit',\n  ounces: 12,\n};\nconst can2 = {\n  flavor: 'grapefruit',\n  ounces: 12,\n};\n\ndescribe('les canettes de La Croix sur mon bureau', () => {\n  test('ont toutes les m\xeames propri\xe9t\xe9s', () => {\n    expect(can1).toEqual(can2);\n  });\n  test('ne sont pas exactement les m\xeames canettes', () => {\n    expect(can1).not.toBe(can2);\n  });\n});\n"})}),"\n",(0,t.jsx)(n.admonition,{title:"astuce",type:"tip",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"toEqual"})," ignores object keys with ",(0,t.jsx)(n.code,{children:"undefined"})," properties, ",(0,t.jsx)(n.code,{children:"undefined"})," array items, array sparseness, or object type mismatch. To take these into account use ",(0,t.jsx)(n.a,{href:"#tostrictequalvalue",children:(0,t.jsx)(n.code,{children:".toStrictEqual"})})," instead."]})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:".toEqual"})," n'effectuera pas de v\xe9rification ",(0,t.jsx)(n.em,{children:"d'\xe9galit\xe9 profonde"})," pour deux erreurs. Seule la propri\xe9t\xe9 ",(0,t.jsx)(n.code,{children:"message"})," d'une erreur est prise en compte pour l'\xe9galit\xe9. Il est recommand\xe9 d'utiliser le comparateur ",(0,t.jsx)(n.code,{children:".toThrow"})," pour les tests d'erreurs."]})}),"\n",(0,t.jsxs)(n.p,{children:["Si les diff\xe9rences entre les propri\xe9t\xe9s ne vous aident pas \xe0 comprendre pourquoi un test \xe9choue, surtout si le rapport est volumineux, vous pouvez d\xe9placer la comparaison dans la fonction ",(0,t.jsx)(n.code,{children:"expect"}),". Par exemple, utilisez la m\xe9thode ",(0,t.jsx)(n.code,{children:"equals"})," de la classe ",(0,t.jsx)(n.code,{children:"Buffer"})," pour v\xe9rifier si les buffers contiennent ou non le m\xeame contenu :"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["rewrite ",(0,t.jsx)(n.code,{children:"expect(received).toEqual(expected)"})," as ",(0,t.jsx)(n.code,{children:"expect(received.equals(expected)).toBe(true)"})]}),"\n",(0,t.jsxs)(n.li,{children:["rewrite ",(0,t.jsx)(n.code,{children:"expect(received).not.toEqual(expected)"})," as ",(0,t.jsx)(n.code,{children:"expect(received.equals(expected)).toBe(false)"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"tomatchregexp--string",children:(0,t.jsx)(n.code,{children:".toMatch(regexp | string)"})}),"\n",(0,t.jsxs)(n.p,{children:["Utilisez ",(0,t.jsx)(n.code,{children:".toMatch"})," pour v\xe9rifier qu'une cha\xeene correspond \xe0 une expression r\xe9guli\xe8re."]}),"\n",(0,t.jsxs)(n.p,{children:["Par exemple, vous ne savez peut-\xeatre pas ce que ",(0,t.jsx)(n.code,{children:"essayOnTheBestFlavor()"})," renvoie exactement, mais vous savez qu'il s'agit d'une tr\xe8s longue cha\xeene de caract\xe8res et que la sous-cha\xeene ",(0,t.jsx)(n.code,{children:"grapefruit"})," devrait s'y trouver quelque part. Vous pouvez tester ceci avec\xa0:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"describe('un essai sur la meilleure saveur', () => {\n  test('mentionne grapefruit', () => {\n    expect(essayOnTheBestFlavor()).toMatch(/grapefruit/);\n    expect(essayOnTheBestFlavor()).toMatch(new RegExp('grapefruit'));\n  });\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:"Ce comparateur accepte \xe9galement une cha\xeene de caract\xe8res, qu'il essaiera de faire correspondre\xa0:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"describe('grapefruits sont sains', () => {\n  test('grapefruits sont des fruits', () => {\n    expect('grapefruits').toMatch('fruit');\n  });\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"tomatchobjectobject",children:(0,t.jsx)(n.code,{children:".toMatchObject(object)"})}),"\n",(0,t.jsxs)(n.p,{children:["Utilisez ",(0,t.jsx)(n.code,{children:".toMatchObject"})," pour v\xe9rifier qu'un objet JavaScript correspond \xe0 un sous-ensemble des propri\xe9t\xe9s d'un objet. Il correspondra aux objets re\xe7us dont les propri\xe9t\xe9s ",(0,t.jsx)(n.strong,{children:"ne sont pas"})," dans l'objet attendu."]}),"\n",(0,t.jsxs)(n.p,{children:["Vous pouvez \xe9galement passer un tableau d'objets, auquel cas la m\xe9thode retournera true uniquement si chaque objet du tableau re\xe7u correspond (au sens ",(0,t.jsx)(n.code,{children:"toMatchObject"})," d\xe9crit ci-dessus) \xe0 l'objet correspondant dans le tableau attendu. Ceci est utile si vous voulez v\xe9rifier que deux tableaux correspondent dans leur nombre d'\xe9l\xe9ments, par opposition \xe0 ",(0,t.jsx)(n.code,{children:"arrayContaining"}),", qui autorise des \xe9l\xe9ments suppl\xe9mentaires dans le tableau re\xe7u."]}),"\n",(0,t.jsx)(n.p,{children:"Vous pouvez faire correspondre des propri\xe9t\xe9s \xe0 des valeurs ou \xe0 des comparateurs."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const houseForSale = {\n  bath: true,\n  bedrooms: 4,\n  kitchen: {\n    amenities: ['oven', 'stove', 'washer'],\n    area: 20,\n    wallColor: 'white',\n  },\n};\nconst desiredHouse = {\n  bath: true,\n  kitchen: {\n    amenities: ['oven', 'stove', 'washer'],\n    wallColor: expect.stringMatching(/white|yellow/),\n  },\n};\n\ntest('la maison a mes caract\xe9ristiques souhait\xe9es', () => {\n  expect(houseForSale).toMatchObject(desiredHouse);\n});\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"describe('toMatchObject appliqu\xe9 aux tableaux', () => {\n  test('le nombre d\\'\xe9l\xe9ments doit correspondre exactement', () => {\n    expect([{foo: 'bar'}, {baz: 1}]).toMatchObject([{foo: 'bar'}, {baz: 1}]);\n  });\n\n  test('.toMatchObject est appel\xe9 pour chaque \xe9l\xe9ment, donc les propri\xe9t\xe9s suppl\xe9mentaires de l\\'objet sont correctes', () => {\n    expect([{foo: 'bar'}, {baz: 1, extra: 'quux'}]).toMatchObject([\n      {foo: 'bar'},\n      {baz: 1},\n    ]);\n  });\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"tomatchsnapshotpropertymatchers-hint",children:(0,t.jsx)(n.code,{children:".toMatchSnapshot(propertyMatchers?, hint?)"})}),"\n",(0,t.jsxs)(n.p,{children:["Cela garantit qu'une valeur correspond au snapshot le plus r\xe9cent. Consultez ",(0,t.jsx)(n.a,{href:"/fr/docs/next/snapshot-testing",children:"le guide de test des snapshots"})," pour plus d'informations."]}),"\n",(0,t.jsxs)(n.p,{children:["Vous pouvez fournir un argument objet optionnel ",(0,t.jsx)(n.code,{children:"propertyMatchers"}),", qui a des comparateurs asym\xe9triques comme valeurs d'un sous-ensemble de propri\xe9t\xe9s attendues, ",(0,t.jsx)(n.strong,{children:"si"})," la valeur re\xe7ue est une instance d'",(0,t.jsx)(n.strong,{children:"objet"}),". C'est comme ",(0,t.jsx)(n.code,{children:"toMatchObject"})," avec des crit\xe8res flexibles pour un sous-ensemble de propri\xe9t\xe9s, suivis d'un test de snapshot comme crit\xe8re exact pour le reste des propri\xe9t\xe9s."]}),"\n",(0,t.jsxs)(n.p,{children:["Vous pouvez fournir un argument ",(0,t.jsx)(n.code,{children:"hint"})," facultatif de type string qui sera ajout\xe9 au nom du test. Bien que Jest ajoute toujours un num\xe9ro \xe0 la fin du nom d'un snapshot, de courtes indications descriptives pourraient \xeatre plus utiles que des num\xe9ros pour diff\xe9rencier ",(0,t.jsx)(n.strong,{children:"plusieurs"})," snapshots dans un ",(0,t.jsx)(n.strong,{children:"seul"})," bloc ",(0,t.jsx)(n.code,{children:"it"})," ou ",(0,t.jsx)(n.code,{children:"test"}),". Jest trie les snapshots par nom dans le fichier ",(0,t.jsx)(n.code,{children:".snap"})," correspondant."]}),"\n",(0,t.jsx)(n.h3,{id:"tomatchinlinesnapshotpropertymatchers-inlinesnapshot",children:(0,t.jsx)(n.code,{children:".toMatchInlineSnapshot(propertyMatchers?, inlineSnapshot)"})}),"\n",(0,t.jsx)(n.p,{children:"Assure qu'une valeur correspond au snapshot le plus r\xe9cent."}),"\n",(0,t.jsxs)(n.p,{children:["Vous pouvez fournir un argument objet optionnel ",(0,t.jsx)(n.code,{children:"propertyMatchers"}),", qui a des comparateurs asym\xe9triques comme valeurs d'un sous-ensemble de propri\xe9t\xe9s attendues, ",(0,t.jsx)(n.strong,{children:"si"})," la valeur re\xe7ue est une instance d'",(0,t.jsx)(n.strong,{children:"objet"}),". C'est comme ",(0,t.jsx)(n.code,{children:"toMatchObject"})," avec des crit\xe8res flexibles pour un sous-ensemble de propri\xe9t\xe9s, suivis d'un test de snapshot comme crit\xe8re exact pour le reste des propri\xe9t\xe9s."]}),"\n",(0,t.jsxs)(n.p,{children:["Jest ajoute l'argument ",(0,t.jsx)(n.code,{children:"inlineSnapshot"})," au comparateur dans le fichier de test (au lieu d'un fichier ",(0,t.jsx)(n.code,{children:".snap"})," externe) lors de la premi\xe8re ex\xe9cution du test."]}),"\n",(0,t.jsxs)(n.p,{children:["Consultez la section sur ",(0,t.jsx)(n.a,{href:"/fr/docs/next/snapshot-testing#inline-snapshots",children:"les snapshots en ligne"})," pour plus d'informations."]}),"\n",(0,t.jsx)(n.h3,{id:"tostrictequalvalue",children:(0,t.jsx)(n.code,{children:".toStrictEqual(value)"})}),"\n",(0,t.jsxs)(n.p,{children:["Use ",(0,t.jsx)(n.code,{children:".toStrictEqual"})," to test that objects have the same structure and type."]}),"\n",(0,t.jsxs)(n.p,{children:["Diff\xe9rences avec ",(0,t.jsx)(n.code,{children:".toEqual"}),"\xa0:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["keys with ",(0,t.jsx)(n.code,{children:"undefined"})," properties are checked, e.g. ",(0,t.jsx)(n.code,{children:"{a: undefined, b: 2}"})," will not equal ",(0,t.jsx)(n.code,{children:"{b: 2}"}),";"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"undefined"})," items are taken into account, e.g. ",(0,t.jsx)(n.code,{children:"[2]"})," will not equal ",(0,t.jsx)(n.code,{children:"[2, undefined]"}),";"]}),"\n",(0,t.jsxs)(n.li,{children:["array sparseness is checked, e.g. ",(0,t.jsx)(n.code,{children:"[, 1]"})," will not equal ",(0,t.jsx)(n.code,{children:"[undefined, 1]"}),";"]}),"\n",(0,t.jsxs)(n.li,{children:["object types are checked, e.g. a class instance with fields ",(0,t.jsx)(n.code,{children:"a"})," and ",(0,t.jsx)(n.code,{children:"b"})," will not equal a literal object with fields ",(0,t.jsx)(n.code,{children:"a"})," and ",(0,t.jsx)(n.code,{children:"b"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"class LaCroix {\n  constructor(flavor) {\n    this.flavor = flavor;\n  }\n}\n\ndescribe('les canettes La Croix sur mon bureau', () => {\n  test('ne sont pas s\xe9mantiquement les m\xeames', () => {\n    expect(new LaCroix('lemon')).toEqual({flavor: 'lemon'});\n    expect(new LaCroix('lemon')).not.toStrictEqual({flavor: 'lemon'});\n  });\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"tothrowerror",children:(0,t.jsx)(n.code,{children:".toThrow(error?)"})}),"\n",(0,t.jsxs)(n.p,{children:["Aussi sous l'alias\xa0: ",(0,t.jsx)(n.code,{children:".toThrowError(error?)"})]}),"\n",(0,t.jsxs)(n.p,{children:["Utilisez ",(0,t.jsx)(n.code,{children:".toThrow"})," pour tester qu'une fonction l\xe8ve une exception lorsqu'elle est appel\xe9e. Par exemple, si nous voulons tester que ",(0,t.jsx)(n.code,{children:"drinkFlavor('octopus')"})," l\xe8ve une exception, parce que la saveur de octopus est trop d\xe9go\xfbtante \xe0 boire, nous pourrions \xe9crire\xa0:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"test('throws sur octopus', () => {\n  expect(() => {\n    drinkFlavor('octopus');\n  }).toThrow();\n});\n"})}),"\n",(0,t.jsx)(n.admonition,{title:"astuce",type:"tip",children:(0,t.jsx)(n.p,{children:"Vous devez envelopper le code dans une fonction, sinon l'erreur ne sera pas d\xe9tect\xe9e et l'assertion \xe9chouera."})}),"\n",(0,t.jsx)(n.p,{children:"Vous pouvez fournir un argument facultatif pour v\xe9rifier qu'une erreur sp\xe9cifique est d\xe9clench\xe9e\xa0:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["regular expression: error message ",(0,t.jsx)(n.strong,{children:"matches"})," the pattern"]}),"\n",(0,t.jsxs)(n.li,{children:["string: error message ",(0,t.jsx)(n.strong,{children:"includes"})," the substring"]}),"\n",(0,t.jsxs)(n.li,{children:["error object: error message is ",(0,t.jsx)(n.strong,{children:"equal to"})," the message property of the object"]}),"\n",(0,t.jsxs)(n.li,{children:["error class: error object is ",(0,t.jsx)(n.strong,{children:"instance of"})," class"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Par exemple, supposons que le ",(0,t.jsx)(n.code,{children:"drinkFlavor"})," est cod\xe9 comme suit\xa0:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"function drinkFlavor(flavor) {\n  if (flavor == 'octopus') {\n    throw new DisgustingFlavorError('beurk, go\xfbt octopus');\n  }\n  // Faire d'autres choses\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Nous pourrions tester cette erreur de plusieurs fa\xe7ons\xa0:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"test('throws on octopus', () => {\n  function drinkOctopus() {\n    drinkFlavor('octopus');\n  }\n\n  // Test that the error message says \"yuck\" somewhere: these are equivalent\n  expect(drinkOctopus).toThrow(/yuck/);\n  expect(drinkOctopus).toThrow('yuck');\n\n  // Test the exact error message\n  expect(drinkOctopus).toThrow(/^yuck, octopus flavor$/);\n  expect(drinkOctopus).toThrow(new Error('yuck, octopus flavor'));\n\n  // Test that we get a DisgustingFlavorError\n  expect(drinkOctopus).toThrow(DisgustingFlavorError);\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"tothrowerrormatchingsnapshothint",children:(0,t.jsx)(n.code,{children:".toThrowErrorMatchingSnapshot(hint?)"})}),"\n",(0,t.jsxs)(n.p,{children:["Utilisez ",(0,t.jsx)(n.code,{children:".toThrowErrorMatchingSnapshot"})," pour tester qu'une fonction lance une erreur correspondant au snapshot le plus r\xe9cent lorsqu'il est appel\xe9."]}),"\n",(0,t.jsxs)(n.p,{children:["Vous pouvez fournir un argument ",(0,t.jsx)(n.code,{children:"hint"})," facultatif de type string qui sera ajout\xe9 au nom du test. Bien que Jest ajoute toujours un num\xe9ro \xe0 la fin du nom d'un snapshot, de courtes indications descriptives pourraient \xeatre plus utiles que des num\xe9ros pour diff\xe9rencier ",(0,t.jsx)(n.strong,{children:"plusieurs"})," snapshots dans un ",(0,t.jsx)(n.strong,{children:"seul"})," bloc ",(0,t.jsx)(n.code,{children:"it"})," ou ",(0,t.jsx)(n.code,{children:"test"}),". Jest trie les snapshots par nom dans le fichier ",(0,t.jsx)(n.code,{children:".snap"})," correspondant."]}),"\n",(0,t.jsxs)(n.p,{children:["Par exemple, supposons que vous avez une fonction ",(0,t.jsx)(n.code,{children:"drinkFlavor"})," qui l\xe8ve une exception chaque fois que la saveur est ",(0,t.jsx)(n.code,{children:"'octopus'"}),", et qui est cod\xe9e comme ceci :"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"function drinkFlavor(flavor) {\n  if (flavor == 'octopus') {\n    throw new DisgustingFlavorError('beurk, go\xfbt octopus');\n  }\n  // Faire d'autres choses\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Le test pour cette fonction se pr\xe9sentera de la mani\xe8re suivante\xa0:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"test('throws on octopus', () => {\n  function drinkOctopus() {\n    drinkFlavor('octopus');\n  }\n\n  expect(drinkOctopus).toThrowErrorMatchingSnapshot();\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:"Et cela va g\xe9n\xe9rer le snapshot suivant\xa0:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'exports[`drinking flavors throws on octopus 1`] = `"beurk, go\xfbt octopus"`;\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Consultez ",(0,t.jsx)(n.a,{href:"/blog/2016/07/27/jest-14",children:"Test de snapshot de l'arborescence React"})," pour plus d'informations sur les tests de snapshots."]}),"\n",(0,t.jsx)(n.h3,{id:"tothrowerrormatchinginlinesnapshotinlinesnapshot",children:(0,t.jsx)(n.code,{children:".toThrowErrorMatchingInlineSnapshot(inlineSnapshot)"})}),"\n",(0,t.jsxs)(n.p,{children:["Utilisez ",(0,t.jsx)(n.code,{children:".toThrowErrorMatchingInlineSnapshot"})," pour tester qu'une fonction l\xe8ve une erreur correspondant au snapshot le plus r\xe9cent lorsqu'elle est appel\xe9e."]}),"\n",(0,t.jsxs)(n.p,{children:["Jest ajoute l'argument ",(0,t.jsx)(n.code,{children:"inlineSnapshot"})," au comparateur dans le fichier de test (au lieu d'un fichier ",(0,t.jsx)(n.code,{children:".snap"})," externe) lors de la premi\xe8re ex\xe9cution du test."]}),"\n",(0,t.jsxs)(n.p,{children:["Consultez la section sur ",(0,t.jsx)(n.a,{href:"/fr/docs/next/snapshot-testing#inline-snapshots",children:"les snapshots en ligne"})," pour plus d'informations."]}),"\n",(0,t.jsx)(n.h2,{id:"asymmetric-matchers",children:"Asymmetric Matchers"}),"\n",(0,t.jsx)(n.h3,{id:"expectanything",children:(0,t.jsx)(n.code,{children:"expect.anything()"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expect.anything()"})," correspond \xe0 tout sauf \xe0 ",(0,t.jsx)(n.code,{children:"null"})," ou ",(0,t.jsx)(n.code,{children:"undefined"}),". Vous pouvez l'utiliser \xe0 l'int\xe9rieur de ",(0,t.jsx)(n.code,{children:"toEqual"})," ou ",(0,t.jsx)(n.code,{children:"toBeCalledWith"})," au lieu d'une valeur litt\xe9rale. Par exemple, si vous voulez v\xe9rifier qu'une fonction simul\xe9e est appel\xe9e avec un argument non null\xa0:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"test('map calls its argument with a non-null argument', () => {\n  const mock = jest.fn();\n  [1].map(x => mock(x));\n  expect(mock).toHaveBeenCalledWith(expect.anything());\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"expectanyconstructor",children:(0,t.jsx)(n.code,{children:"expect.any(constructor)"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expect.any(constructor)"})," correspond \xe0 tout ce qui a \xe9t\xe9 cr\xe9\xe9 avec le constructeur donn\xe9 ou si c'est une primitive qui est du type transmis. Vous pouvez l'utiliser \xe0 l'int\xe9rieur de ",(0,t.jsx)(n.code,{children:"toEqual"})," ou ",(0,t.jsx)(n.code,{children:"toBeCalledWith"})," au lieu d'une valeur litt\xe9rale. Par exemple, si vous voulez v\xe9rifier qu'une fonction simul\xe9e est appel\xe9e avec un nombre\xa0:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"class Cat {}\nfunction getCat(fn) {\n  return fn(new Cat());\n}\n\ntest('randocall calls its callback with a class instance', () => {\n  const mock = jest.fn();\n  getCat(mock);\n  expect(mock).toHaveBeenCalledWith(expect.any(Cat));\n});\n\nfunction randocall(fn) {\n  return fn(Math.floor(Math.random() * 6 + 1));\n}\n\ntest('randocall calls its callback with a number', () => {\n  const mock = jest.fn();\n  randocall(mock);\n  expect(mock).toHaveBeenCalledWith(expect.any(Number));\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"expectarraycontainingarray",children:(0,t.jsx)(n.code,{children:"expect.arrayContaining(array)"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expect.arrayContaining(array)"})," correspond \xe0 un tableau re\xe7u qui contient tous les \xe9l\xe9ments du tableau attendu. C'est-\xe0-dire que le tableau attendu est un ",(0,t.jsx)(n.strong,{children:"sous-ensemble"})," du tableau re\xe7u. Par cons\xe9quent, il correspond \xe0 un tableau re\xe7u qui contient des \xe9l\xe9ments qui ",(0,t.jsx)(n.strong,{children:"ne sont pas"})," dans le tableau attendu."]}),"\n",(0,t.jsx)(n.p,{children:"Vous pouvez l'utiliser \xe0 la place d'une valeur litt\xe9rale\xa0:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["in ",(0,t.jsx)(n.code,{children:"toEqual"})," or ",(0,t.jsx)(n.code,{children:"toBeCalledWith"})]}),"\n",(0,t.jsxs)(n.li,{children:["to match a property in ",(0,t.jsx)(n.code,{children:"objectContaining"})," or ",(0,t.jsx)(n.code,{children:"toMatchObject"})]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"describe('arrayContaining', () => {\n  const expected = ['Alice', 'Bob'];\n  it('correspond m\xeame si celui re\xe7u contient des \xe9l\xe9ments suppl\xe9mentaires', () => {\n    expect(['Alice', 'Bob', 'Eve']).toEqual(expect.arrayContaining(expected));\n  });\n  it('ne correspond pas si celui re\xe7u ne contient pas les \xe9l\xe9ments attendus', () => {\n    expect(['Bob', 'Eve']).not.toEqual(expect.arrayContaining(expected));\n  });\n});\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"describe('M\xe9fiez-vous d\\'un malentendu\xa0! Une s\xe9quence de lancers de d\xe9s', () => {\n  const expected = [1, 2, 3, 4, 5, 6];\n  it('correspond m\xeame avec un nombre inattendu, le 7', () => {\n    expect([4, 1, 6, 7, 3, 5, 2, 5, 4, 6]).toEqual(\n      expect.arrayContaining(expected),\n    );\n  });\n  it('ne correspond pas sans un nombre attendu, le 2', () => {\n    expect([4, 1, 6, 7, 3, 5, 7, 5, 4, 6]).not.toEqual(\n      expect.arrayContaining(expected),\n    );\n  });\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"expectnotarraycontainingarray",children:(0,t.jsx)(n.code,{children:"expect.not.arrayContaining(array)"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expect.not.arrayContaining(array)"})," correspond \xe0 un tableau re\xe7u qui ne contient pas tous les \xe9l\xe9ments du tableau attendu. C'est-\xe0-dire que le tableau attendu ",(0,t.jsx)(n.strong,{children:"n'est pas un sous-ensemble"})," du tableau re\xe7u."]}),"\n",(0,t.jsxs)(n.p,{children:["C'est l'inverse de ",(0,t.jsx)(n.code,{children:"expect.arrayContaining"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"describe('not.arrayContaining', () => {\n  const expected = ['Samantha'];\n\n  it('correspond si le tableau actuel ne contient pas les \xe9l\xe9ments attendus', () => {\n    expect(['Alice', 'Bob', 'Eve']).toEqual(\n      expect.not.arrayContaining(expected),\n    );\n  });\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"expectclosetonumber-numdigits",children:(0,t.jsx)(n.code,{children:"expect.closeTo(number, numDigits?)"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expect.closeTo(number, numDigits?)"})," est utile lors de la comparaison de nombres \xe0 virgule flottante dans les propri\xe9t\xe9s de l'objet ou d'\xe9l\xe9ment de tableau. Si vous avez besoin de comparer un nombre, veuillez utiliser ",(0,t.jsx)(n.code,{children:".toBeCloseTo"})," \xe0 la place."]}),"\n",(0,t.jsxs)(n.p,{children:["L'argument optionnel ",(0,t.jsx)(n.code,{children:"numDigits"})," limite le nombre de chiffres \xe0 v\xe9rifier ",(0,t.jsx)(n.strong,{children:"apr\xe8s"})," le point d\xe9cimal. Pour la valeur par d\xe9faut ",(0,t.jsx)(n.code,{children:"2"}),", le crit\xe8re de test est ",(0,t.jsx)(n.code,{children:"Math.abs(expected - received) < 0.005 (that is, 10 ** -2 / 2)"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Par exemple, ce test passe avec une pr\xe9cision de 5 chiffres\xa0:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"test('compare un nombre d\xe9cimal dans les propri\xe9t\xe9s de l\\'objet', () => {\n  expect({\n    title: '0.1 + 0.2',\n    sum: 0.1 + 0.2,\n  }).toEqual({\n    title: '0.1 + 0.2',\n    sum: expect.closeTo(0.3, 5),\n  });\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"expectobjectcontainingobject",children:(0,t.jsx)(n.code,{children:"expect.objectContaining(object)"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expect.objectContaining(object)"})," correspond \xe0 tout objet re\xe7u qui correspond r\xe9cursivement aux propri\xe9t\xe9s attendues. C'est-\xe0-dire que l'objet attendu ",(0,t.jsx)(n.strong,{children:"est un sous-ensemble"})," de l'objet re\xe7u. Par cons\xe9quent, il correspond \xe0 un objet re\xe7u qui contient des propri\xe9t\xe9s qui ",(0,t.jsx)(n.strong,{children:"sont pr\xe9sentes"})," dans l'objet attendu."]}),"\n",(0,t.jsxs)(n.p,{children:["Au lieu de valeurs de propri\xe9t\xe9s litt\xe9rales dans l'objet attendu, vous pouvez utiliser des comparateurs, ",(0,t.jsx)(n.code,{children:"expect.anything()"}),", et ainsi de suite."]}),"\n",(0,t.jsxs)(n.p,{children:["Par exemple, disons que nous nous attendons \xe0 ce qu'une fonction ",(0,t.jsx)(n.code,{children:"onPress"})," soit appel\xe9e avec un objet ",(0,t.jsx)(n.code,{children:"Event"}),", et tout ce que nous devons v\xe9rifier est que l'\xe9v\xe9nement a les propri\xe9t\xe9s ",(0,t.jsx)(n.code,{children:"event.x"})," et ",(0,t.jsx)(n.code,{children:"event.y"}),". Nous pouvons le tester ainsi\xa0:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"test('onPress gets called with the right thing', () => {\n  const onPress = jest.fn();\n  simulatePresses(onPress);\n  expect(onPress).toHaveBeenCalledWith(\n    expect.objectContaining({\n      x: expect.any(Number),\n      y: expect.any(Number),\n    }),\n  );\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"expectnotobjectcontainingobject",children:(0,t.jsx)(n.code,{children:"expect.not.objectContaining(object)"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expect.not.objectContaining(object)"})," correspond \xe0 tout objet re\xe7u qui ne correspond pas r\xe9cursivement aux propri\xe9t\xe9s attendues. C'est-\xe0-dire que l'objet attendu ",(0,t.jsx)(n.strong,{children:"n'est pas un sous-ensemble"})," de l'objet re\xe7u. Par cons\xe9quent, il correspond \xe0 un objet re\xe7u qui contient des propri\xe9t\xe9s qui ",(0,t.jsx)(n.strong,{children:"ne sont pas"})," dans l'objet attendu."]}),"\n",(0,t.jsxs)(n.p,{children:["C'est l'inverse de ",(0,t.jsx)(n.code,{children:"expect.objectContaining"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"describe('not.objectContaining', () => {\n  const expected = {foo: 'bar'};\n\n  it('correspond si l\\'objet r\xe9el ne contient pas les paires cl\xe9-valeur attendues', () => {\n    expect({bar: 'baz'}).toEqual(expect.not.objectContaining(expected));\n  });\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"expectstringcontainingstring",children:(0,t.jsx)(n.code,{children:"expect.stringContaining(string)"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expect.stringContaining(string)"})," correspond \xe0 la valeur re\xe7ue si c'est une cha\xeene qui contient exactement la cha\xeene attendue."]}),"\n",(0,t.jsx)(n.h3,{id:"expectnotstringcontainingstring",children:(0,t.jsx)(n.code,{children:"expect.not.stringContaining(string)"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expect.not.stringContaining(string)"})," correspond \xe0 la valeur re\xe7ue si ce n'est pas une cha\xeene ou si c'est une cha\xeene qui ne contient pas la cha\xeene exacte attendue."]}),"\n",(0,t.jsxs)(n.p,{children:["C'est l'inverse de ",(0,t.jsx)(n.code,{children:"expect.stringContaining"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"describe('not.stringContaining', () => {\n  const expected = 'Hello world!';\n\n  it('correspond si la valeur re\xe7ue ne contient pas la sous-cha\xeene attendue', () => {\n    expect('How are you?').toEqual(expect.not.stringContaining(expected));\n  });\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"expectstringmatchingstring--regexp",children:(0,t.jsx)(n.code,{children:"expect.stringMatching(string | regexp)"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expect.stringMatching(string | regexp)"})," correspond \xe0 la valeur re\xe7ue si c'est une cha\xeene qui correspond \xe0 la cha\xeene attendue ou \xe0 l'expression r\xe9guli\xe8re."]}),"\n",(0,t.jsx)(n.p,{children:"Vous pouvez l'utiliser \xe0 la place d'une valeur litt\xe9rale\xa0:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["in ",(0,t.jsx)(n.code,{children:"toEqual"})," or ",(0,t.jsx)(n.code,{children:"toBeCalledWith"})]}),"\n",(0,t.jsxs)(n.li,{children:["to match an element in ",(0,t.jsx)(n.code,{children:"arrayContaining"})]}),"\n",(0,t.jsxs)(n.li,{children:["to match a property in ",(0,t.jsx)(n.code,{children:"objectContaining"})," or ",(0,t.jsx)(n.code,{children:"toMatchObject"})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Cet exemple montre \xe9galement comment vous pouvez imbriquer plusieurs comparateurs asym\xe9triques, avec ",(0,t.jsx)(n.code,{children:"expect.stringMatching"})," \xe0 l'int\xe9rieur du ",(0,t.jsx)(n.code,{children:"expect.arrayContaining"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"describe('stringMatching in arrayContaining', () => {\n  const expected = [\n    expect.stringMatching(/^Alic/),\n    expect.stringMatching(/^[BR]ob/),\n  ];\n  it('correspond m\xeame si celle re\xe7ue contient des \xe9l\xe9ments suppl\xe9mentaires', () => {\n    expect(['Alicia', 'Roberto', 'Evelina']).toEqual(\n      expect.arrayContaining(expected),\n    );\n  });\n  it('ne correspond pas si celle re\xe7ue ne contient pas les \xe9l\xe9ments attendus', () => {\n    expect(['Roberto', 'Evelina']).not.toEqual(\n      expect.arrayContaining(expected),\n    );\n  });\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"expectnotstringmatchingstring--regexp",children:(0,t.jsx)(n.code,{children:"expect.not.stringMatching(string | regexp)"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expect.not.stringMatching(string | regexp)"})," correspond \xe0 la valeur re\xe7ue si ce n'est pas une cha\xeene ou si c'est une cha\xeene qui ne correspond pas \xe0 la cha\xeene ou \xe0 l'expression r\xe9guli\xe8re attendue."]}),"\n",(0,t.jsxs)(n.p,{children:["C'est l'inverse de ",(0,t.jsx)(n.code,{children:"expect.stringMatching"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"describe('not.stringMatching', () => {\n  const expected = /Hello world!/;\n\n  it('correspond si la valeur re\xe7ue ne correspond pas \xe0 la regex attendue', () => {\n    expect('How are you?').toEqual(expect.not.stringMatching(expected));\n  });\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"assertion-count",children:"Assertion Count"}),"\n",(0,t.jsx)(n.h3,{id:"expectassertionsnumber",children:(0,t.jsx)(n.code,{children:"expect.assertions(number)"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expect.assertions(number)"})," v\xe9rifie qu'un certain nombre d'assertions sont appel\xe9es lors d'un test. Ceci est souvent utile lors des tests de code asynchrone, afin de s'assurer que les assertions dans un callback ont \xe9t\xe9 effectivement appel\xe9es."]}),"\n",(0,t.jsxs)(n.p,{children:["Par exemple, supposons que nous ayons une fonction ",(0,t.jsx)(n.code,{children:"doAsync"})," qui re\xe7oit deux callbacks ",(0,t.jsx)(n.code,{children:"callback1"})," et ",(0,t.jsx)(n.code,{children:"callback2"}),", elle va les appeler de mani\xe8re asynchrone dans un ordre inconnu. Nous pouvons le tester ainsi\xa0:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"test('doAsync appelle les deux callbacks', () => {\n  expect.assertions(2);\n  function callback1(data) {\n    expect(data).toBeTruthy();\n  }\n  function callback2(data) {\n    expect(data).toBeTruthy();\n  }\n\n  doAsync(callback1, callback2);\n});\n"})}),"\n",(0,t.jsxs)(n.p,{children:["L'appel ",(0,t.jsx)(n.code,{children:"expect.assertions(2)"})," garantit que les deux callbacks sont effectivement appel\xe9s."]}),"\n",(0,t.jsx)(n.h3,{id:"expecthasassertions",children:(0,t.jsx)(n.code,{children:"expect.hasAssertions()"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expect.hasAssertions()"})," v\xe9rifie qu'au moins une assertion est appel\xe9e lors d'un test. Ceci est souvent utile lors des tests de code asynchrone, afin de s'assurer que les assertions dans un callback ont \xe9t\xe9 effectivement appel\xe9es."]}),"\n",(0,t.jsxs)(n.p,{children:["Par exemple, disons que nous avons quelques fonctions qui traitent toutes de l'\xe9tat. ",(0,t.jsx)(n.code,{children:"prepareState"})," appelle une callback avec un objet d'\xe9tat, ",(0,t.jsx)(n.code,{children:"validateState"})," s'ex\xe9cute sur cet objet d'\xe9tat, et ",(0,t.jsx)(n.code,{children:"waitOnState"})," renvoie une promesse qui attend que toutes les callbacks de ",(0,t.jsx)(n.code,{children:"prepareState"})," se terminent. Nous pouvons le tester ainsi\xa0:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"test('prepareState pr\xe9pare un \xe9tat valide', () => {\n  expect.hasAssertions();\n  prepareState(state => {\n    expect(validateState(state)).toBeTruthy();\n  });\n  return waitOnState();\n});\n"})}),"\n",(0,t.jsxs)(n.p,{children:["L'appel ",(0,t.jsx)(n.code,{children:"expect.hasAssertions()"})," garantit que la callback ",(0,t.jsx)(n.code,{children:"prepareState"})," est effectivement appel\xe9e."]}),"\n",(0,t.jsx)(n.h2,{id:"extend-utilities",children:"Extend Utilities"}),"\n",(0,t.jsx)(n.h3,{id:"expectaddequalitytesterstesters",children:(0,t.jsx)(n.code,{children:"expect.addEqualityTesters(testers)"})}),"\n",(0,t.jsxs)(n.p,{children:["You can use ",(0,t.jsx)(n.code,{children:"expect.addEqualityTesters"})," to add your own methods to test if two objects are equal. For example, let's say you have a class in your code that represents volume and can determine if two volumes using different units are equal. You may want ",(0,t.jsx)(n.code,{children:"toEqual"})," (and other equality matchers) to use this custom equality method when comparing to Volume classes. You can add a custom equality tester to have ",(0,t.jsx)(n.code,{children:"toEqual"})," detect and apply custom logic when comparing Volume classes:"]}),"\n",(0,t.jsxs)(o.Z,{groupId:"code-examples",children:[(0,t.jsxs)(i.Z,{value:"js",label:"JavaScript",children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'tab={"span":3} title="Volume.js"',children:"// For simplicity in this example, we'll just support the units 'L' and 'mL'\nexport class Volume {\n  constructor(amount, unit) {\n    this.amount = amount;\n    this.unit = unit;\n  }\n\n  toString() {\n    return `[Volume ${this.amount}${this.unit}]`;\n  }\n\n  equals(other) {\n    if (this.unit === other.unit) {\n      return this.amount === other.amount;\n    } else if (this.unit === 'L' && other.unit === 'mL') {\n      return this.amount * 1000 === other.unit;\n    } else {\n      return this.amount === other.unit * 1000;\n    }\n  }\n}\n"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="areVolumesEqual.js"',children:"import {expect} from '@jest/globals';\nimport {Volume} from './Volume.js';\n\nfunction areVolumesEqual(a, b) {\n  const isAVolume = a instanceof Volume;\n  const isBVolume = b instanceof Volume;\n\n  if (isAVolume && isBVolume) {\n    return a.equals(b);\n  } else if (isAVolume !== isBVolume) {\n    return false;\n  } else {\n    return undefined;\n  }\n}\n\nexpect.addEqualityTesters([areVolumesEqual]);\n"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="__tests__/Volume.test.js"',children:"import {expect, test} from '@jest/globals';\nimport {Volume} from '../Volume.js';\nimport '../areVolumesEqual.js';\n\ntest('are equal with different units', () => {\n  expect(new Volume(1, 'L')).toEqual(new Volume(1000, 'mL'));\n});\n"})})]}),(0,t.jsxs)(i.Z,{value:"ts",label:"TypeScript",children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'tab={"span":3} title="Volume.ts"',children:"// For simplicity in this example, we'll just support the units 'L' and 'mL'\nexport class Volume {\n  public amount: number;\n  public unit: 'L' | 'mL';\n\n  constructor(amount: number, unit: 'L' | 'mL') {\n    this.amount = amount;\n    this.unit = unit;\n  }\n\n  toString(): string {\n    return `[Volume ${this.amount}${this.unit}]`;\n  }\n\n  equals(other: Volume): boolean {\n    if (this.unit === other.unit) {\n      return this.amount === other.amount;\n    } else if (this.unit === 'L' && other.unit === 'mL') {\n      return this.amount * 1000 === other.amount;\n    } else {\n      return this.amount === other.amount * 1000;\n    }\n  }\n}\n"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'title="areVolumesEqual.ts"',children:"import {expect} from '@jest/globals';\nimport {Volume} from './Volume.js';\n\nfunction areVolumesEqual(a: unknown, b: unknown): boolean | undefined {\n  const isAVolume = a instanceof Volume;\n  const isBVolume = b instanceof Volume;\n\n  if (isAVolume && isBVolume) {\n    return a.equals(b);\n  } else if (isAVolume !== isBVolume) {\n    return false;\n  } else {\n    return undefined;\n  }\n}\n\nexpect.addEqualityTesters([areVolumesEqual]);\n"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'title="__tests__/Volume.test.ts"',children:"import {expect, test} from '@jest/globals';\nimport {Volume} from '../Volume.js';\nimport '../areVolumesEqual.js';\n\ntest('are equal with different units', () => {\n  expect(new Volume(1, 'L')).toEqual(new Volume(1000, 'mL'));\n});\n"})})]})]}),"\n",(0,t.jsx)(n.h4,{id:"custom-equality-testers-api",children:"Custom equality testers API"}),"\n",(0,t.jsxs)(n.p,{children:["Custom testers are functions that return either the result (",(0,t.jsx)(n.code,{children:"true"})," or ",(0,t.jsx)(n.code,{children:"false"}),") of comparing the equality of the two given arguments or ",(0,t.jsx)(n.code,{children:"undefined"})," if the tester does not handle the given objects and wants to delegate equality to other testers (for example, the builtin equality testers)."]}),"\n",(0,t.jsx)(n.p,{children:"Custom testers are called with 3 arguments: the two objects to compare and the array of custom testers (used for recursive testers, see the section below)."}),"\n",(0,t.jsxs)(n.p,{children:["These helper functions and properties can be found on ",(0,t.jsx)(n.code,{children:"this"})," inside a custom tester:"]}),"\n",(0,t.jsx)(n.h4,{id:"thisequalsa-b-customtesters",children:(0,t.jsx)(n.code,{children:"this.equals(a, b, customTesters?)"})}),"\n",(0,t.jsxs)(n.p,{children:["Il s'agit d'une fonction d'\xe9galit\xe9 profonde qui retournera ",(0,t.jsx)(n.code,{children:"true"})," si deux objets ont les m\xeames valeurs (de mani\xe8re r\xe9cursive). It optionally takes a list of custom equality testers to apply to the deep equality checks. If you use this function, pass through the custom testers your tester is given so further equality checks ",(0,t.jsx)(n.code,{children:"equals"})," applies can also use custom testers the test author may have configured. See the example in the ",(0,t.jsx)(n.a,{href:"#recursive-custom-equality-testers",children:"Recursive custom equality testers"})," section for more details."]}),"\n",(0,t.jsx)(n.h4,{id:"matchers-vs-testers",children:"Matchers vs Testers"}),"\n",(0,t.jsxs)(n.p,{children:["Matchers are methods available on ",(0,t.jsx)(n.code,{children:"expect"}),", for example ",(0,t.jsx)(n.code,{children:"expect().toEqual()"}),". ",(0,t.jsx)(n.code,{children:"toEqual"})," is a matcher. A tester is a method used by matchers that do equality checks to determine if objects are the same."]}),"\n",(0,t.jsxs)(n.p,{children:["Custom matchers are good to use when you want to provide a custom assertion that test authors can use in their tests. For example, the ",(0,t.jsx)(n.code,{children:"toBeWithinRange"})," example in the ",(0,t.jsx)(n.a,{href:"#expectextendmatchers",children:(0,t.jsx)(n.code,{children:"expect.extend"})})," section is a good example of a custom matcher. Sometimes a test author may want to assert two numbers are exactly equal and should use ",(0,t.jsx)(n.code,{children:"toBe"}),". Other times, however, a test author may want to allow for some flexibility in their test, and ",(0,t.jsx)(n.code,{children:"toBeWithinRange"})," may be a more appropriate assertion."]}),"\n",(0,t.jsxs)(n.p,{children:["Custom equality testers are good for globally extending Jest matchers to apply custom equality logic for all equality comparisons. Test authors can't turn on custom testers for certain assertions and turn them off for others (a custom matcher should be used instead if that behavior is desired). For example, defining how to check if two ",(0,t.jsx)(n.code,{children:"Volume"})," objects are equal for all matchers would be a good custom equality tester."]}),"\n",(0,t.jsx)(n.h4,{id:"recursive-custom-equality-testers",children:"Recursive custom equality testers"}),"\n",(0,t.jsxs)(n.p,{children:["If your custom equality testers are testing objects with properties you'd like to do deep equality with, you should use the ",(0,t.jsx)(n.code,{children:"this.equals"})," helper available to equality testers. This ",(0,t.jsx)(n.code,{children:"equals"})," method is the same deep equals method Jest uses internally for all of its deep equality comparisons. It's the method that invokes your custom equality tester. It accepts an array of custom equality testers as a third argument. Custom equality testers are also given an array of custom testers as their third argument. Pass this argument into the third argument of ",(0,t.jsx)(n.code,{children:"equals"})," so that any further equality checks deeper into your object can also take advantage of custom equality testers."]}),"\n",(0,t.jsxs)(n.p,{children:["For example, let's say you have a ",(0,t.jsx)(n.code,{children:"Book"})," class that contains an array of ",(0,t.jsx)(n.code,{children:"Author"})," classes and both of these classes have custom testers. The ",(0,t.jsx)(n.code,{children:"Book"})," custom tester would want to do a deep equality check on the array of ",(0,t.jsx)(n.code,{children:"Author"}),"s and pass in the custom testers given to it, so the ",(0,t.jsx)(n.code,{children:"Author"}),"s custom equality tester is applied:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="customEqualityTesters.js"',children:"function areAuthorEqual(a, b) {\n  const isAAuthor = a instanceof Author;\n  const isBAuthor = b instanceof Author;\n\n  if (isAAuthor && isBAuthor) {\n    // Authors are equal if they have the same name\n    return a.name === b.name;\n  } else if (isAAuthor !== isBAuthor) {\n    return false;\n  } else {\n    return undefined;\n  }\n}\n\nfunction areBooksEqual(a, b, customTesters) {\n  const isABook = a instanceof Book;\n  const isBBook = b instanceof Book;\n\n  if (isABook && isBBook) {\n    // Books are the same if they have the same name and author array. We need\n    // to pass customTesters to equals here so the Author custom tester will be\n    // used when comparing Authors\n    return (\n      a.name === b.name && this.equals(a.authors, b.authors, customTesters)\n    );\n  } else if (isABook !== isBBook) {\n    return false;\n  } else {\n    return undefined;\n  }\n}\n\nexpect.addEqualityTesters([areAuthorsEqual, areBooksEqual]);\n"})}),"\n",(0,t.jsx)(n.admonition,{title:"remarque",type:"note",children:(0,t.jsxs)(n.p,{children:["Remember to define your equality testers as regular functions and ",(0,t.jsx)(n.strong,{children:"not"})," arrow functions in order to access the tester context helpers (e.g. ",(0,t.jsx)(n.code,{children:"this.equals"}),")."]})}),"\n",(0,t.jsx)(n.h3,{id:"expectaddsnapshotserializerserializer",children:(0,t.jsx)(n.code,{children:"expect.addSnapshotSerializer(serializer)"})}),"\n",(0,t.jsxs)(n.p,{children:["Vous pouvez appeler ",(0,t.jsx)(n.code,{children:"expect.addSnapshotSerializer"})," pour ajouter un module qui formate les structures de donn\xe9es sp\xe9cifiques \xe0 l'application."]}),"\n",(0,t.jsxs)(n.p,{children:["Pour un fichier de test individuel, un module ajout\xe9 pr\xe9c\xe8de tous les modules de la configuration ",(0,t.jsx)(n.code,{children:"snapshotSerializers"}),", qui pr\xe9c\xe8dent les s\xe9rialiseurs snapshot par d\xe9faut pour les types JavaScript int\xe9gr\xe9s et pour les \xe9l\xe9ments React. Le dernier module ajout\xe9 est le premier module test\xe9."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// affecte les assertions expect(value).toMatchSnapshot() dans le fichier de test\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Si vous ajoutez un s\xe9rialiseur de snapshot dans des fichiers de test individuels au lieu de l'ajouter \xe0 la configuration ",(0,t.jsx)(n.code,{children:"snapshotSerializers"}),"\xa0:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"You make the dependency explicit instead of implicit."}),"\n",(0,t.jsxs)(n.li,{children:["You avoid limits to configuration that might cause you to eject from ",(0,t.jsx)(n.a,{href:"https://github.com/facebookincubator/create-react-app",children:"create-react-app"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Consultez la ",(0,t.jsx)(n.a,{href:"/fr/docs/next/configuration#snapshotserializers-arraystring",children:"configuration de Jest"})," pour plus d'informations."]}),"\n",(0,t.jsx)(n.h3,{id:"expectextendmatchers",children:(0,t.jsx)(n.code,{children:"expect.extend(matchers)"})}),"\n",(0,t.jsxs)(n.p,{children:["Vous pouvez utiliser ",(0,t.jsx)(n.code,{children:"expect.extend"})," pour ajouter vos propres comparateurs \xe0 Jest. Par exemple, supposons que vous testiez une biblioth\xe8que d'utilitaires de nombres et que vous v\xe9rifiiez fr\xe9quemment que les nombres apparaissent dans des plages particuli\xe8res de nombres. Vous pourriez r\xe9sumer cela en un comparateur ",(0,t.jsx)(n.code,{children:"toBeWithinRange"}),"\xa0:"]}),"\n",(0,t.jsxs)(o.Z,{groupId:"code-examples",children:[(0,t.jsxs)(i.Z,{value:"js",label:"JavaScript",children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'tab={"span":3} title="toBeWithinRange.js"',children:"import {expect} from '@jest/globals';\n\nfunction toBeWithinRange(actual, floor, ceiling) {\n  if (\n    typeof actual !== 'number' ||\n    typeof floor !== 'number' ||\n    typeof ceiling !== 'number'\n  ) {\n    throw new Error('These must be of type number!');\n  }\n\n  const pass = actual >= floor && actual <= ceiling;\n  if (pass) {\n    return {\n      message: () =>\n        `expected ${this.utils.printReceived(\n          actual,\n        )} not to be within range ${this.utils.printExpected(\n          `${floor} - ${ceiling}`,\n        )}`,\n      pass: true,\n    };\n  } else {\n    return {\n      message: () =>\n        `expected ${this.utils.printReceived(\n          actual,\n        )} to be within range ${this.utils.printExpected(\n          `${floor} - ${ceiling}`,\n        )}`,\n      pass: false,\n    };\n  }\n}\n\nexpect.extend({\n  toBeWithinRange,\n});\n"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="__tests__/ranges.test.js"',children:"import {expect, test} from '@jest/globals';\nimport '../toBeWithinRange';\n\ntest('is within range', () => expect(100).toBeWithinRange(90, 110));\n\ntest('is NOT within range', () => expect(101).not.toBeWithinRange(0, 100));\n\ntest('asymmetric ranges', () => {\n  expect({apples: 6, bananas: 3}).toEqual({\n    apples: expect.toBeWithinRange(1, 10),\n    bananas: expect.not.toBeWithinRange(11, 20),\n  });\n});\n"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'title="toBeWithinRange.d.ts"',children:"// optionally add a type declaration, e.g. it enables autocompletion in IDEs\ndeclare module 'expect' {\n  interface AsymmetricMatchers {\n    toBeWithinRange(floor: number, ceiling: number): void;\n  }\n  interface Matchers<R> {\n    toBeWithinRange(floor: number, ceiling: number): R;\n  }\n}\n\nexport {};\n"})})]}),(0,t.jsxs)(i.Z,{value:"ts",label:"TypeScript",children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'tab={"span":2} title="toBeWithinRange.ts"',children:"import {expect} from '@jest/globals';\nimport type {MatcherFunction} from 'expect';\n\nconst toBeWithinRange: MatcherFunction<[floor: unknown, ceiling: unknown]> =\n  // `floor` and `ceiling` get types from the line above\n  // it is recommended to type them as `unknown` and to validate the values\n  function (actual, floor, ceiling) {\n    if (\n      typeof actual !== 'number' ||\n      typeof floor !== 'number' ||\n      typeof ceiling !== 'number'\n    ) {\n      throw new Error('These must be of type number!');\n    }\n\n    const pass = actual >= floor && actual <= ceiling;\n    if (pass) {\n      return {\n        message: () =>\n          // `this` context will have correct typings\n          `expected ${this.utils.printReceived(\n            actual,\n          )} not to be within range ${this.utils.printExpected(\n            `${floor} - ${ceiling}`,\n          )}`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () =>\n          `expected ${this.utils.printReceived(\n            actual,\n          )} to be within range ${this.utils.printExpected(\n            `${floor} - ${ceiling}`,\n          )}`,\n        pass: false,\n      };\n    }\n  };\n\nexpect.extend({\n  toBeWithinRange,\n});\n\ndeclare module 'expect' {\n  interface AsymmetricMatchers {\n    toBeWithinRange(floor: number, ceiling: number): void;\n  }\n  interface Matchers<R> {\n    toBeWithinRange(floor: number, ceiling: number): R;\n  }\n}\n"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'tab title="__tests__/ranges.test.ts"',children:"import {expect, test} from '@jest/globals';\nimport '../toBeWithinRange';\n\ntest('is within range', () => expect(100).toBeWithinRange(90, 110));\n\ntest('is NOT within range', () => expect(101).not.toBeWithinRange(0, 100));\n\ntest('asymmetric ranges', () => {\n  expect({apples: 6, bananas: 3}).toEqual({\n    apples: expect.toBeWithinRange(1, 10),\n    bananas: expect.not.toBeWithinRange(11, 20),\n  });\n});\n"})})]})]}),"\n",(0,t.jsx)(n.admonition,{title:"astuce",type:"tip",children:(0,t.jsxs)(n.p,{children:["The type declaration of the matcher can live in a ",(0,t.jsx)(n.code,{children:".d.ts"})," file or in an imported ",(0,t.jsx)(n.code,{children:".ts"})," module (see JS and TS examples above respectively). If you keep the declaration in a ",(0,t.jsx)(n.code,{children:".d.ts"})," file, make sure that it is included in the program and that it is a valid module, i.e. it has at least an empty ",(0,t.jsx)(n.code,{children:"export {}"}),"."]})}),"\n",(0,t.jsxs)(n.admonition,{title:"astuce",type:"tip",children:[(0,t.jsxs)(n.p,{children:["Instead of importing ",(0,t.jsx)(n.code,{children:"toBeWithinRange"})," module to the test file, you can enable the matcher for all tests by moving the ",(0,t.jsx)(n.code,{children:"expect.extend"})," call to a ",(0,t.jsx)(n.a,{href:"Configuration.md/#setupfilesafterenv-array",children:(0,t.jsx)(n.code,{children:"setupFilesAfterEnv"})})," script:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import {expect} from '@jest/globals';\n// remember to export `toBeWithinRange` as well\nimport {toBeWithinRange} from './toBeWithinRange';\n\nexpect.extend({\n  toBeWithinRange,\n});\n"})})]}),"\n",(0,t.jsx)(n.h4,{id:"async-matchers",children:"Async Matchers"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expect.extend"})," prend \xe9galement en charge lescomparateurs asynchrones. Les comparateurs asynchrones renvoient une promesse. Vous devrez donc attendre la valeur renvoy\xe9e. Utilisons un exemple de comparateur pour illustrer leur utilisation. Nous allons impl\xe9menter un comparateur appel\xe9 ",(0,t.jsx)(n.code,{children:"toBeDivisibleByExternalValue"}),", o\xf9 le nombre divisible va \xeatre obtenu \xe0 partir d'une source externe."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"expect.extend({\n  async toBeDivisibleByExternalValue(received) {\n    const externalValue = await getExternalValueFromRemoteSource();\n    const pass = received % externalValue == 0;\n    if (pass) {\n      return {\n        message: () =>\n          `s'attend \xe0 ce que ${received} ne soit pas divisible par ${externalValue}`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () =>\n          `s'attend \xe0 ce que ${received} soit divisible par ${externalValue}`,\n        pass: false,\n      };\n    }\n  },\n});\n\ntest('est divisible par une valeur externe', async () => {\n  await expect(100).toBeDivisibleByExternalValue();\n  await expect(101).not.toBeDivisibleByExternalValue();\n});\n"})}),"\n",(0,t.jsx)(n.h4,{id:"custom-matchers-api",children:"Custom Matchers API"}),"\n",(0,t.jsxs)(n.p,{children:["Les comparateurs doivent retourner un objet (ou une promesse d'un objet) avec deux cl\xe9s. ",(0,t.jsx)(n.code,{children:"pass"})," indique s'il y a eu ou non une correspondance, et ",(0,t.jsx)(n.code,{children:"message"})," fournit une fonction sans arguments qui retourne un message d'erreur en cas d'\xe9chec. Ainsi, lorsque ",(0,t.jsx)(n.code,{children:"pass"})," est faux, ",(0,t.jsx)(n.code,{children:"message"})," devrait retourner le message d'erreur lorsque ",(0,t.jsx)(n.code,{children:"expect(x).yourMatcher()"})," \xe9choue. Et lorsque ",(0,t.jsx)(n.code,{children:"pass"})," est vrai, ",(0,t.jsx)(n.code,{children:"message"})," devrait retourner le message d'erreur lorsque ",(0,t.jsx)(n.code,{children:"expect(x).not.yourMatcher()"})," \xe9choue."]}),"\n",(0,t.jsxs)(n.p,{children:["Les comparateurs sont appel\xe9s avec l'argument pass\xe9 \xe0 ",(0,t.jsx)(n.code,{children:"expect(x)"})," suivi des arguments pass\xe9s \xe0 ",(0,t.jsx)(n.code,{children:".yourMatcher(y, z)"}),"\xa0:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"expect.extend({\n  yourMatcher(x, y, z) {\n    return {\n      pass: true,\n      message: () => '',\n    };\n  },\n});\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Ces fonctions d'aide et propri\xe9t\xe9s peuvent \xeatre trouv\xe9es sur ",(0,t.jsx)(n.code,{children:"this"})," \xe0 l'int\xe9rieur d'un comparateur personnalis\xe9 :"]}),"\n",(0,t.jsx)(n.h4,{id:"thisisnot",children:(0,t.jsx)(n.code,{children:"this.isNot"})}),"\n",(0,t.jsxs)(n.p,{children:["Un bool\xe9en pour vous indiquer que ce comparateur a \xe9t\xe9 appel\xe9 avec le modificateur de n\xe9gation ",(0,t.jsx)(n.code,{children:".not"}),", ce qui vous permet d'afficher une indication claire et correcte du comparateur (voir l'exemple de code)."]}),"\n",(0,t.jsx)(n.h4,{id:"thispromise",children:(0,t.jsx)(n.code,{children:"this.promise"})}),"\n",(0,t.jsx)(n.p,{children:"Une cha\xeene permettant d'afficher un indice de concordance clair et correct :"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"'rejects'"})," if matcher was called with the promise ",(0,t.jsx)(n.code,{children:".rejects"})," modifier"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"'resolves'"})," if matcher was called with the promise ",(0,t.jsx)(n.code,{children:".resolves"})," modifier"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"''"})," if matcher was not called with a promise modifier"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"thisequalsa-b-customtesters-1",children:(0,t.jsx)(n.code,{children:"this.equals(a, b, customTesters?)"})}),"\n",(0,t.jsxs)(n.p,{children:["Il s'agit d'une fonction d'\xe9galit\xe9 profonde qui retournera ",(0,t.jsx)(n.code,{children:"true"})," si deux objets ont les m\xeames valeurs (de mani\xe8re r\xe9cursive). It optionally takes a list of custom equality testers to apply to the deep equality checks (see ",(0,t.jsx)(n.code,{children:"this.customTesters"})," below)."]}),"\n",(0,t.jsx)(n.h4,{id:"thisexpand",children:(0,t.jsx)(n.code,{children:"this.expand"})}),"\n",(0,t.jsxs)(n.p,{children:["Un bool\xe9en pour vous indiquer que ce comparateur a \xe9t\xe9 appel\xe9 avec une option ",(0,t.jsx)(n.code,{children:"expand"}),". Quand Jest est appel\xe9 avec le flag ",(0,t.jsx)(n.code,{children:"--expand"})," , ",(0,t.jsx)(n.code,{children:"this.expand"})," peut \xeatre utilis\xe9 pour d\xe9terminer si Jest est cens\xe9 afficher des diff\xe9rences et des erreurs compl\xe8tes."]}),"\n",(0,t.jsx)(n.h4,{id:"thisutils",children:(0,t.jsx)(n.code,{children:"this.utils"})}),"\n",(0,t.jsxs)(n.p,{children:["There are a number of helpful tools exposed on ",(0,t.jsx)(n.code,{children:"this.utils"})," primarily consisting of the exports from ",(0,t.jsx)(n.a,{href:"https://github.com/jestjs/jest/tree/main/packages/jest-matcher-utils",children:(0,t.jsx)(n.code,{children:"jest-matcher-utils"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Les plus utiles sont ",(0,t.jsx)(n.code,{children:"matcherHint"}),", ",(0,t.jsx)(n.code,{children:"printExpected"})," et ",(0,t.jsx)(n.code,{children:"printReceived"})," pour formater joliment les messages d'erreur. Par exemple, jetez un \u0153il \xe0 l'impl\xe9mentation pour le comparateur ",(0,t.jsx)(n.code,{children:"toBe"}),"\xa0:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const {diff} = require('jest-diff');\nexpect.extend({\n  toBe(received, expected) {\n    const options = {\n      comment: 'Object.is equality',\n      isNot: this.isNot,\n      promise: this.promise,\n    };\n\n    const pass = Object.is(received, expected);\n\n    const message = pass\n      ? () =>\n          // eslint-disable-next-line prefer-template\n          this.utils.matcherHint('toBe', undefined, undefined, options) +\n          '\\n\\n' +\n          `Expected: not ${this.utils.printExpected(expected)}\\n` +\n          `Received: ${this.utils.printReceived(received)}`\n      : () => {\n          const diffString = diff(expected, received, {\n            expand: this.expand,\n          });\n          return (\n            // eslint-disable-next-line prefer-template\n            this.utils.matcherHint('toBe', undefined, undefined, options) +\n            '\\n\\n' +\n            (diffString && diffString.includes('- Expect')\n              ? `Difference:\\n\\n${diffString}`\n              : `Expected: ${this.utils.printExpected(expected)}\\n` +\n                `Received: ${this.utils.printReceived(received)}`)\n          );\n        };\n\n    return {actual: received, message, pass};\n  },\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:"Cela affichera quelque chose comme ceci\xa0:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'  expect(received).toBe(expected)\n\n    Expected value to be (using Object.is):\n      "banana"\n    Received:\n      "apple"\n'})}),"\n",(0,t.jsx)(n.p,{children:"Lorsqu'une assertion \xe9choue, le message d'erreur doit donner autant de d\xe9tails que n\xe9cessaire \xe0 l'utilisateur pour qu'il puisse r\xe9soudre son probl\xe8me rapidement. Vous devez \xe9laborer un message d'\xe9chec pr\xe9cis pour vous assurer que les utilisateurs de vos assertions personnalis\xe9es ont une bonne exp\xe9rience de d\xe9veloppeur."}),"\n",(0,t.jsx)(n.h4,{id:"thiscustomtesters",children:(0,t.jsx)(n.code,{children:"this.customTesters"})}),"\n",(0,t.jsxs)(n.p,{children:["If your matcher does a deep equality check using ",(0,t.jsx)(n.code,{children:"this.equals"}),", you may want to pass user-provided custom testers to ",(0,t.jsx)(n.code,{children:"this.equals"}),". The custom equality testers the user has provided using the ",(0,t.jsx)(n.code,{children:"addEqualityTesters"})," API are available on this property. The built-in Jest matchers pass ",(0,t.jsx)(n.code,{children:"this.customTesters"})," (along with other built-in testers) to ",(0,t.jsx)(n.code,{children:"this.equals"})," to do deep equality, and your custom matchers may want to do the same."]}),"\n",(0,t.jsx)(n.h4,{id:"custom-snapshot-matchers",children:"Custom snapshot matchers"}),"\n",(0,t.jsxs)(n.p,{children:["Pour utiliser les tests de snapshot \xe0 l'int\xe9rieur de votre comparateur personnalis\xe9, vous pouvez importer ",(0,t.jsx)(n.code,{children:"jest-snapshot"})," et l'utiliser depuis votre comparateur."]}),"\n",(0,t.jsxs)(n.p,{children:["Voici un comparateur de snapshot qui d\xe9coupe une cha\xeene de caract\xe8res \xe0 stocker pour une longueur donn\xe9e, ",(0,t.jsx)(n.code,{children:".toMatchTrimmedSnapshot(length)"}),"\xa0:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const {toMatchSnapshot} = require('jest-snapshot');\n\nexpect.extend({\n  toMatchTrimmedSnapshot(received, length) {\n    return toMatchSnapshot.call(\n      this,\n      received.substring(0, length),\n      'toMatchTrimmedSnapshot',\n    );\n  },\n});\n\nit('stocke seulement 10 caract\xe8res', () => {\n  expect('extra long string oh my gerd').toMatchTrimmedSnapshot(10);\n});\n\n/*\nLe snapshot stock\xe9 aura l'apparence suivante\xa0:\n\nexports[`stores only 10 characters: toMatchTrimmedSnapshot 1`] = `\"extra long\"`;\n*/\n"})}),"\n",(0,t.jsx)(n.p,{children:"Il est \xe9galement possible de cr\xe9er des comparateurs personnalis\xe9s pour les snapshots en ligne, les snapshots seront correctement ajout\xe9s aux comparateurs personnalis\xe9s. Cependant, le snapshot en ligne essaiera toujours d'ajouter au premier argument ou au second lorsque le premier argument est le comparateur de propri\xe9t\xe9s, il n'est donc pas possible d'accepter des arguments personnalis\xe9s dans les comparateurs personnalis\xe9s."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const {toMatchInlineSnapshot} = require('jest-snapshot');\n\nexpect.extend({\n  toMatchTrimmedInlineSnapshot(received, ...rest) {\n    return toMatchInlineSnapshot.call(this, received.substring(0, 10), ...rest);\n  },\n});\n\nit('stocke seulement 10 caract\xe8res', () => {\n  expect('extra long string oh my gerd').toMatchTrimmedInlineSnapshot();\n  /*\n  The snapshot will be added inline like\n  expect('extra long string oh my gerd').toMatchTrimmedInlineSnapshot(\n    `\"extra long\"`\n  );\n  */\n});\n"})}),"\n",(0,t.jsx)(n.h4,{id:"async",children:"async"}),"\n",(0,t.jsxs)(n.p,{children:["Si votre comparateur de snapshots en ligne personnalis\xe9 est asynchrone, c'est-\xe0-dire qu'il utilise ",(0,t.jsx)(n.code,{children:"async"}),"-",(0,t.jsx)(n.code,{children:"await"}),', vous pouvez rencontrer une erreur du type "Multiple inline snapshots for the same call are not supported". Jest a besoin d\'informations contextuelles suppl\xe9mentaires pour trouver o\xf9 le comparateur de snapshot en ligne personnalis\xe9 a \xe9t\xe9 utilis\xe9 pour mettre \xe0 jour les snapshots correctement.']}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const {toMatchInlineSnapshot} = require('jest-snapshot');\n\nexpect.extend({\n  async toMatchObservationInlineSnapshot(fn, ...rest) {\n    // L'erreur (et sa stacktrace) doit \xeatre cr\xe9\xe9e avant tout `await`.\n    this.error = new Error();\n\n    // L'impl\xe9mentation de `observe` n'a pas d'importance.\n    // Il importe seulement que le comparateur de snapshots personnalis\xe9 soit asynchrone.\n    const observation = await observe(async () => {\n      await fn();\n    });\n\n    return toMatchInlineSnapshot.call(this, recording, ...rest);\n  },\n});\n\nit('observe quelque chose', async () => {\n  await expect(async () => {\n    return 'async action';\n  }).toMatchTrimmedInlineSnapshot();\n  /*\n  Le snapshot sera ajout\xe9 en ligne comme suit\n  await expect(async () => {\n    return 'async action';\n  }).toMatchTrimmedInlineSnapshot(`\"async action\"`);\n  */\n});\n"})}),"\n",(0,t.jsx)(n.h4,{id:"bail-out",children:"Bail out"}),"\n",(0,t.jsxs)(n.p,{children:["Habituellement, ",(0,t.jsx)(n.code,{children:"jest"})," essaie de faire correspondre chaque snapshot qui est attendu dans un test."]}),"\n",(0,t.jsx)(n.p,{children:"Parfois, il peut \xeatre inutile de poursuivre le test si un snapshot pr\xe9c\xe9dent a \xe9chou\xe9. Par exemple, lorsque vous faites des snapshots d'un \xe9tat-machine apr\xe8s diverses transitions, vous pouvez interrompre le test d\xe8s qu'une transition produit un \xe9tat erron\xe9."}),"\n",(0,t.jsx)(n.p,{children:"Dans ce cas, vous pouvez mettre en place un comparateur de snapshots personnalis\xe9 qui se d\xe9clenche \xe0 la premi\xe8re incoh\xe9rence au lieu de collecter toutes les incoh\xe9rences."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const {toMatchInlineSnapshot} = require('jest-snapshot');\n\nexpect.extend({\n  toMatchStateInlineSnapshot(...args) {\n    this.dontThrow = () => {};\n\n    return toMatchInlineSnapshot.call(this, ...args);\n  },\n});\n\nlet state = 'initial';\n\nfunction transition() {\n  // Une erreur dans l'impl\xe9mentation devrait faire \xe9chouer le test.\n  if (state === 'INITIAL') {\n    state = 'pending';\n  } else if (state === 'pending') {\n    state = 'done';\n  }\n}\n\nit('transitions comme pr\xe9vu', () => {\n  expect(state).toMatchStateInlineSnapshot(`\"initial\"`);\n\n  transition();\n  // Cela produit d\xe9j\xe0 un dysfonctionnement. Il est inutile de poursuivre le test.\n  expect(state).toMatchStateInlineSnapshot(`\"loading\"`);\n\n  transition();\n  expect(state).toMatchStateInlineSnapshot(`\"done\"`);\n});\n"})})]})}const m=function(e={}){const{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(x,e)})):x(e)}},5926:(e,n,s)=>{s.d(n,{ZP:()=>i});var t=s(4246),r=s(1670);function o(e){const n=Object.assign({admonition:"admonition",p:"p",pre:"pre",code:"code",a:"a"},(0,r.ah)(),e.components);return(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsx)(n.p,{children:"Les exemples TypeScript de cette page ne fonctionneront comme document\xe9 que si vous importez explicitement les API Jest\xa0:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import {expect, jest, test} from '@jest/globals';\n"})}),(0,t.jsxs)(n.p,{children:["Veuillez consulter le guide ",(0,t.jsx)(n.a,{href:"/fr/docs/next/getting-started#using-typescript",children:"Premiers pas"})," pour plus de d\xe9tails sur la fa\xe7on de configurer Jest avec TypeScript."]})]})}const i=function(e={}){const{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(o,e)})):o(e)}}}]);