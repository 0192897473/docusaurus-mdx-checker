"use strict";(self.webpackChunkjest_website=self.webpackChunkjest_website||[]).push([[1375],{441:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2022/08/25/jest-29","metadata":{"permalink":"/fr/blog/2022/08/25/jest-29","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2022-08-25-jest-29.md","source":"@site/i18n/fr/docusaurus-plugin-content-blog/2022-08-25-jest-29.md","title":"Jest 29\xa0: Changements de format de snapshot","description":"Jest 29 est l\xe0, juste quelques mois apr\xe8s Jest 28. Comme mentionn\xe9 dans l\'article du blog Jest 28, cette version contient juste quelques changements de rupture, afin de rendre la mise \xe0 jour aussi douce que possible.","date":"2022-08-25T00:00:00.000Z","formattedDate":"25 ao\xfbt 2022","tags":[],"readingTime":0.82,"hasTruncateMarker":true,"authors":[{"name":"Simen Bekkhus","url":"https://github.com/SimenB","imageURL":"https://avatars.githubusercontent.com/u/1404810"}],"frontMatter":{"title":"Jest 29\xa0: Changements de format de snapshot","author":"Simen Bekkhus","authorURL":"https://github.com/SimenB","authorImageURL":"https://avatars.githubusercontent.com/u/1404810"},"unlisted":false,"nextItem":{"title":"Jest rejoint la fondation OpenJS","permalink":"/fr/blog/2022/05/11/jest-joins-openjs"}},"content":"Jest 29 est l\xe0, juste quelques mois apr\xe8s Jest 28. Comme mentionn\xe9 dans l\'[article du blog Jest 28](/blog/2022/04/25/jest-28#future), cette version contient juste quelques changements de rupture, afin de rendre la mise \xe0 jour aussi douce que possible.\\n\\n\x3c!--truncate--\x3e\\n\\nThe only breaking changes that should be noticeable are:\\n\\n- Les versions 12 et 17 de node sont supprim\xe9s, tous deux \xe9tant en fin de vie\\n- La propri\xe9t\xe9 `snapshotFormat` est chang\xe9e en\xa0:\\n\\n  ```diff\\n  + snapshotFormat: {\\n  +   escapeString: false,\\n  +   printBasicPrototype: false\\n  + }\\n  ```\\n\\n- `jest-environment-jsdom` a mis \xe0 jour `jsdom` de la v19 \xe0 la v20\\n\\nIl y a certaines modifications de types expos\xe9s par Jest, mais probablement (esp\xe9rons-le\xa0!) rien qui devrait emp\xeacher la mise \xe0 niveau. Veuillez consulter le [guide de mise \xe0 jour](/docs/upgrading-to-jest29) pour plus de d\xe9tails.\\n\\nC\'est tout pour les changements de rupture\xa0! Esp\xe9rons que la mise \xe0 jour de Jest 28 se fera en douceur. Please see the [changelog](https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2900) for other changes.\\n\\nMerci d\'avoir lu, et heureux Jesting! \ud83c\udccf"},{"id":"/2022/05/11/jest-joins-openjs","metadata":{"permalink":"/fr/blog/2022/05/11/jest-joins-openjs","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2022-05-11-jest-joins-openjs.md","source":"@site/i18n/fr/docusaurus-plugin-content-blog/2022-05-11-jest-joins-openjs.md","title":"Jest rejoint la fondation OpenJS","description":"Image de banni\xe8re pour Meta Open Source et OpenJS Foundation","date":"2022-05-11T00:00:00.000Z","formattedDate":"11 mai 2022","tags":[],"readingTime":0.49,"hasTruncateMarker":false,"authors":[{"name":"Ricky Hanlon","url":"https://github.com/rickhanlonii","imageURL":"https://avatars.githubusercontent.com/u/2440089"}],"frontMatter":{"title":"Jest rejoint la fondation OpenJS","author":"Ricky Hanlon","authorURL":"https://github.com/rickhanlonii","authorImageURL":"https://avatars.githubusercontent.com/u/2440089"},"unlisted":false,"prevItem":{"title":"Jest 29\xa0: Changements de format de snapshot","permalink":"/fr/blog/2022/08/25/jest-29"},"nextItem":{"title":"Jest 28\xa0: Perte de poids et compatibilit\xe9 accrue \ud83e\udef6","permalink":"/fr/blog/2022/04/25/jest-28"}},"content":"![Image de banni\xe8re pour Meta Open Source et OpenJS Foundation](/img/blog/openjs.png)\\n\\nAujourd\'hui, nous sommes heureux d\'annoncer que Jest rejoint la Fondation OpenJS\xa0!\\n\\nCe changement transf\xe8re la propri\xe9t\xe9 du projet de Meta \xe0 l\'\xe9quipe principale de Jest via la Fondation OpenJS en tant que projet d\'impact. Nous sommes reconnaissants envers Meta pour la cr\xe9ation de Jest et pour tout son soutien au fil des ans, et nous nous r\xe9jouissons de l\'avenir de Jest en tant que projet appartenant \xe0 la communaut\xe9 Jest\xa0!\\n\\nConsultez le blog de [l\'ing\xe9nierie Meta](https://developers.facebook.com/blog/post/2022/05/11/meta-open-source-transfers-jest-to-openjs-foundation/) et les annonces du [blog de la Fondation OpenJS](https://openjsf.org/blog/2022/05/11/openjs-foundation-welcomes-jest/) pour plus d\'informations."},{"id":"/2022/04/25/jest-28","metadata":{"permalink":"/fr/blog/2022/04/25/jest-28","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2022-04-25-jest-28.md","source":"@site/i18n/fr/docusaurus-plugin-content-blog/2022-04-25-jest-28.md","title":"Jest 28\xa0: Perte de poids et compatibilit\xe9 accrue \ud83e\udef6","description":"Jest 28 est enfin l\xe0, et il est livr\xe9 avec certaines fonctionnalit\xe9s demand\xe9es depuis longtemps, telles que le support du partage de l\'ex\xe9cution de test sur plusieurs machines, les exports de paquets et la possibilit\xe9 de personnaliser le comportement des faux temporisateurs. Il ne s\'agit l\xe0 que de quelques points marquants et nous en soulignerons d\'autres dans cet article du blog.","date":"2022-04-25T00:00:00.000Z","formattedDate":"25 avril 2022","tags":[],"readingTime":8.02,"hasTruncateMarker":true,"authors":[{"name":"Simen Bekkhus","url":"https://github.com/SimenB","imageURL":"https://avatars.githubusercontent.com/u/1404810"}],"frontMatter":{"title":"Jest 28\xa0: Perte de poids et compatibilit\xe9 accrue \ud83e\udef6","author":"Simen Bekkhus","authorURL":"https://github.com/SimenB","authorImageURL":"https://avatars.githubusercontent.com/u/1404810"},"unlisted":false,"prevItem":{"title":"Jest rejoint la fondation OpenJS","permalink":"/fr/blog/2022/05/11/jest-joins-openjs"},"nextItem":{"title":"Jest 27\xa0: nouvelles valeurs par d\xe9faut pour Jest, \xe9dition 2021 \u23e9","permalink":"/fr/blog/2021/05/25/jest-27"}},"content":"Jest 28 est enfin l\xe0, et il est livr\xe9 avec certaines fonctionnalit\xe9s demand\xe9es depuis longtemps, telles que le support du [partage](/docs/cli#--shard) de l\'ex\xe9cution de test sur plusieurs machines, les [`exports` de paquets](https://nodejs.org/api/packages.html#exports) et la possibilit\xe9 de personnaliser le comportement des [faux temporisateurs](/docs/jest-object#fake-timers). Il ne s\'agit l\xe0 que de quelques points marquants et nous en soulignerons d\'autres dans cet article du blog.\\n\\nDe plus, comme annonc\xe9 dans l\'[article du blog consacr\xe9 \xe0 Jest 27](/blog/2021/05/25/jest-27) l\'ann\xe9e derni\xe8re, nous avons supprim\xe9 de l\'installation par d\xe9faut certains paquets qui ne sont plus utilis\xe9s par d\xe9faut. En cons\xe9quence, la taille de l\'installation a diminu\xe9 d\'environ 1/3.\\n\\n\x3c!--truncate--\x3e\\n\\n## Changements de rupture\\n\\nThe list of breaking changes is long (and can be seen fully in the [changelog](https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2800)), but for migration purposes, we\'ve also written [a guide](/docs/28.x/upgrading-to-jest28) you can follow. Nous esp\xe9rons que cela rendra la mise \xe0 jour aussi simple que possible\xa0!\\n\\nLes principaux changements susceptibles d\'avoir un impact sur votre migration sont l\'abandon du support de Node 10 et 15 (mais _pas_ de Node 12, qui sera d\xe9suet dans quelques jours) et quelques options de configuration renomm\xe9es.\\n\\nVeuillez noter que les deux modules supprim\xe9s (`jest-environment-jsdom` et `jest-jasmine2`) sont toujours activement maintenus et test\xe9s de la m\xeame mani\xe8re, donc le seul changement est que vous devrez les installer explicitement.\\n\\nLe guide devrait, nous l\'esp\xe9rons, rendre la migration triviale, mais notez que si vous utilisez directement l\'un des paquets qui composent Jest (tels que `jest-worker` ou `pretty-format`), au lieu de simplement ex\xe9cuter `jest`, vous devez passer par le changelog pour voir les changements de rupture.\\n\\n## Fonctionnalit\xe9s\\n\\nParlons maintenant des nouvelles fonctionnalit\xe9s de Jest 28, qui sont bien plus int\xe9ressantes\xa0! Et il y en a pas mal, alors accrochez-vous.\\n\\n### Partage de l\'ex\xe9cution des tests\\n\\nJest inclut maintenant une nouvelle option CLI [`--shard`](/docs/cli#--shard), une contribution de [Mario Nebl](https://github.com/marionebl). Elle vous permet d\'ex\xe9cuter des parties de vos tests sur diff\xe9rentes machines, et a \xe9t\xe9 l\'une des plus anciennes demandes de fonctionnalit\xe9s de Jest.\\n\\nLa propre suite de tests de Jest sur CI est pass\xe9e d\'environ 10 minutes \xe0 3 sur Ubuntu, et sur Windows de 20 minutes \xe0 7.\\n\\n### `package.json` `exports`\\n\\nJest a livr\xe9 un support minimal des [`exports`](https://nodejs.org/api/packages.html#exports) en 27.3. Cependant, il ne prenait en charge que le point d\'entr\xe9e \xab\xa0principal\xa0\xbb (`.`), et seulement si aucun champ `main` n\'\xe9tait pr\xe9sent dans `package.json`. Avec Jest 28, nous sommes heureux de vous offrir enfin un support complet !\\n\\nEn relation avec Jest 27, nous avons fourni une condition `require` ou `import`. Dans Jest 28, `jest-environment-node` fournira automatiquement les conditions `node` et `node-addons` tandis que `jest-environment-jsdom` fournira la condition `browser`.\\n\\nCela a \xe9t\xe9 l\'un des plus gros probl\xe8mes de compatibilit\xe9 de Jest, et j\'esp\xe8re que cela sera r\xe9solu une fois pour toutes.\\n\\n### Faux temporisateurs\\n\\nJest 26 a introduit le concept de faux minuteurs \xab modernes \xbb, qui utilise [`@sinonjs/fake-timers`](https://www.npmjs.com/package/@sinonjs/fake-timers) sous le capot, et Jest 27 en a fait la valeur par d\xe9faut. Dans Jest 28, nous exposons d\xe9sormais davantage l\'impl\xe9mentation sous-jacente par le biais des API de configuration et d\'ex\xe9cution. Un grand merci \xe0 [Tom Mrazauskas](https://github.com/mrazauskas) qui a contribu\xe9 \xe0 cette fonctionnalit\xe9 !\\n\\nCela vous permet de ne pas simuler le processus `process.nextTick` qui am\xe9liore la compatibilit\xe9 avec de fausse `Promise`, ou pour activer `advanceTimers` qui avance automatiquement les temporisateurs.\\n\\nVeuillez consulter [la configuration de `fakeTimers`](/docs/configuration#faketimers-object) pour plus de d\xe9tails.\\n\\n### Rapporteur GitHub Actions\\n\\nJest est livr\xe9 avec un rapporteur \xe0 utiliser sur GitHub Actions, qui utilisera des annotations pour afficher les erreurs de test en ligne.\\n\\n![Capture d\'\xe9cran d\'erreur de test des actions GitHub](/img/blog/28-gh-actions-reporter.png)\\n\\nVous pouvez activer ce rapporteur en passant `github-actions` dans [l\'option de configuration `reporters`](/docs/configuration#reporters-arraymodulename--modulename-options).\\n\\nUn grand merci \xe0 [Bernie Reiter](https://github.com/ockham) et aux autres contributeurs pour nous avoir soutenus et avoir finalement obtenu cette fonctionnalit\xe9.\\n\\n### `testEnvironmentOptions`\\n\\nVous pouvez maintenant passer [`testEnvironmentOptions`](/docs/configuration#testenvironmentoptions-object) en ligne dans un fichier, comme vous pouvez d\xe9finir l\'environnement de test. Ceci est utile si vous voulez par exemple changer l\'URL dans un seul fichier.\\n\\n```js\\n/**\\n * @jest-environment jsdom\\n * @jest-environment-options {\\"url\\": \\"https://jestjs.io/\\"}\\n */\\n\\ntest(\'utilisez jsdom et d\xe9finissez l\\\\\'URL dans ce fichier de test\', () => {\\n  expect(window.location.href).toBe(\'https://jestjs.io/\');\\n});\\n```\\n\\n### Tous les globaux de Node.js\\n\\nSi vous utilisez la nouvelle impl\xe9mentation [`fetch`](https://nodejs.org/en/blog/announcements/v18-release-announce/#fetch-experimental) dans Node v18, vous avez peut-\xeatre remarqu\xe9 que cette fonction n\'est pas disponible dans Jest. Le fait de devoir copier manuellement tous les globaux dans les globaux de test est un probl\xe8me de longue date. Avec Jest 28, ce n\'est plus un probl\xe8me car nous inspectons maintenant l\'environnement global dans lequel Jest lui-m\xeame s\'ex\xe9cute, et copions tous les globaux qui manquent dans l\'environnement de test.\\n\\n### Modules ECMAScript\\n\\nPeu de choses ont chang\xe9 dans le support de Jest pour l\'ESM natif depuis la sortie de Jest 27. Nous continuons \xe0 \xeatre bloqu\xe9s par [la stabilisation de Node](https://github.com/nodejs/node/issues/37648), et nous esp\xe9rons que cette situation s\'am\xe9liorera plus t\xf4t que tard !\\n\\nCependant, nous avons pu ajouter quelques nouvelles fonctionnalit\xe9s dans Jest 28.\\n\\n#### Les URL de `data:`\\n\\n[Tommaso Bossi](https://github.com/tbossi) a contribu\xe9 au support des [URL de `data`](https://nodejs.org/api/esm.html#data-imports), ce qui signifie que vous pouvez maintenant d\xe9finir en ligne du JavaScript \xe0 ex\xe9cuter sans utiliser `eval`.\\n\\n#### `import.meta.jest`\\n\\nAlors que vous avez pu acc\xe9der \xe0 `jest` via `importer {jest} depuis \'@jest/globals\'` dans Jest, nous avons re\xe7u des commentaires sur le fait que c\'est moins ergonomique que la variable (apparemment mais pas vraiment) globale `jest` disponible en CJS. Alors Jest 28 est livr\xe9 avec `import.meta.jest` pour permettre un acc\xe8s plus facile.\\n\\n### Divers\\n\\nC\'est beaucoup de fonctionnalit\xe9s, et ce sont mes points forts. Cependant, nous avons encore beaucoup d\'autres choses que je vais passer rapidement :\\n\\n#### R\xe9solveurs asynchrones\\n\\n[Ian VanSchooten](https://github.com/IanVS) a contribu\xe9 au support de [r\xe9solveurs asynchrones](/docs/configuration#resolver-string), qui permet \xe0 des outils comme [Vite](https://vitejs.dev/) d\'avoir de meilleures int\xe9grations avec Jest.\\n\\n#### Fichiers de configuration asynchrones\\n\\nSi vous avez un travail asynchrone que vous voulez faire en utilisant `setupFiles`, vous pouvez maintenant exporter une fonction `async`, que Jest va appeler et attendre avant de charger des tests.\\n\\nNotez que cette fonctionnalit\xe9 n\'est disponible que pour CJS. Pour ESM, nous vous recommandons d\'utiliser `de niveau sup\xe9rieur` \xe0 la place.\\n\\n#### Utilisation de `globalThis`\\n\\nEn interne, Jest a utilis\xe9 `global` pour se r\xe9f\xe9rer \xe0 l\'environnement [global](https://developer.mozilla.org/en-US/docs/Glossary/Global_object). Cependant, comme cela n\'existe que dans Node, et pas dans les navigateurs (`window`), cela a conduit \xe0 une incompatibilit\xe9 lorsque vous essayez d\'utiliser les modules de Jest dans un autre environnement.\\n\\nJest 28 utilise [`globalThis`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis) \xe0 la place, qui fonctionne dans tous les environnements.\\n\\n#### JSDOM 19\\n\\nAlors que, comme mentionn\xe9, Jest ne commercialise plus `jest-environment-jsdom` dans l\'installation par d\xe9faut, il est toujours activement maintenu. Dans le cadre de cela, Jest 28 a fait une mise \xe0 jour de `jsdom@16` \xe0 `jsdom@19`.\\n\\n## TypeScript\\n\\nSi vous utilisez Jest avec TypeScript, soit dans vos tests ou lors de l\'\xe9criture de plugins tels que des ex\xe9cuteurs personnalis\xe9s, Jest 28 apporte de nombreuses am\xe9liorations \xe0 nos types. Voici une liste non exhaustive des changements dans Jest 28.\\n\\n### `expect`\\n\\nLorsque vous utilisez `attendez les propres types de`(soit directement, ou via `importer {expect} \xe0 partir de \'@jest/globals\'`), il est enfin possible d\'ajouter des matchers personnalis\xe9s. See our [example](https://github.com/jestjs/jest/tree/main/examples/expect-extend) for how to do this.\\n\\n### Plugins personnalis\xe9s\\n\\nSi vous \xe9crivez un ex\xe9cuteur personnalis\xe9, un reporteur de test, un r\xe9solveur ou autre chose, nous exportons maintenant plus de types qui devraient vous aider \xe0 taper ces types plus correctement. Il s\'agit d\'une cible en mouvement, donc si vous \xeates l\'auteur de quelque chose de branchable dans Jest et que les types ne sont pas aussi utiles qu\'ils pourraient l\'\xeatre, s\'il vous pla\xeet remplir un probl\xe8me !\\n\\n### `jest-runner-tsd`\\n\\n[`jest-runner-tsd`](https://github.com/jest-community/jest-runner-tsd) est un ex\xe9cuteur personnalis\xe9 pour ex\xe9cuter des tests de type. C\'est ce que Jest utilise lui-m\xeame pour tester nos types, et nous esp\xe9rons qu\'il pourra \xe9galement \xeatre utilis\xe9 par d\'autres ! Comme son nom l\'indique, il est bas\xe9 sur [`tsd`](https://npmjs.com/package/tsd), bien qu\'il soit sous le capot utilise la fourche [`tsd-lite`](https://npmjs.com/package/tsd-lite).\\n\\n---\\n\\nToutes ces am\xe9liorations et corrections ont \xe9t\xe9 apport\xe9es par [Tom Mrazauskas](https://github.com/mrazauskas). Merci beaucoup\xa0! \ud83d\udc4f\\n\\nEnfin, la version minimale de support de TypeScript est maintenant 4.3.\\n\\n## `jest-light-runner`\\n\\nLa derni\xe8re chose que nous voulons mettre en \xe9vidence dans ce blog, est un nouveau coureur Jest tr\xe8s sympa, cr\xe9\xe9 par [Nicolo\u0300 Ribaudo](https://github.com/nicolo-ribaudo), appel\xe9 [`jest-light-runner`](https://www.npmjs.com/package/jest-light-runner). Cela prend presque tout le DX Jest est connu, et acc\xe9l\xe8re sa vitesse en \xe9tant une abstraction plus petite sur le dessus de Node. Les tests de Babel sont devenus presque deux fois plus rapides apr\xe8s la migration. Tant qu\'il y a des avertissements, l\'existence de cet ex\xe9cuteur devrait rendre encore plus facile pour les personnes qui ont des modules de Node plus petite taille de tester pour choisir Jest. Merci, Nicol\xf2\xa0!\\n\\n## A venir\\n\\nAlors que Jest 28 est arriv\xe9 presque un an apr\xe8s Jest 27, Jest 29 arrivera plus t\xf4t, probablement dans quelques mois. Le plan actuel est alors d\'avoir juste un changement de rupture (sauf suppression des versions du n\u0153ud), et c\'est \xe0 d\xe9faut [`snapshotFormat`](/docs/configuration#snapshotformat-object) \xe0 `{escapeString: false, printBasicPrototype: false}`. Cela rend les snapshots \xe0 la fois plus lisibles et plus faciles \xe0 coller.\\n\\nCela sera bien s\xfbr possible de passer outre si vous ne voulez pas changer, mais vous pouvez aussi utiliser ces options aujourd\'hui si vous ne voulez pas attendre !\\n\\n## Remerciements\\n\\nJest 28 contient des contributions de plus de 60 personnes, dont plus de deux tiers sont les premiers contributeurs. Merci beaucoup \xe0 tous les contributeurs, anciens et nouveaux. Sans vous, le projet ne serait pas aussi bon qu\'il est ! J\'aimerais particuli\xe8rement remercier [Tom Mrazauskas](https://github.com/mrazauskas) et [Feng Yu](https://github.com/F3n67u) pour toutes leurs contributions, depuis le code, pour rendre le triage au d\xe9bogage, qui a fait de Jest 28 ce qu\'il est. Merci! \ud83d\ude4f\\n\\nMerci d\'avoir lu, et heureux Jesting! \ud83c\udccf"},{"id":"/2021/05/25/jest-27","metadata":{"permalink":"/fr/blog/2021/05/25/jest-27","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2021-05-25-jest-27.md","source":"@site/i18n/fr/docusaurus-plugin-content-blog/2021-05-25-jest-27.md","title":"Jest 27\xa0: nouvelles valeurs par d\xe9faut pour Jest, \xe9dition 2021 \u23e9","description":"Dans l\'article du blog pour Jest 26, il y a environ un an, nous avons annonc\xe9 qu\'apr\xe8s deux versions majeures avec peu de modifications de rupture, Jest 27 basculera quelques interrupteurs afin de d\xe9finir de meilleures valeurs par d\xe9faut pour les projets qui sont nouveaux ou qui peuvent migrer en douceur. Cela nous donne l\'opportunit\xe9 de retirer certains paquets de la distribution par d\xe9faut de Jest 28 et de les publier en tant que modules installables et connectables s\xe9par\xe9ment. Tous ceux qui utilisent les nouvelles valeurs par d\xe9faut peuvent b\xe9n\xe9ficier d\'une installation plus petite, tandis que ceux qui ont besoin de ces paquets peuvent toujours les installer s\xe9par\xe9ment.","date":"2021-05-25T00:00:00.000Z","formattedDate":"25 mai 2021","tags":[],"readingTime":7.33,"hasTruncateMarker":true,"authors":[{"name":"Tim Seckinger","url":"https://github.com/jeysal","imageURL":"https://avatars.githubusercontent.com/u/16069751"}],"frontMatter":{"title":"Jest 27\xa0: nouvelles valeurs par d\xe9faut pour Jest, \xe9dition 2021 \u23e9","author":"Tim Seckinger","authorURL":"https://github.com/jeysal","authorImageURL":"https://avatars.githubusercontent.com/u/16069751"},"unlisted":false,"prevItem":{"title":"Jest 28\xa0: Perte de poids et compatibilit\xe9 accrue \ud83e\udef6","permalink":"/fr/blog/2022/04/25/jest-28"},"nextItem":{"title":"Mise \xe0 niveau du site web de Jest","permalink":"/fr/blog/2021/03/09/jest-website-upgrade"}},"content":"Dans l\'[article du blog pour Jest 26](/blog/2020/05/05/jest-26), il y a environ un an, nous avons annonc\xe9 qu\'apr\xe8s deux versions majeures avec peu de modifications de rupture, Jest 27 basculera quelques interrupteurs afin de d\xe9finir de meilleures valeurs par d\xe9faut pour les projets qui sont nouveaux ou qui peuvent migrer en douceur. Cela nous donne l\'opportunit\xe9 de retirer certains paquets de la distribution par d\xe9faut de Jest 28 et de les publier en tant que modules installables et connectables s\xe9par\xe9ment. Tous ceux qui utilisent les nouvelles valeurs par d\xe9faut peuvent b\xe9n\xe9ficier d\'une installation plus petite, tandis que ceux qui ont besoin de ces paquets peuvent toujours les installer s\xe9par\xe9ment.\\n\\nAvec le premier changement majeur des valeurs par d\xe9faut depuis les [nouvelles valeurs par d\xe9faut pour Jest](/blog/2016/09/01/jest-15) qui accompagnaient la version 15, Jest 27 est maintenant l\xe0, pour que Jest reste rapide, l\xe9ger et pertinent dans le futur. Nous expliquerons ces changements de valeurs par d\xe9faut et d\'autres changements notables dans cet article, mais tout d\'abord, nous allons aborder les nouvelles fonctionnalit\xe9s\xa0!\\n\\n\x3c!--truncate--\x3e\\n\\n## Mises \xe0 jour des fonctionnalit\xe9s\\n\\nTout d\'abord, le mode interactif que vous connaissez peut-\xeatre pour examiner et mettre \xe0 jour les snapshots en erreur peut d\xe9sormais \xeatre utilis\xe9 pour **passer les tests en erreur** un par un. Credit goes to first-time contributor [@NullDivision](https://github.com/NullDivision) for [implementing](https://github.com/jestjs/jest/pull/10858) this feature!\\n\\n![\xc9chec d\'un test interactif](/img/blog/27-interactive-failures.png)\\n\\nSpeaking of snapshots, one of the more exciting features we\'ve shipped in recent years are Inline Snapshots, which [landed](https://github.com/jestjs/jest/pull/6380) in a minor release of Jest 23 almost three years ago. However, they came with the restriction that projects wanting to utilize them must be using [Prettier](https://prettier.io/) to format their code, because that\'s what Jest would use to make sure the file it writes the snapshots into remains properly formatted.  \\nAnd so for most of these years, we\'ve had a [pull request](https://github.com/jestjs/jest/pull/7792) in the pipeline to eliminate this restriction and allow using **Inline Snapshots without Prettier**. Elle a accumul\xe9 plus d\'une centaine de commentaires, sans m\xeame consid\xe9rer les PR qui s\'en sont d\xe9tach\xe9es et ont atterri en premier, et elle a m\xeame chang\xe9 de propri\xe9taire une fois apr\xe8s la soumission initiale par un autre premier contributeur, [@mmkal](https://github.com/mmkal) sous le titre de travail hilarant \xab\xa0Uglier Inline Snapshots\xa0\xbb (\xab\xa0Snapshots en ligne hideux\xa0\xbb). Avec l\'ascension fulgurante de Prettier ces derniers temps, cette am\xe9lioration est maintenant peut-\xeatre moins n\xe9cessaire qu\'en 2018, mais tout de m\xeame, nous connaissons ce sentiment de se retrouver dans un projet qui n\'utilise pas Prettier, et de ne plus pouvoir soudainement utiliser les snapshots en ligne. Plus jamais \xe7a\xa0!\\n\\nLa raison principale pour laquelle il nous a fallu tant de temps pour r\xe9aliser ce projet \xe9tait, de mani\xe8re assez surprenante, une erreur de m\xe9moire dans notre pipeline de construction. It turns out that the dependencies we load for each test file to perform the parsing, snapshot insertion, and printing do incur a significant time and memory overhead.  \\nSo with some [tricks](https://github.com/jestjs/jest/issues/9898), we\'ve **speed up the initialization per test file** by roughly 70% compared to Jest 26. Notez que vous ne verrez certainement pas une telle am\xe9lioration des performances sur votre projet - vous auriez besoin de beaucoup de fichiers de test qui s\'ex\xe9cutent chacun tr\xe8s rapidement pour mieux le remarquer, et la surcharge lors de l\'utilisation d\'un [environnement JSDOM](/docs/configuration#testenvironment-string) \xe9clipse une telle am\xe9lioration.\\n\\nIn other news, the [native ESM support](https://github.com/jestjs/jest/issues/9430) is progressing, but some major complexities, for instance around mocking, are still ahead of us, and we continue to observe the migration to ESM as a huge ecosystem effort, where Node and a lot of crucial tools and packages all have to rely on each other to deliver an overall compelling experience.  \\nESM support [for plugging modules into Jest](https://github.com/jestjs/jest/issues/11167) is more advanced\u2014custom runners, reporters, watch plugins, and many other modules can already be loaded as ES modules.\\n\\nWe\'ve also merged [a PR](https://github.com/jestjs/jest/pull/9351) to be able to deal with test files symlinked into the test directory, a feature much wanted by users of [Bazel](https://bazel.build/).\\n\\n[Another PR](https://github.com/jestjs/jest/issues/9504) enabled [`transform`s](/docs/configuration#transform-objectstring-pathtotransformer--pathtotransformer-object) to be asynchronous, a requirement to support transpilation through tools such as [esbuild](https://esbuild.github.io/), [Snowpack](https://www.snowpack.dev/), and [Vite](https://vitejs.dev/) effectively.\\n\\n## Inversion des valeurs par d\xe9faut\\n\\nJusqu\'\xe0 pr\xe9sent, si vous utilisiez Jest dans sa configuration par d\xe9faut, vous ex\xe9cutiez - peut-\xeatre sans le savoir - un code fork\xe9 il y a plusieurs ann\xe9es \xe0 partir de l\'ex\xe9cuteur de tests [Jasmine 2.0](https://jasmine.github.io/2.0/introduction) qui fournit des fonctions de framework de test telles que `describe`, `it`, et `beforeEach`. In 2017, [Aaron Abramov](https://github.com/aaronabramov) [initially wrote](https://github.com/jestjs/jest/pull/3668) a **replacement for the Jasmine code** called `jest-circus`, meant to improve error messages, maintainability, and extensibility.  \\nAfter years of large-scale use at Facebook and of course in Jest itself, as well as recent adoption in `create-react-app`, we are now confident that `jest-circus` is highly compatible with `jest-jasmine2` and should work in most environments with little to no migration work. Il peut y avoir des diff\xe9rences mineures dans l\'ordre d\'ex\xe9cution et la rigueur, mais nous ne pr\xe9voyons pas de difficult\xe9s majeures de mise \xe0 niveau autres que pour le code s\'appuyant sur des API sp\xe9cifiques \xe0 Jasmine telles que `jasmine.getEnv()`. Si vous vous appuyez largement sur de telles API, vous pouvez opter \xe0 nouveau pour le gestionnaire de tests bas\xe9 sur Jasmine en [configurant](/docs/configuration#testrunner-string) `\\"testRunner\\" : \\"jest-jasmine2\\"`.\\n\\nL\'ex\xe9cution de tests dans un [environnement JSDOM](/docs/configuration#testenvironment-string) entra\xeene un surco\xfbt de performance non n\xe9gligeable. Parce que c\'\xe9tait le comportement par d\xe9faut de Jest, sauf configuration contraire jusque-l\xe0, les utilisateurs qui \xe9crivent des applications Node, par exemple, peuvent ne m\xeame pas savoir qu\'ils re\xe7oivent un environnement DOM co\xfbteux dont ils n\'ont m\xeame pas besoin.  \\nPour cette raison, nous allons **changer l\'environnement de test par d\xe9faut** de `\\"jsdom\\"` \xe0 `\\"node\\"`. Si vous \xeates affect\xe9 par ce changement parce que vous utilisez les API DOM et que l\'environnement de test n\'est pas explicitement configur\xe9, vous devriez recevoir une erreur lorsque par exemple `document` est acc\xe9d\xe9, et vous pouvez configurer `\\"testEnvironment\\" : \\"jsdom\\"` ou utiliser [la configuration de l\'environnement par fichier](/docs/configuration#testenvironment-string) pour r\xe9soudre ce probl\xe8me.  \\nPour les projets mixtes o\xf9 certains tests n\xe9cessitent un environnement DOM mais d\'autres non, nous recommandons d\'utiliser l\'environnement rapide `\\"node\\"` par d\xe9faut et de d\xe9clarer exactement les tests qui ont besoin du DOM en utilisant des [docblocks](/docs/configuration#testenvironment-string).  \\nDans la prochaine version majeure, nous pr\xe9voyons \xe9galement d\'\xe9liminer `jest-jasmine2` et `jest-environment-jsdom` de l\'arbre de d\xe9pendances de Jest et d\'exiger qu\'ils soient install\xe9s explicitement, afin que de nombreux utilisateurs puissent profiter d\'une taille d\'installation plus petite avec moins de superflu.\\n\\nUne autre valeur par d\xe9faut que nous changeons affecte les faux temporisateurs alias les [simulateurs de temporisation](/docs/timer-mocks). Nous avons introduit une option d\'impl\xe9mentation \xab\xa0moderne\xa0\xbb de faux temporisateurs dans Jest 26 accessible de mani\xe8re transparente via la m\xeame API, mais avec une simulation beaucoup plus compl\xe8te, notamment pour `Date` et `queueMicrotask`.  \\n. Cette **impl\xe9mentation moderne de faux temporisateurs sera d\xe9sormais la valeur par d\xe9faut**. Si vous faites partie des quelques malchanceux qui sont trop lourdement affect\xe9s par les subtiles diff\xe9rences d\'impl\xe9mentation pour migrer, vous pouvez r\xe9cup\xe9rer l\'ancienne impl\xe9mentation en utilisant `jest.useFakeTimers(\\"legacy\\")` ou, si vous activez les faux temporisateurs globalement via [configuration](/docs/configuration#timers-string), `\\"timers\\" : \\"legacy\\"`.\\n\\n## Fonctionnalit\xe9s \xe0 venir avec des changements de rupture\\n\\nNous avons introduit quelques petits changements de rupture suppl\xe9mentaires pour vous aider \xe0 \xe9viter les erreurs en interdisant certaines choses qui peuvent facilement se produire involontairement\xa0:\\n\\n- Le m\xeame callback de test `done` ne peut \xeatre appel\xe9 plus d\'une fois,\\n- l\'appel \xe0 `done` et le retour d\'une promesse ne peuvent pas \xeatre combin\xe9s,\\n- un bloc `describe` ne doit rien retourner,\\n\\nand we [made some TypeScript types stricter](https://github.com/jestjs/jest/pull/10512).\\n\\nLes modules utilis\xe9s dans les options de configuration suivantes sont d\xe9sormais transform\xe9s comme le reste de votre code, ce qui peut \xeatre une rupture si vous comptez sur leur chargement tel quel\xa0:\\n\\n- `testEnvironment`\\n- `runner`\\n- `testRunner`\\n- `snapshotResolver`\\n\\n## Divers changements de rupture\\n\\nNous avons supprim\xe9 certaines fonctions, obsol\xe8tes depuis longtemps\xa0:\\n\\n- `jest.addMatchers` (utilisez `expect.extend` \xe0 la place)\\n- `jest.resetModuleRegistry` (utilisez `jest.resetModules` \xe0 la place)\\n- `jest.runTimersToTime` (utilisez `jest.advanceTimersByTime` \xe0 la place)\\n\\nBeaucoup de paquets de Jest ont \xe9t\xe9 migr\xe9s pour utiliser des exportations de style ESM (bien qu\'ils soient toujours livr\xe9s en tant que CommonJS), donc si vous consommez par exemple `pretty-format` directement, vous devrez peut-\xeatre ajuster votre import en un import `default`.\\n\\nNous avons abandonn\xe9 la prise en charge de Node 13, mais Jest prend toujours en charge les versions _Current_ et toutes les versions _LTS_ de [Node](https://nodejs.org/en/about/releases/) et Jest 27 continue de prendre en charge Node 10, qui est tomb\xe9 en d\xe9su\xe9tude que r\xe9cemment.\\n\\nAs always, the full changelog and list of breaking changes can be [viewed here](https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2700).\\n\\nEnfin, nous tenons \xe0 remercier la communaut\xe9 qui, une fois de plus, a accord\xe9 \xe0 Jest un taux de satisfaction exceptionnel de 96 % dans l\'enqu\xeate [State of JS 2020](https://2020.stateofjs.com/en-US/technologies/testing/)\xa0! Soyez prudents, et nous esp\xe9rons que vous continuerez \xe0 utiliser Jest avec plaisir dans les ann\xe9es et versions \xe0 venir\xa0! \ud83c\udccf"},{"id":"/2021/03/09/jest-website-upgrade","metadata":{"permalink":"/fr/blog/2021/03/09/jest-website-upgrade","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2021-03-09-jest-website-upgrade.md","source":"@site/i18n/fr/docusaurus-plugin-content-blog/2021-03-09-jest-website-upgrade.md","title":"Mise \xe0 niveau du site web de Jest","description":"Nous sommes heureux de vous pr\xe9senter le nouveau site web de Jest\xa0!","date":"2021-03-09T00:00:00.000Z","formattedDate":"9 mars 2021","tags":[],"readingTime":1.34,"hasTruncateMarker":true,"authors":[{"name":"S\xe9bastien Lorber","title":"Mainteneur de Docusaurus","url":"https://sebastienlorber.com","imageURL":"https://github.com/slorber.png"}],"frontMatter":{"title":"Mise \xe0 niveau du site web de Jest","author":"S\xe9bastien Lorber","authorTitle":"Mainteneur de Docusaurus","authorURL":"https://sebastienlorber.com","authorImageURL":"https://github.com/slorber.png"},"unlisted":false,"prevItem":{"title":"Jest 27\xa0: nouvelles valeurs par d\xe9faut pour Jest, \xe9dition 2021 \u23e9","permalink":"/fr/blog/2021/05/25/jest-27"},"nextItem":{"title":"Jest 26\xa0: Tic Tac","permalink":"/fr/blog/2020/05/05/jest-26"}},"content":"Nous sommes heureux de vous pr\xe9senter le **nouveau site web de Jest**\xa0!\\n\\nLe site Jest a \xe9t\xe9 mis \xe0 niveau de **[Docusaurus 1](https://v1.docusaurus.io/)** vers **[Docusaurus 2](https://v2.docusaurus.io/)**, et est un pr\xe9curseur de la [prise en charge de i18n de Docusaurus 2 r\xe9cemment publi\xe9](https://v2.docusaurus.io/blog/2021/03/09/releasing-docusaurus-i18n).\\n\\nAlors, quoi de neuf exactement ?\\n\\n\x3c!--truncate--\x3e\\n\\n## Quoi de neuf ?\\n\\nVoici un bon aper\xe7u des am\xe9liorations les plus visibles\xa0:\\n\\n- **Mode sombre** : changez le sch\xe9ma de couleurs par le biais de l\'interrupteur de la barre de navigation.\\n\\n- **Navigation moderne** : nous avons am\xe9lior\xe9 l\'exp\xe9rience de navigation avec le **routage c\xf4t\xe9 client** et le **pr\xe9-chargement**.\\n\\n- **Liste d\xe9roulante des versions**\xa0: il est maintenant plus simple de passer d\'une version Jest \xe0 une autre.\\n\\n- **Progressive-Web-App**\xa0: vous pouvez installer le site Jest et le parcourir hors ligne.\\n\\n- **Recherche** : essayez la nouvelle exp\xe9rience utilisateur d\'Algolia **DocSearch v3**. Il est maintenant possible de **rechercher dans les articles du blog**.\\n\\n- **I18n**\xa0: Jest est le premier site web utilisant la **[nouvelle fonctionnalit\xe9 i18n de Docusaurus 2](https://v2.docusaurus.io/docs/i18n/introduction)**. Il est maintenant possible de **traduire des articles du blog**.\\n\\n- **MDX**\xa0: int\xe9grer des composants React dans le Markdown permettra aux mainteneurs de rendre la **documentation plus interactive**.\\n\\n## Pour les traducteurs du site\\n\\nSi vous voulez aider \xe0 traduire le nouveau site Jest, veuillez utiliser le nouveau projet Crowdin [jest-v2](https://crowdin.com/project/jest-v2) au lieu du pr\xe9c\xe9dent.\\n\\n:::note remarque\\n\\nDans les pages localis\xe9es, le bouton d\'\xe9dition renvoie d\xe9sormais directement \xe0 Crowdin.\\n\\n:::\\n\\n## Remerciements\\n\\nMerci \xe0 tous les contributeurs qui ont pris en charge ou examin\xe9 cette migration : [Simen](https://github.com/SimenB), [Orta](https://github.com/orta), [Joel](https://github.com/JoelMarcey), [Kristoffer](https://github.com/merceyz)...\\n\\nPlease report any problem on the [migration issue](https://github.com/jestjs/jest/pull/11021)."},{"id":"/2020/05/05/jest-26","metadata":{"permalink":"/fr/blog/2020/05/05/jest-26","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2020-05-05-jest-26.md","source":"@site/i18n/fr/docusaurus-plugin-content-blog/2020-05-05-jest-26.md","title":"Jest 26\xa0: Tic Tac","description":"Lorsque nous avons commenc\xe9 \xe0 reconstruire Jest il y a cinq ans, notre objectif \xe9tait de fournir un ex\xe9cuteur de tests sans configuration, accessible aux d\xe9butants, extensible pour presque tous les cas d\'utilisation de tests et \xe9volutif pour les grands projets. L\'une des versions essentielles a \xe9t\xe9 Jest 15, qui a tout regroup\xe9 et fourni de bonnes valeurs par d\xe9faut permettant aux gens d\'ex\xe9cuter Jest souvent sans aucune configuration. Cependant, cette approche a un gros inconv\xe9nient car Jest installe beaucoup de d\xe9pendances dans vos projets dont vous n\'avez peut-\xeatre pas besoin.","date":"2020-05-05T00:00:00.000Z","formattedDate":"5 mai 2020","tags":[],"readingTime":6.67,"hasTruncateMarker":true,"authors":[{"name":"Christoph Nakazawa","url":"http://twitter.com/cpojer"}],"frontMatter":{"title":"Jest 26\xa0: Tic Tac","author":"Christoph Nakazawa","authorURL":"http://twitter.com/cpojer","authorFBID":100000023028168},"unlisted":false,"prevItem":{"title":"Mise \xe0 niveau du site web de Jest","permalink":"/fr/blog/2021/03/09/jest-website-upgrade"},"nextItem":{"title":"Jest 25\xa0: \ud83d\ude80 pose des fondations pour le futur","permalink":"/fr/blog/2020/01/21/jest-25"}},"content":"Lorsque nous avons commenc\xe9 \xe0 reconstruire Jest il y a cinq ans, notre objectif \xe9tait de fournir un ex\xe9cuteur de tests sans configuration, accessible aux d\xe9butants, extensible pour presque tous les cas d\'utilisation de tests et \xe9volutif pour les grands projets. L\'une des versions essentielles a \xe9t\xe9 [Jest 15](/blog/2016/09/01/jest-15), qui a tout regroup\xe9 et fourni de bonnes valeurs par d\xe9faut permettant aux gens d\'ex\xe9cuter Jest souvent sans aucune configuration. Cependant, cette approche a un gros inconv\xe9nient car Jest installe beaucoup de d\xe9pendances dans vos projets dont vous n\'avez peut-\xeatre pas besoin.\\n\\nNous commen\xe7ons \xe0 rem\xe9dier \xe0 cette lacune et nous nous effor\xe7ons de r\xe9duire la taille de l\'installation de Jest tout en le gardant accessible et extensible. Nous avons apport\xe9 les **changements de rupture** suivants dans Jest 26 :\\n\\n\x3c!--truncate--\x3e\\n\\n- `[expect, jest-mock, pretty-format]` Remove `ES5` build files with a new minimum of support of ES2015 (Node 8) which were only used for browser builds ([#9945](https://github.com/jestjs/jest/pull/9945))\\n\\n  > **Migration** : Avec ce changement, nous poussons la responsabilit\xe9 vers les utilisateurs pour regrouper les paquets affect\xe9s, plut\xf4t que Jest les fournisse directement, puisqu\'ils connaissent mieux leurs environnements cibles. Si vous voulez le r\xe9cup\xe9rer, nous sommes pr\xeats \xe0 les exp\xe9dier s\xe9par\xe9ment. Les PRs sont les bienvenus\xa0!\\n\\n- `[jest-config, jest-resolve]` Remove support for `browser` field ([#9943](https://github.com/jestjs/jest/pull/9943))\\n\\n  > **Migration**\xa0: Installez le module `browser-resolve` et utilisez la configuration suivante\xa0: \\n  > \\n  > ```json\\n  >   {\\n  >     \\"jest\\": {\\n  >       \\"resolver\\": \\"<rootDir>/resolver.js\\"\\n  >     }\\n  >   }\\n  > ```\\n\\n  ```js\\n  // resolver.js\\n  const browserResolve = require(\'browser-resolve\');\\n\\n  module.exports = browserResolve.sync;\\n  ```\\n\\n- TypeScript definitions requires a minimum of TypeScript v3.8 ([#9823](https://github.com/jestjs/jest/pull/9823))\\n\\nAvec les changements ci-dessus, Jest 26 est maintenant 4 MiB plus petit que Jest 25.5.4 (53 \u2192 49 MiB). N\'oubliez pas que de nombreuses d\xe9pendances, comme Babel, font probablement d\xe9j\xe0 partie de votre projet. La taille de Jest a \xe9t\xe9 r\xe9duite de 1,2 MiB (4,3 -> 3,1 MiB).\\n\\nBien qu\'il s\'agisse d\'un bon d\xe9but, cela ne suffit pas \xe0 all\xe9ger significativement Jest. Nous pr\xe9voyons de r\xe9duire progressivement la taille de Jest et de son arbre de d\xe9pendances jusqu\'\xe0 70%. La plupart des changements visant \xe0 r\xe9duire la configuration par d\xe9faut de Jest seront de petits changements de rupture et nous voulons amener la communaut\xe9 avec nous autant que possible. Par cons\xe9quent, nous apporterons les changements suivants dans Jest 27 et Jest 28 en utilisant un [processus de publication \\"Tick-Tock\\"](https://en.wikipedia.org/wiki/Tick%E2%80%93tock_model) :\\n\\n- Jest 27 sera livr\xe9 avec un nouveau runner de test \\"`jest-circus`\\" et l\'environnement Node.js par d\xe9faut. `jest-jasmine2` et `jest-environment-jsdom` seront toujours fournis afin que les utilisateurs puissent continuer \xe0 les utiliser en changeant une ligne chacun dans la configuration.\\n- Jest 28 supprimera `jest-jasmine2` et `jest-environment-jsdom` de la distribution par d\xe9faut de Jest. Les paquets seront toujours activement maintenus dans le cadre du projet Jest et seront publi\xe9s s\xe9par\xe9ment. Les utilisateurs devront installer ces paquets pour les utiliser.\\n\\nLors de la mise \xe0 jour vers ces versions majeures, Jest vous guidera \xe0 travers les changements n\xe9cessaires. Si vous souhaitez prendre de l\'avance et migrer vers les nouveaux param\xe8tres par d\xe9faut d\xe8s maintenant, et que votre projet ne n\xe9cessite pas un environnement DOM, vous pouvez passer \xe0 Jest 26 et ajouter les options de configuration suivantes\xa0:\\n\\n```json\\n{\\n  \\"jest\\": {\\n    \\"testEnvironment\\": \\"node\\",\\n    \\"testRunner\\": \\"jest-circus/runner\\"\\n  }\\n}\\n```\\n\\nJest continuera \xe0 \xeatre livr\xe9 avec `babel-jest` activ\xe9 par d\xe9faut. Il alimente actuellement quelques fonctionnalit\xe9s de Jest au-del\xe0 de la compilation de la syntaxe JavaScript moderne vers quelque chose de compris par les versions actuelles de Node.js et des navigateurs : Il permet \xe9galement la couverture du code de Jest et l\'adaptation des modules ES. Jest est actuellement livr\xe9 avec un support exp\xe9rimental pour [la couverture V8](/blog/2020/01/21/jest-25#v8-code-coverage) et un support natif pour les modules ES (plus sur ce sujet ci-dessous\xa0!). Il n\'est pas possible de simuler des modules ES statiques conform\xe9ment aux sp\xe9cifications sans transformer le code au pr\xe9alable. Nous encouragerons donc les patterns qui fonctionnent sans la transformation pour laquelle nous utilisons Babel aujourd\'hui. Une fois que la couverture V8 et le support ESM natif se seront stabilis\xe9s dans Jest, nous pourrons \xe9galement supprimer `babel-jest` par d\xe9faut mais nous continuerons \xe0 le maintenir.\\n\\n## Nouveaux temporisateurs fictifs\\n\\nAvec Jest 26, nous livrons une nouvelle impl\xe9mentation des temporisateurs fictifs bas\xe9e sur `@sinonjs/fake-timers`. Nous voulions faire cela depuis des ann\xe9es et nous sommes heureux que cela ait finalement progress\xe9 suffisamment pour supporter tous les cas d\'utilisation des temporisateurs fictifs de Jest.\\n\\nLa nouvelle impl\xe9mentation est accompagn\xe9e de fonctionnalit\xe9s suppl\xe9mentaires telles que la simulation de `Date`, `queueMicrotask` et plus encore, consultez [ce README](https://github.com/sinonjs/fake-timers/blob/master/README.md). Il fonctionne de mani\xe8re transparente en utilisant les API de temporisateur existants comme `jest.runAllTimers()` - consultez la documentation [sur notre site web](/docs/timer-mocks).\\n\\nNous sommes convaincus que cette impl\xe9mentation est pr\xeate pour le grand public, mais nous ne voulons pas obliger les gens \xe0 r\xe9\xe9crire leurs tests s\'ils d\xe9pendent de diff\xe9rences subtiles entre l\'ancienne et la nouvelle impl\xe9mentation. Dans Jest 26, cette nouvelle impl\xe9mentation restera _opt-in_ et peut \xeatre activ\xe9e en appelant `jest.useFakeTimers(\'modern\')` ou en passant `modern` \xe0 l\'option `timers` dans votre configuration si vous aviez opt\xe9 pour tous les tests en temporisateurs fictifs pr\xe9c\xe9demment.\\n\\nDans Jest 27, nous \xe9changerons la valeur par d\xe9faut contre la nouvelle impl\xe9mentation \\"modern\\" mais nous continuerons \xe0 soutenir et \xe0 maintenir l\'impl\xe9mentation h\xe9rit\xe9e qui peut \xeatre utilis\xe9e en appelant `jest.useFakeTimers(\'legacy\')`. Si vous n\'\xeates pas s\xfbr de pouvoir mettre \xe0 jour tous vos tests d\'ici la sortie de Jest 27, vous pouvez ajouter cette option \xe0 vos tests maintenant pour conserver l\'ancien comportement.\\n\\nNous tenons \xe0 remercier [Carl-Erik Kopseng](https://github.com/fatso83), [Benjamin Gruenbaum](https://github.com/benjamingr) et les autres mainteneurs de `@sinonjs/fake-timers` pour leur aide et leur patience lorsqu\'ils ont travaill\xe9 avec nous pour que cela se r\xe9alise\xa0! _Int\xe9ressant_.\\n\\n## Une nouvelle fa\xe7on de consommer Jest - `@jest/globals`\\n\\nJest s\'est appuy\xe9 sur les globaux populaires du framework de test Jasmine et d\'autres tels que `describe`, `it`, `test` et `expect`. Bien que ce mod\xe8le soit largement utilis\xe9, de nombreuses personnes ont exprim\xe9 leur pr\xe9f\xe9rence pour l\'importation de fonctions li\xe9es aux tests. Pour prendre en charge ce cas d\'utilisation, nous avons ajout\xe9 un nouveau package `@jest/globals` qui peut \xeatre utilis\xe9 pour importer des fonctions de test\xa0: `import {expect, jest, test} from \'@jest/globals\';`.\\n\\nMises en garde\xa0:\\n\\n- Actuellement, les globales existent encore dans l\'environnement, mais nous allons introduire un mode pour d\xe9sactiver les globales \xe0 l\'avenir. De m\xeame, vous ne pouvez pas utiliser `const jest = require(\'@jest/globals\')` car vous obtiendrez des erreurs de d\xe9claration car la variable `jest` est toujours une globale pour le moment.\\n- Il n\'existe actuellement aucun moyen d\'ajouter des comparateurs personnalis\xe9s aux d\xe9finitions TypeScript lors de l\'utilisation de globaux comme celui-ci.\\n- Bien que cela permette d\'ex\xe9cuter des tests sans globales, cela ne permet pas d\'ex\xe9cuter des tests sans le gestionnaire de tests de Jest pour le moment.\\n\\n## Support natif de l\'ESM\\n\\nComme mentionn\xe9 dans l\'[article du blog Jest 25](/blog/2020/01/21/jest-25#ecmascript-modules-support) nous avons travaill\xe9 sur le support natif des modules ECMAScript. Il n\'est pas encore stable, mais il est pr\xeat \xe0 \xeatre test\xe9. Nous serions ravis de recevoir vos commentaires et vos rapports de bogue ! For an overview of the current state you can check out [this issue](https://github.com/jestjs/jest/issues/9430), or browse all issues with that label [ES Modules](https://github.com/jestjs/jest/labels/ES%20Modules).\\n\\n## Autres changements de rupture dans Jest 26\\n\\n- Dropped support for Node 8 ([#9423](https://github.com/jestjs/jest/pull/9423))\\n- `[jest-environment-jsdom]` Upgrade `jsdom` to v16 ([#9606](https://github.com/jestjs/jest/pull/9606))\\n- `[jest-runtime]` Remove long-deprecated `require.requireActual` and `require.requireMock` methods ([#9854](https://github.com/jestjs/jest/pull/9854))\\n- `[jest-haste-map]` Removed `providesModuleNodeModules` ([#8535](https://github.com/jestjs/jest/pull/8535))\\n- `[jest-circus]` Fail tests if a test takes a done callback and have return values ([#9129](https://github.com/jestjs/jest/pull/9129))\\n- `[jest-circus]` Throw a proper error if a test / hooks is defined asynchronously ([#8096](https://github.com/jestjs/jest/pull/8096))\\n\\n## Prenez soin de vous\\n\\nNous vivons tous actuellement une p\xe9riode d\'incertitude sans pr\xe9c\xe9dent. Si vous avez des difficult\xe9s financi\xe8res, nous aimerions utiliser [le fond collectif ouvert de Jest](https://opencollective.com/jest) pour aider les nouveaux et anciens contributeurs. We place [bounties on some issues](https://github.com/jestjs/jest/issues?q=is%3Aissue+is%3Aopen+bounty+label%3A%22Has+Bounty%22) and are open to offering a bounty on any of our current open issues - you can mention that an issue should have a bounty in the issue or contact [@cpojer via private message on Twitter](https://twitter.com/cpojer).\\n\\nSoyez prudent."},{"id":"/2020/01/21/jest-25","metadata":{"permalink":"/fr/blog/2020/01/21/jest-25","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2020-01-21-jest-25.md","source":"@site/i18n/fr/docusaurus-plugin-content-blog/2020-01-21-jest-25.md","title":"Jest 25\xa0: \ud83d\ude80 pose des fondations pour le futur","description":"Jest 25 pose les bases de nombreux changements majeurs \xe0 l\'avenir. Nous avons donc limit\xe9 au maximum les changements de rupture, mais les modifications de l\'architecture interne peuvent n\xe9cessiter une attention particuli\xe8re pendant la mise \xe0 niveau. Les principaux changements sont une mise \xe0 niveau de JSDOM de la v11 \xe0 la v15, des tests 10-15% plus rapides, une nouvelle vue diff pour les instantan\xe9s p\xe9rim\xe9s et l\'abandon du support de Node 6.","date":"2020-01-21T00:00:00.000Z","formattedDate":"21 janvier 2020","tags":[],"readingTime":8.18,"hasTruncateMarker":true,"authors":[{"name":"Simen Bekkhus","url":"https://github.com/SimenB"}],"frontMatter":{"title":"Jest 25\xa0: \ud83d\ude80 pose des fondations pour le futur","author":"Simen Bekkhus","authorURL":"https://github.com/SimenB","authorFBID":100003004880942},"unlisted":false,"prevItem":{"title":"Jest 26\xa0: Tic Tac","permalink":"/fr/blog/2020/05/05/jest-26"},"nextItem":{"title":"Jest 24\xa0: \ud83d\udc85 Actualisation, polissage, facilit\xe9 d\'utilisation de TypeScript","permalink":"/fr/blog/2019/01/25/jest-24-refreshing-polished-typescript-friendly"}},"content":"Jest 25 pose les bases de nombreux changements majeurs \xe0 l\'avenir. Nous avons donc limit\xe9 au maximum les changements de rupture, mais les modifications de l\'architecture interne peuvent n\xe9cessiter une attention particuli\xe8re pendant la mise \xe0 niveau. Les principaux changements sont une mise \xe0 niveau de JSDOM de la v11 \xe0 la v15, des tests 10-15% plus rapides, une nouvelle vue diff pour les instantan\xe9s p\xe9rim\xe9s et l\'abandon du support de Node 6.\\n\\nThere has been more than 200 commits since Jest 24.9 by more than 80 different contributors, so as always, take a look at the [changelog](https://github.com/jestjs/jest/blob/main/CHANGELOG.md) for a full list of changes.\\n\\n\x3c!--truncate--\x3e\\n\\n## Au revoir Node 6\\n\\nNode 6 est en fin de vie depuis le 30 avril 2019, et Jest 25 le laisse derri\xe8re lui. L\'abandon de Node 6 signifie que nous pouvons mettre \xe0 jour nos d\xe9pendances, la principale \xe9tant JSDOM, qui a \xe9t\xe9 mise \xe0 jour \xe0 la version 15. La mise \xe0 niveau signifie \xe9galement que nous ne devons plus transpiler la syntaxe `async-await`, ce qui se traduit \xe0 la fois par une ex\xe9cution plus rapide du code et une moindre consommation de m\xe9moire. En prime, le code transpil\xe9 de Jest devrait \xeatre plus facile \xe0 d\xe9boguer si quelqu\'un se retrouve \xe0 d\xe9valer cette pente.\\n\\nM\xeame si Node 8 est \xe9galement entr\xe9 en fin de vie, Jest 25 continuera \xe0 le prendre en charge afin de rendre la mise \xe0 niveau aussi facile que possible pour ceux d\'entre nous qui prennent encore en charge Node 8. Elle s\'accompagne cependant de quelques compromis, comme le fait que JSDOM v16 a \xe9t\xe9 publi\xe9 sans le support de Node 8, vous devrez donc utiliser [`jest-environment-jsdom-sixteen`](https://www.npmjs.com/package/jest-environment-jsdom-sixteen) si vous voulez utiliser la derni\xe8re version.\\n\\n## Am\xe9liorations des performances\\n\\nNous avons re\xe7u des rapports indiquant que Jest a ralenti au cours des deux derni\xe8res versions. Jest 25 comprend une mise \xe0 jour de Micromatch, qui apporte des gains \xe9normes en temps de d\xe9marrage, et quelques corrections de bogues et ajustements de performance qui ram\xe8ne Jest \xe0 la vitesse \xe0 laquelle il \xe9tait pour Jest 23. Pour Jest lui-m\xeame, comme mentionn\xe9 au d\xe9but de cet article, cela signifie une r\xe9duction de 10-15% du temps d\'ex\xe9cution des tests. Bien entendu, nous cherchons toujours \xe0 nous am\xe9liorer, alors n\'h\xe9sitez pas \xe0 comparer les r\xe9sultats avec ceux des versions pr\xe9c\xe9dentes et \xe0 signaler les probl\xe8mes qui pourraient survenir\xa0!\\n\\n## Couverture de code V8\\n\\nL\'instrumentation de couverture de code actuelle de Jest est aliment\xe9e par `babel-plugin-istanbul` qui ins\xe8re du code de collecte de couverture de code avant de cr\xe9er des rapports. Cependant, cette m\xe9thode est assez lente et gourmande en m\xe9moire, surtout pour les fichiers et les bases de code volumineux. Heureusement, V8 a une couverture de code int\xe9gr\xe9e, qui devient de plus en plus utilisable dans Node gr\xe2ce au travail acharn\xe9 de [Benjamin Coe](https://github.com/bcoe) et d\'autres membres des \xe9quipes V8 et Node.js. Jest 25 est livr\xe9 avec un support exp\xe9rimental pour cela via un nouveau drapeau `--coverage-provider`. Veuillez consulter sa [documentation](/docs/configuration#coverageprovider-string) pour les avertissements et la fa\xe7on de l\'utiliser.\\n\\n## Penser vite et lentement quand les tests \xe9chouent\\n\\nLes efforts inutiles pour interpr\xe9ter les rapports en cas d\'\xe9chec des tests sont un frein\xa0:\\n\\n- \xab\xa0penser rapidement\xa0\xbb pour reconna\xeetre les mod\xe8les de votre exp\xe9rience pass\xe9e\\n- \xab\xa0penser lentement\xa0\xbb pour analyser les changements et d\xe9cider s\'il s\'agit de progr\xe8s attendus ou de r\xe9gressions inattendues\\n\\nJest 25 ach\xe8ve la seconde moiti\xe9 d\'un effort commenc\xe9 en Jest 24 pour am\xe9liorer tous les comparateurs\xa0:\\n\\n- une ligne de description correcte, y compris les modificateurs `.rejects`, `.resolves` et `.not`\\n- des libell\xe9s concis et un alignement uniforme pour les valeurs attendues et re\xe7ues\\n- inverse la mise en \xe9vidence des diff\xe9rences de sous-cha\xeenes lorsque attendu et re\xe7u sont des cha\xeenes de caract\xe8res\\n- nombre de lignes modifi\xe9es dans les diff\xe9rences pour savoir si c\'est seulement des suppressions ou des insertions\\n\\nNous remercions tout particuli\xe8rement le mainteneur de Jest [Mark Pedrotti](https://github.com/pedrottimark) pour avoir pilot\xe9 cet effort et son travail continu pour rendre les erreurs d\'expectation aussi satisfaisantes que possible.\\n\\n## Couleurs des diff\xe9rences lorsque les tests de snapshot \xe9chouent\\n\\nLe changement le plus \xe9vident pour remplacer la confusion par la confiance est la couleur des lignes de changement dans les diff\xe9rences lorsque les tests snapshot \xe9chouent\xa0:\\n\\n- `- Snapshot` passe du vert au **magenta**\\n- `+ Received` passe du rouge au **bleu sarcelle** sur fond cyan/aqua\\n\\nExemples de rapports de tests (avant \xe0 gauche et apr\xe8s \xe0 droite)\\n\\n1. Le nombre de lignes modifi\xe9es confirme votre premi\xe8re impression\xa0: dans quel sens le snapshot a-t-il chang\xe9 (c\'est-\xe0-dire, lignes supprim\xe9es ou ins\xe9r\xe9es)\\n\\n![snapshot-insert-lines](/img/blog/25-snapshot-insert-lines.png)\\n\\n2. Les couleurs de fond attirent vos yeux pour comparer les lignes modifi\xe9es adjacentes\\n\\n![snapshot-change-lines](/img/blog/25-snapshot-change-lines.png)\\n\\n3. Les couleurs de fond vous aident \xe9galement \xe0 voir quels tests `toThrow` n\xe9cessitent une d\xe9cision sur la mise \xe0 jour ou non du snapshot\\n\\n![snapshot-change-substrings](/img/blog/25-snapshot-change-substrings.png)\\n\\nVoici quelques raisons pour lesquelles nous avons choisi des couleurs uniques\xa0:\\n\\n- Pour 95 % des personnes qui ont une vision compl\xe8te des couleurs, elles peuvent reconna\xeetre rapidement les rapports provenant de tests snapshot par rapport \xe0 tous les autres comparateurs.\\n- Cela r\xe9sout le conflit direct entre la signification du vert/rouge dans les tests Jest et le rouge/vert dans la r\xe9vision du code.\\n- Contrairement \xe0 l\'inversion rouge/vert qui sugg\xe8re que la mise \xe0 jour est la d\xe9cision par d\xe9faut, ceci sugg\xe8re que les diff\xe9rences n\xe9cessitent un examen plus attentif pour une \xe9ventuelle r\xe9gression dans les \xe9checs des tests snapshot locaux que dans la r\xe9vision du code (lorsque les probl\xe8mes ont d\xe9j\xe0 \xe9t\xe9 corrig\xe9s).\\n\\nLa diff\xe9rence de teinte entre le magenta \xe0 300\xb0 et le sarcelle/cyan/aqua \xe0 180\xb0 donne une meilleure accessibilit\xe9 \xe0 la vision des couleurs et la teinte de fond claire pour les lignes modifi\xe9es donne un contraste coh\xe9rent sur les th\xe8mes clairs et fonc\xe9s.\\n\\nIf you maintain a command line tool, you might find inspiration to improve its accessibility in [#9132](https://github.com/jestjs/jest/pull/9132).\\n\\n## Prise en charge des modules ECMAScript\\n\\nNode 13 a un support ESM non signal\xe9, et nous avons commenc\xe9 \xe0 travailler un tout petit peu vers un support natif dans Jest. Jest 25 inclut le support pour les fichiers de configuration `jest.config.cjs` et `jest.config.mjs`, mais les tests eux-m\xeames ne peuvent pas encore \xeatre \xe9crits en utilisant l\'ESM sans quelque chose comme Babel ou TypeScript qui le transforme en CJS.\\n\\nLes API que Jest utilisera sont encore marqu\xe9es et exp\xe9rimentales, donc ne vous attendez pas \xe0 un support imm\xe9diat. [L\'\xe9quipe des modules Node.js](https://github.com/nodejs/modules) travaille activement sur ces API, et nous garderons un \u0153il sur l\'\xe9volution de la situation et nous les exp\xe9rimenterons afin de pouvoir fournir des retours. You can subscribe to [this issue](https://github.com/jestjs/jest/issues/9430) to get any updates about the implementation status in Jest.\\n\\n## Autres am\xe9liorations et mises \xe0 jour\\n\\n- Jest has passed [1000 unique contributors](https://github.com/jestjs/jest/graphs/contributors). C\'est une \xe9tape incroyable\xa0! Merci \xe0 tous ceux qui nous aident \xe0 rendre les tests aussi agr\xe9ables que possible.\\n- Gr\xe2ce au membre de la communaut\xe9 [Josh Rosenstein](https://github.com/JoshRosenstein), Jest prend d\xe9sormais en charge le `BigInt` dans la plupart des comparateurs, tels que `toBeGreaterThan`. Jest comprend \xe9galement les litt\xe9raux bigint imm\xe9diatement.\\n- La fonctionnalit\xe9 de Jest `--detect-leaks` a \xe9t\xe9 d\xe9faillante pour Node 12 et plus r\xe9cent - ceci a \xe9t\xe9 corrig\xe9 dans Jest 25.\\n- Comme annonc\xe9 dans l\'article du blog de Jest 24, la base de code de Jest a \xe9t\xe9 r\xe9\xe9crite en TypeScript - ce travail a \xe9t\xe9 achev\xe9 dans Jest 24.3. Ainsi, si vous utilisez l\'une des parties individuelles de Jest, vous devriez b\xe9n\xe9ficier d\'une excellente int\xe9gration avec l\'IDE. Pour l\'avenir, nous voulons vraiment faire en sorte que les simulations de Jest jouent mieux avec les syst\xe8mes de type, et nous aimerions que la communaut\xe9 nous aide \xe0 cet \xe9gard. Please chime in [here](https://github.com/jestjs/jest/issues/7832) with ideas and send PRs! Nous allons \xe9galement \xe9tudier le d\xe9placement des typages pour l\'utilisation de Jest en tant qu\'ex\xe9cuteur de tests de DefinitelyTyped vers Jest lui-m\xeame.\\n- Le paquet `jest-diff` exporte maintenant des fonctions comme `diffLinesUnified` et `diffStringsUnified` qui ont des options de configuration, afin que d\'autres applications puissent formater les diff\xe9rences d\'une mani\xe8re personnalis\xe9e. Pour plus d\'informations et d\'exemples de code, consultez son nouveau fichier `README.md` dans le d\xe9p\xf4t de Jest ou sur les d\xe9p\xf4ts de paquets.\\n- Gr\xe2ce \xe0 un membre de la communaut\xe9 [Wei An Yen](https://github.com/WeiAnAn), Jest ne mettra plus en \xe9vidence les comparateurs asym\xe9triques passants dans les erreurs d\'expectation. Il s\'agit d\'un probl\xe8me de longue date avec les comparateurs asym\xe9triques et nous sommes tr\xe8s heureux qu\'il soit enfin r\xe9solu.\\n- Pour la deuxi\xe8me ann\xe9e cons\xe9cutive, Jest a remport\xe9 le plus haut prix de satisfaction de [State of JS](https://2019.stateofjs.com/awards/). Nous sommes incroyablement reconnaissants pour le soutien de la communaut\xe9 et esp\xe9rons que nous pourrons tirer parti de cet \xe9lan pour rendre 2020 encore meilleure\xa0!\\n\\n## Plans pour l\'avenir\\n\\n- La configuration de Jest est vaste et quelque peu maladroite - il y a souvent _au moins_ deux fa\xe7ons de faire la m\xeame chose, souvent m\xeame plus. Pour Jest 26, nous esp\xe9rons condenser la configuration et la rendre plus pr\xe9visible. See this [issue](https://github.com/jestjs/jest/issues/7185) for details.\\n- Nous esp\xe9rons \xe9galement \xeatre en mesure de fournir une API programmatique appropri\xe9e pour l\'ex\xe9cution de Jest, afin de faciliter l\'int\xe9gration dans les IDE et autres outils. Please see [this](https://github.com/jestjs/jest/issues/5048) tracking issue.\\n- Il y a eu un PR ouvert pour l\'ajout de Lolex comme impl\xe9mentation des temporisateurs fictifs de Jest depuis d\xe9cembre 2017. Bien que nous ne l\'ajoutons pas \xe0 une API publique dans Jest 25, son support est techniquement inclus et nous cherchons comment l\'exposer pour que les gens puissent le tester et l\'exp\xe9rimenter. L\'utiliser signifie que vous pouvez simuler la date et d\'autres fonctions de temporisation que Jest ne prend pas en compte actuellement. Notez que cela doit \xeatre consid\xe9r\xe9 comme exp\xe9rimental, et un support API appropri\xe9 viendra dans une version ult\xe9rieure. Follow [this PR](https://github.com/jestjs/jest/pull/7776) for the latest updates on the status.\\n\\nHappy Jesting\xa0! \ud83c\udccf"},{"id":"/2019/01/25/jest-24-refreshing-polished-typescript-friendly","metadata":{"permalink":"/fr/blog/2019/01/25/jest-24-refreshing-polished-typescript-friendly","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2019-01-25-jest-24-refreshing-polished-typescript-friendly.md","source":"@site/i18n/fr/docusaurus-plugin-content-blog/2019-01-25-jest-24-refreshing-polished-typescript-friendly.md","title":"Jest 24\xa0: \ud83d\udc85 Actualisation, polissage, facilit\xe9 d\'utilisation de TypeScript","description":"Aujourd\'hui, nous sommes heureux de vous annoncer la prochaine version majeure de Jest - la version 24\xa0! Quatre mois se sont \xe9coul\xe9s depuis la derni\xe8re version mineure, et huit mois depuis Jest 23. Cette mise \xe0 jour est donc importante, et chacun y trouvera son compte\xa0! Parmi les points forts, citons la prise en charge int\xe9gr\xe9e de TypeScript par la mise \xe0 niveau des internes de Jest vers Babel 7, la correction de certains probl\xe8mes de longue date concernant l\'absence de sortie de la console et les probl\xe8mes de performance lors du calcul de diffs importants, ainsi qu\'un tout nouveau site Web \xe9tincelant. \u2728","date":"2019-01-25T00:00:00.000Z","formattedDate":"25 janvier 2019","tags":[],"readingTime":9.235,"hasTruncateMarker":true,"authors":[{"name":"Simen Bekkhus","url":"https://github.com/SimenB"}],"frontMatter":{"title":"Jest 24\xa0: \ud83d\udc85 Actualisation, polissage, facilit\xe9 d\'utilisation de TypeScript","author":"Simen Bekkhus","authorURL":"https://github.com/SimenB","authorFBID":100003004880942},"unlisted":false,"prevItem":{"title":"Jest 25\xa0: \ud83d\ude80 pose des fondations pour le futur","permalink":"/fr/blog/2020/01/21/jest-25"},"nextItem":{"title":"Soutien de Jest Open Source","permalink":"/fr/blog/2018/06/27/supporting-jest-open-source"}},"content":"Aujourd\'hui, nous sommes heureux de vous annoncer la prochaine version majeure de Jest - la version 24\xa0! Quatre mois se sont \xe9coul\xe9s depuis la derni\xe8re version mineure, et huit mois depuis Jest 23. Cette mise \xe0 jour est donc importante, et chacun y trouvera son compte\xa0! Parmi les points forts, citons la prise en charge int\xe9gr\xe9e de TypeScript par la mise \xe0 niveau des internes de Jest vers Babel 7, la correction de certains probl\xe8mes de longue date concernant l\'absence de sortie de la console et les probl\xe8mes de performance lors du calcul de diffs importants, ainsi qu\'un tout nouveau site Web \xe9tincelant. \u2728\\n\\nFor a full list of all changes see the [changelog](https://github.com/jestjs/jest/blob/main/CHANGELOG.md).\\n\\n\x3c!--truncate--\x3e\\n\\n## Nouveau site web\\n\\n[@orta](https://twitter.com/orta) a fourni une belle refonte du site web de Jest, qui a \xe9t\xe9 impl\xe9ment\xe9 par les membres de la communaut\xe9 [@montogeek](https://twitter.com/montogeek) et [@brainkim](https://github.com/brainkim).\\n\\nL\'objectif de la refonte \xe9tait de mettre davantage en \xe9vidence ce qui rend Jest g\xe9nial, et de dissocier l\'id\xe9e que Jest est principalement un outil pour tester les applications React - vous pouvez utiliser Jest pour toutes sortes de projets et nous voulons que cela soit \xe9vident. You can read more about the ideas behind the redesign in [this issue](https://github.com/jestjs/jest/issues/7265).\\n\\n## Prise en charge de TypeScript\\n\\nNous avons mis \xe0 jour Babel 7 en interne pour Jest 24, qui est fourni avec la prise en charge pour les projets TypeScript. Cela signifie que Jest peut supporter la transpilation de TypeScript hors de la bo\xeete, tant que vous configurez Babel pour l\'utiliser avec `@babel/preset-typescript`. La prise en charge par d\xe9faut de TypeScript, similaire \xe0 celle de Flow, pr\xe9sente un inconv\xe9nient\xa0: Babel ne supprimera les annotations de type que pour rendre votre code valide en JavaScript. Il _ne v\xe9rifiera pas_ votre code.\\n\\nBien que Jest prenne en charge Babel 7 depuis la version 22 publi\xe9e en d\xe9cembre 2017, il a fallu utiliser un module passerelle afin de s\'adapter \xe0 la prise en charge de Babel 6 par Jest. Dans Jest 24, nous avons enti\xe8rement migr\xe9 vers Babel 7, avec l\'aide pr\xe9cieuse du membre de la communaut\xe9 [@milesj](https://github.com/milesj). Cela signifie que la configuration est maintenant plus facile et que nous pouvons profiter des autres fonctionnalit\xe9s de Babel 7, comme le chargement de la configuration et la transpilation automatique des `modules`. Assurez-vous de supprimer le `babel-core@^7.0.0-bridge.0` car il n\'est plus n\xe9cessaire maintenant.\\n\\nSi vous voulez ex\xe9cuter des contr\xf4les de type pendant que vous testez, vous devez utiliser [`ts-jest`](https://github.com/kulshekhar/ts-jest). Vous devrez configurer le transformateur, car Jest applique par d\xe9faut Babel aux fichiers `.ts` (et `.tsx`). Alternativement, vous pouvez ex\xe9cuter `tsc` ou m\xeame utiliser un ex\xe9cuteur Jest pour transpiler simultan\xe9ment votre TypeScript tout en ex\xe9cutant vos tests\xa0! Consultez [`jest-runner-tsc`](https://github.com/azz/jest-runner-tsc) pour plus d\'informations.\\n\\nConsultez [les documentations](/docs/getting-started#using-typescript) pour plus de d\xe9tails.\\n\\n:::tip astuce\\n\\nIf you for whatever reason cannot upgrade to Babel 7, you can still use Jest 24 with `babel@6` as long as you keep `babel-jest` at version 23.\\n\\n:::\\n\\n## `test.todo`\\n\\nJest 23 had a change that made tests missing an implementation throw instead of being skipped. This change was made due to feedback that accidentally skipped tests were hard to discover and hard to track down. However, this change broke the workflow for quite a few developers who used the feature to sketch out which tests to write.\\n\\nIn Jest 24, we are addressing this issue by adding an explicit `test.todo` (inspired by the excellent AVA), which will be printed separately in the test summary. It allows you to quickly sketch out which tests you want to write and in the future, an [ESLint](https://eslint.org/) rule might even be able to warn you that you have forgotten to write out some tests.\\n\\n```js\\ntest.todo(\'une entr\xe9e invalide doit \xeatre lev\xe9e\');\\n\\ntest.todo(\'les options manquantes doivent \xeatre normalis\xe9es\');\\n```\\n\\n![test.todo](/img/blog/24-todo.png)\\n\\n## Messages d\'assertion am\xe9lior\xe9s\\n\\nWhen tests fail, you need to make confident and correct decisions which changes are expected progress and which changes are unexpected regressions. It is especially important not to miss a few regressions hidden among much progress. Jest 24 makes reports when assertions fail more clear and concise for several matchers. Because the effort will continue in Jest 25, you might notice some temporary inconsistencies. If your tests never fail, then you won\'t get to see them - for the rest of us, it\'ll be easier to debug why something isn\'t working as expected. Thanks for the hard work by [@ittordepam](https://twitter.com/ittordepam) and other contributors from the community.\\n\\nYou can see these changes across all these PRs: [7621](https://github.com/jestjs/jest/pull/7621), [7557](https://github.com/jestjs/jest/pull/7557), [7448](https://github.com/jestjs/jest/pull/7448), [7325](https://github.com/jestjs/jest/pull/7325), [7241](https://github.com/jestjs/jest/pull/7241), [7152](https://github.com/jestjs/jest/pull/7152), [7125](https://github.com/jestjs/jest/pull/7125), [7107](https://github.com/jestjs/jest/pull/7107), [6961](https://github.com/jestjs/jest/pull/6961).\\n\\nExamples:\\n\\nFailing assertion\\n\\n![failing assertion](/img/blog/24-assertion-error.png)\\n\\nType mismatch\\n\\n![different types](/img/blog/24-different-types.png)\\n\\nMock function not called\\n\\n![mock functions](/img/blog/24-mock-function.png)\\n\\n## R\xe9paration de vieilles douleurs\\n\\nWe\'ve fixed a couple of really old issues in this release.\\n\\nThe first one we\'d like to highlight is `console.log` statements going missing. Jest intercepts and collects all logs in order to give you a stack trace to them, as well as provide them to reporters so you can handle them however you want. However, this has led to an issue where they have simply been missing in certain edge cases. Luckily for Jest 24, [@spion](https://twitter.com/spion) has [stepped up](https://github.com/jestjs/jest/pull/6871) and fixed this issue. Thank you very much!\\n\\nThe second one is an issue where Jest runs out of memory if the difference in serialization of expected and received value has a huge number of insertion changes (either unexpected because of mistake in test or defect in serializer or expected because of temporary failures during test-driven development). [@ittordepam](https://twitter.com/ittordepam) has [replaced](https://github.com/jestjs/jest/pull/6961) the previous diffing algorithm with `diff-sequences` package, which should fix this issue because it uses the theoretical minimum amount of memory. It opens up possibility for word-diffs in the future, similar to what [git provides](https://git-scm.com/docs/git-diff#git-diff---word-diffltmodegt). Please see [this PR](https://github.com/jestjs/jest/pull/4619) and don\'t hesitate to reach out if you want to help make that happen!\\n\\n## Autres faits marquants\\n\\n- Nous avons \xe9galement apport\xe9 quelques am\xe9liorations pour `globalSetup` et `globalTeardown` - la transformation du code leur sera appliqu\xe9e de mani\xe8re similaire \xe0 `setupFiles` et ils sont d\xe9sormais pris en charge en tant que partie int\xe9grante des `projects`.\\n- You can [configure](https://github.com/jestjs/jest/pull/6143) Jest\'s snapshot location, this is mainly useful if you are building tools which use Jest in a larger build process.\\n- Une bizarrerie de la CLI de Jest a \xe9t\xe9 que si certains drapeaux et options ont \xe9t\xe9 \xab\xa0camel cas\xe9s\xa0\xbb (comme `runInBand`), d\'autres ne l\'ont pas \xe9t\xe9 (comme `no-cache`). Dans Jest 24, les deux sont reconnus, ce qui signifie que vous pouvez \xe9crire vos arguments CLI comme vous le souhaitez.\\n- Nous avons renomm\xe9 `setupTestFrameworkScriptFile` en `setupFilesAfterEnv`, et nous l\'avons converti en tableau. Nous esp\xe9rons que cela rendra les options plus claires. Nous avons pr\xe9vu de remanier encore la configuration dans la prochaine version majeure, voir le paragraphe dans la section ci-dessous.\\n- Pour r\xe9duire la quantit\xe9 de magie que Jest effectue pour \xab\xa0juste fonctionner\u2122\xa0\xbb, dans cette version nous avons d\xe9cid\xe9 de laisser tomber l\'injection automatique de `regenerator-runtime`, qui est parfois utilis\xe9 dans le code async compil\xe9. L\'inclusion de `regenerator-runtime` n\'est pas toujours n\xe9cessaire et nous pensons que c\'est \xe0 l\'utilisateur de l\'inclure si c\'est n\xe9cessaire. Si vous utilisez `@babel/preset-env` avec `targets`, d\xe9finissez une version moderne de Node (par exemple Node 6+) vous n\'aurez pas besoin de l\'inclure. Veuillez consulter nos [docs de l\'utilisation de Babel](/docs/getting-started#using-babel) pour plus d\'informations.\\n- Node.js 10 a fourni un module exp\xe9rimental [appel\xe9 `worker_threads`](https://nodejs.org/api/worker_threads.html), qui est similaire aux threads Worker dans le navigateur. `jest-worker`, une partie de la [plateforme Jest](/docs/jest-platform), sera en mesure d\'utiliser `worker_threads` s\'il est disponible au lieu de `child_process`, ce qui le rend encore plus rapide\xa0! [Benchmarks](https://github.com/jestjs/jest/pull/6676) show a 50% improvement. En raison de sa nature exp\xe9rimentale, il n\'est pas activ\xe9 lorsque vous utilisez Jest en tant qu\'ex\xe9cuteur de test, mais vous pouvez l\'utiliser dans vos propres projets aujourd\'hui\xa0! Nous pr\xe9voyons de l\'activer par d\xe9faut lorsqu\'il sera sorti du statut exp\xe9rimental dans Node.js.\\n\\n## Changements de rupture\\n\\nWhile all breaking changes are listed in the [changelog](https://github.com/jestjs/jest/blob/main/CHANGELOG.md), there\'s a few of them that are worth highlighting:\\n\\n- Nous avons fait une mise \xe0 jour vers Micromatch 3. Bien que cela n\'affecte pas tous les utilisateurs, cette version est plus stricte dans l\'analyse des globs que la version 2, qui est utilis\xe9e dans Jest 23. Veuillez lire [ce probl\xe8me](https://github.com/micromatch/micromatch/issues/133#issuecomment-404211484) et les issues li\xe9es pour des exemples de globs invalides au cas o\xf9 vous auriez des probl\xe8mes.\\n- Nous avons supprim\xe9 les restes de code qui \xe9taient n\xe9cessaires pour Node 4. Il \xe9tait auparavant techniquement possible d\'ex\xe9cuter Jest 23 sur Node 4 - ce n\'est plus possible sans polyfill et transpilation.\\n- Quelques changements dans la s\xe9rialisation des fonctions simul\xe9es dans les snapshots - assurez-vous de v\xe9rifier vos snapshots mis \xe0 jour apr\xe8s la mise \xe0 jour de la version. Related [PR](https://github.com/jestjs/jest/pull/6381).\\n- Jest n\'injecte plus automatiquement `regenerator-runtime` - si vous obtenez des erreurs \xe0 ce sujet, assurez-vous de configurer Babel pour qu\'il transpile correctement les fonctions `async` en utilisant par exemple `@babel/preset-env`. Related [PR](https://github.com/jestjs/jest/pull/7595).\\n\\n## L\'avenir\\n\\nWe are incredibly humbled by the results in [State Of JS 2018](https://2018.stateofjs.com/awards/), where Jest won the \u201cHighest Satisfaction\u201d award. Another huge thing to happen in 2018 was in October, when Jest passed 2 million weekly downloads for the first time. Thank you.\\n\\nWe are very thankful for the trust in us shown by the community, and hope to build on it in the future. We will ensure Jest 24 and future releases will continue to build upon this incredible foundation, and continue to be an integral part of JavaScript developers\' toolkits.\\n\\nThis has been the first release where we have explored the idea of using our Open Collective funding to create bug bounties. This worked well in getting non-core developers involved in the implementation of the new landing page, and we\'re optimistic for a long running bug where Jest globals [are mismatched](https://github.com/jestjs/jest/issues/2549) from Node globals. We\'d like to do more, if you have a pet bug that\'s a good candidate for our bounty program, please let us know. In the meantime, you can find all the tickets with a bounty via [the issue label](https://github.com/jestjs/jest/labels/Has%20Bounty).\\n\\nWe have already started to make plans for the next release of Jest 25, with the biggest planned feature being an overhaul of our configuration, which is pretty hard to grok, mainly because of overlapping option and mixing globs and regular expressions. Feedback on how you want Jest\'s configuration to look is very much welcome, and can be submitted in [this issue](https://github.com/jestjs/jest/issues/7185).\\n\\nYou might also have heard that we are planning to migrate the code base from Flow to TypeScript. We are hopeful that this migration will enable even more contributors to jump in and help make 2019 even better for JavaScript testing. \ud83d\ude80 The plan is to land this in a minor release in the not too distant future. Feedback on this choice can be added to [the RFC](https://github.com/jestjs/jest/pull/7554).\\n\\nLastly, if you\'ve ever wondered about how Jest is built, [@cpojer](https://twitter.com/cpojer) has recorded a video with an architectural overview of how Jest is put together under the hood. Feel free to reach out if you have any further questions about it. The video is available on our [website](/docs/architecture).\\n\\nHappy Jesting\xa0! \ud83c\udccf"},{"id":"/2018/06/27/supporting-jest-open-source","metadata":{"permalink":"/fr/blog/2018/06/27/supporting-jest-open-source","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2018-06-27-supporting-jest-open-source.md","source":"@site/i18n/fr/docusaurus-plugin-content-blog/2018-06-27-supporting-jest-open-source.md","title":"Soutien de Jest Open Source","description":"Jest est maintenu par une communaut\xe9 de contributeurs open source et d\'employ\xe9s de Facebook.","date":"2018-06-27T00:00:00.000Z","formattedDate":"27 juin 2018","tags":[],"readingTime":3.045,"hasTruncateMarker":true,"authors":[{"name":"Rick Hanlon II","url":"https://twitter.com/rickhanlonii"}],"frontMatter":{"title":"Soutien de Jest Open Source","author":"Rick Hanlon II","authorURL":"https://twitter.com/rickhanlonii","authorFBID":160800566},"unlisted":false,"prevItem":{"title":"Jest 24\xa0: \ud83d\udc85 Actualisation, polissage, facilit\xe9 d\'utilisation de TypeScript","permalink":"/fr/blog/2019/01/25/jest-24-refreshing-polished-typescript-friendly"},"nextItem":{"title":"Jest 23\xa0: \ud83d\udd25 Des tests rapides et agr\xe9ables","permalink":"/fr/blog/2018/05/29/jest-23-blazing-fast-delightful-testing"}},"content":"Jest est maintenu par une communaut\xe9 de contributeurs open source et d\'employ\xe9s de Facebook.\\n\\nNos contributeurs open source travaillent au nom de la communaut\xe9 pour cr\xe9er de nouvelles fonctionnalit\xe9s, corriger les bogues et maintenir l\'arri\xe9r\xe9 des probl\xe8mes. Les employ\xe9s de Facebook font de m\xeame, concentr\xe9 sur les probl\xe8mes sp\xe9cifiques \xe0 l\'\xe9chelle de Facebook, et ex\xe9cutent toutes les publications propos\xe9es sur l\'\xe9norme suite de test de Facebook avant de les publier.\\n\\nNous faisons tous notre partie pour rendre les tests agr\xe9ables.\\n\\nLors du sommet de Jest, nous avons annonc\xe9 le Jest Open Collective. C\'est notre fa\xe7on d\'aider \xe0 soutenir les efforts de la communaut\xe9 Jest open source. **Pour \xeatre absolument clair : les employ\xe9s de Facebook ne peuvent pas b\xe9n\xe9ficier du Jest Open Collective.** Le seul but du collectif est de soutenir le c\xf4t\xe9 open source de la communaut\xe9 Jest.\\n\\nDans ce poste, nous d\xe9crirons ce qu\'est l\'Open Collective Jest, la structure et les buts que nous avons.\\n\\n\x3c!--truncate--\x3e\\n\\n## The Jest Open Collective\\n\\n![Image de banni\xe8re pour Jest Open Collective](/img/blog/collective.png)\\n\\nOpen Collective est une plateforme de gestion de groupes de personnes de mani\xe8re transparente. Jest rejoint des projets comme [webpack](https://opencollective.com/webpack), [Babel](https://opencollective.com/babel), [Mocha](https://opencollective.com/mochajs), [Preact](https://opencollective.com/preact), [Vue](https://opencollective.com/vuejs), et bien plus encore en soutenant la communaut\xe9 open source \xe0 travers la plateforme Open Collective.\\n\\n### What is the Jest Open Collective\\n\\nLe Jest Open Collective est un groupe de contributeurs open source qui op\xe8rent en toute transparence \xe0\xa0:\\n\\n- Recevoir des fonds des donateurs et des sponsors\\n- Approuver les d\xe9penses soumises par la communaut\xe9\\n- Donner \xe0 tout le monde la visibilit\xe9 du budget\\n\\n### What is the structure of the collective\\n\\nLe Jest Open Collective est actuellement g\xe9r\xe9 par trois contributeurs principaux non-Facebook de la communaut\xe9 Open Source\xa0:\\n\\n- [Michal Pierzchala](https://twitter.com/thymikee)\\n- [Simen Bekkhus](https://github.com/simenb)\\n- [Rick Hanlon](https://twitter.com/rickhanlonii)\\n\\nMichal est un contributeur actif de Jest depuis septembre 2016, Simen a rejoint l\'\xe9quipe principale en juin 2017, et Rick a rejoint l\'\xe9quipe en janvier. Ils sont charg\xe9s de d\xe9finir le budget, d\'approuver les d\xe9penses et de g\xe9rer les administrateurs du collectif. Nous avons choisi de conserver [Christoph Nakazawa](https://twitter.com/cpojer) en tant que conseiller.\\n\\nIl y a deux niveaux de soutien pour le collectif\xa0: le donateur et le sponsor.\\n\\n#### Backers\\n\\nBackers of the collective are individuals contributing at least \\\\$2/month. Nous inclurons une liste de donateurs sur la page d\'accueil de Jest, le README sur la page github/yarn/npm, et la page des contributeurs.\\n\\n#### Sponsors\\n\\nSponsors of the collective are individuals and organizations contributing at least $100/month. Nous placerons les logos des sponsors avec un lien vers leur site sur la page d\'accueil de Jest, le README sur la page github/yarn/npm, et la page des contributeurs.\\n\\n### What is the goal of the collective\\n\\nLe but du collectif est de soutenir le travail des contributeurs open source pour Jest afin de rendre les tests agr\xe9ables.\\n\\nPour atteindre cet objectif, nous utiliserons les fonds pour\xa0:\\n\\n- Couvrir les frais de d\xe9placement des conf\xe9renciers\\n- Organiser des \xe9v\xe9nements et des meetups\\n- Imprimer et distribuer des articles promotionnels\\n- D\xe9velopper et financer un programme de prime aux bogues (TBD)\\n\\nCe n\'est que le d\xe9but et nous nous engageons \xe0 y rem\xe9dier. If you have ideas on how else we can support the community, or feedback on the structure of the collective, please reach out to us on [twitter](https://twitter.com/jestjs_)!\\n\\n## Thank You\\n\\nEnfin, merci \xe0 tous ceux qui contribuent \xe0 la communaut\xe9 Jest et \xe0 l\'open source en g\xe9n\xe9ral. Nous sommes incroyablement reconnaissants d\'avoir la possibilit\xe9 de travailler ensemble \xe0 l\'am\xe9lioration des tests JavaScript.\\n\\nL\'\xe9quipe principale de Jest aimerait \xe9galement rendre un remerciement sp\xe9cial \xe0 Facebook Open Source pour avoir conduit \xe0 la cr\xe9ation de ce collectif."},{"id":"/2018/05/29/jest-23-blazing-fast-delightful-testing","metadata":{"permalink":"/fr/blog/2018/05/29/jest-23-blazing-fast-delightful-testing","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2018-05-29-jest-23-blazing-fast-delightful-testing.md","source":"@site/i18n/fr/docusaurus-plugin-content-blog/2018-05-29-jest-23-blazing-fast-delightful-testing.md","title":"Jest 23\xa0: \ud83d\udd25 Des tests rapides et agr\xe9ables","description":"Aujourd\'hui, nous sommes heureux d\'annoncer Jest 23, notre plus grande version majeure \xe0 ce jour\xa0! Avec plus de 100 contributeurs, nous avons livr\xe9 une tonne de fonctionnalit\xe9s et de corrections de bugs. Merci \xe0 tous les membres de la communaut\xe9 qui ont contribu\xe9 \xe0 rendre les tests JavaScript agr\xe9ables.","date":"2018-05-29T00:00:00.000Z","formattedDate":"29 mai 2018","tags":[],"readingTime":6.28,"hasTruncateMarker":true,"authors":[{"name":"Rick Hanlon II","url":"https://twitter.com/rickhanlonii"}],"frontMatter":{"title":"Jest 23\xa0: \ud83d\udd25 Des tests rapides et agr\xe9ables","author":"Rick Hanlon II","authorURL":"https://twitter.com/rickhanlonii","authorFBID":160800566},"unlisted":false,"prevItem":{"title":"Soutien de Jest Open Source","permalink":"/fr/blog/2018/06/27/supporting-jest-open-source"},"nextItem":{"title":"Jest 22\xa0: Am\xe9liorations & ex\xe9cuteurs personnalis\xe9s","permalink":"/fr/blog/2017/12/18/jest-22"}},"content":"Aujourd\'hui, nous sommes heureux d\'annoncer Jest 23, notre plus grande version majeure \xe0 ce jour\xa0! Avec plus de 100 contributeurs, nous avons livr\xe9 une tonne de fonctionnalit\xe9s et de corrections de bugs. Merci \xe0 tous les membres de la communaut\xe9 qui ont contribu\xe9 \xe0 rendre les tests JavaScript agr\xe9ables.\\n\\nWe would also like to welcome both [Babel](https://babeljs.io/) and [webpack](https://webpack.js.org/) to the Jest community! After converting from Mocha to Jest 23 Beta, webpack saw their total test suite time reduced 6x from over 13 minutes to 2 minutes 20 seconds. [#blazingmeansgood](https://twitter.com/search?q=%23blazingmeansgood)\\n\\nVoici quelques-uns des points marquants et des changements de rupture de Jest 23.\\n\\n\x3c!--truncate--\x3e\\n\\nFor a full list see the [changelog](https://github.com/jestjs/jest/blob/main/CHANGELOG.md).\\n\\n## Mode snapshot interactif\\n\\nNous avons ajout\xe9 une nouvelle option au menu de surveillance par d\xe9faut que nous appelons le mode de snapshot interactif. Ce nouveau mode vous permet de passer en revue chaque snapshot d\xe9faillant dans chaque suite d\xe9faillante pour revoir vos snapshots d\xe9faillants et choisir de les mettre \xe0 jour ou de les ignorer individuellement.\\n\\n![Interactive snapshot mode in action](/img/blog/23-interactive.gif)\\n\\nSee the Interactive Snapshot Mode docs [here](/docs/snapshot-testing#interactive-snapshot-mode).\\n\\n## Snapshot Property Matchers\\n\\nOften, objects you\'re snapshotting contain generated values like Dates and IDs. Jest now allows you to pass properties to the snapshot matcher which specify the structure of the data instead of the specific values. These property matchers are then verified before serializing the matcher type (instead of the value), giving you consistent snapshot results across test runs.\\n\\n![Snapshot Property Matchers](/img/blog/23-snapshot-matchers.png)\\n\\nSee the updated `toMatchSnapshot` [docs](/docs/expect#tomatchsnapshotpropertymatchers-snapshotname) or the Property Matcher [guide](/docs/snapshot-testing#property-matchers) for more information.\\n\\n## Custom Asynchronous matchers\\n\\nWe now support asynchronous matchers with `expect.extends`! Async matchers return a Promise so that you can `await` for the matcher to resolve. As an example:\\n\\n![Custom asynchronous matchers in action](/img/blog/23-async-matchers.png)\\n\\nDocs available [here](/docs/expect#expectextendmatchers).\\n\\n## Custom Asymmetric Matchers\\n\\nAsymmetric matchers are a great tool to use when you only care about asymmetric equality. For example, when the left side is expected to be an object with some subset of properties on the right, instead of an exact match. Jest provides a number of asymmetric matchers out of the box, and in this release we\'re introducing Custom Asymmetric Matchers.\\n\\n![Custom asymmetric matchers in action](/img/blog/23-asymmetric-matchers.png)\\n\\n## Jest Each\\n\\n[@mattphillipsio](https://twitter.com/mattphillipsio) has donated the `jest-each` package to Jest Core (thanks Matt!). `jest-each` is a library inspired by [`mocha-each`](https://yarnpkg.com/en/package/mocha-each) and [Spock Data Tables](http://spockframework.org/spock/docs/1.1/data_driven_testing.html#data-tables) which allows you to define a table of test cases, and then run a test for each row with the specified column values. We support both array types and template literals for all flavors of `describe` and `test`. Docs are available [here](/docs/api#testeachtable-name-fn), and for those not on Jest 23 yet, we\'re still publishing [`jest-each`](https://yarnpkg.com/en/package/jest-each) separately!\\n\\n![jest-each in action](/img/blog/23-jest-each.png)\\n\\nHuge shout out to Prettier for [fixing](https://github.com/prettier/prettier/pull/4423) the table formatting so quickly ([see Prettier 1.13](https://prettier.io/blog/2018/05/23/1.13.0.html#format-new-describeeach-table-in-jest-23-4423-by-ikatyang))!\\n\\n## New Matchers\\n\\nWe only add matchers to core if we believe they will be useful to a large amount of people in the Jest community, and leave the majority of matchers to the community (see [jest-extended](https://yarnpkg.com/en/package/jest-extended)). Some matchers make the cut into core, and Jest 23 adds:\\n\\n- nthCalledWith\\n- toReturn\\n- toReturnTimes\\n- toReturnWith\\n- lastReturnedWith\\n- nthReturnedWith\\n- toStrictEqual\\n\\n![New matchers in action](/img/blog/23-new-matchers.png)\\n\\nSee the updated expect docs [here](/docs/expect).\\n\\n## Debug Hanging Tests\\n\\nA common issue we see on the issue tracker relates to \u201cJest\u201d hanging after a test run. This is usually due to app code leaving handles open, preventing Jest from exiting. In the past, users have resorted to `--forceExit` to fix (not recommended).\\n\\nTo help debug these issues, we\'re now detecting when Jest does not exit:\\n\\n![Detecting hanging tests](/img/blog/23-hanging-before.png)\\n\\nAnd we offer a new flag `--detectOpenHandles` to help find the open handles:\\n\\n![Running detectOpenHandles](/img/blog/23-hanging-after.png)\\n\\nSee the updated CLI docs [here](/docs/cli#detectopenhandles).\\n\\n## Watch Mode Plugins\\n\\nWe have completely rewritten the watch mode system to allow adding custom plugins to watch mode. Watch Mode Plugins now make it possible to hook into Jest events and provide custom menu options in the Watch Mode Menu. All of the default Watch Mode prompts are implemented as plugins in this system, and the docs to create your own are available [here](/docs/watch-plugins).\\n\\nWith this change, we\'re also now able to bring back typeahead support as a Watch Mode Plugin via [jest-watch-typeahead](https://yarnpkg.com/en/package/jest-watch-typeahead)!\\n\\n![Typeahead plugin in action](/img/blog/23-typeahead.gif)\\n\\nSee [jest-watch-typeahead](https://github.com/jest-community/jest-watch-typeahead) for documentation and install instructions. Huge thank you to [@rogeliog](https://twitter.com/rogeliog) for the new watch mode plugin system and the jest-watch-typeahead plugin!\\n\\n## Changements de rupture\\n\\nComme pour chaque version majeure, nous apportons quelques changements de rupture pour rendre possibles des changements plus importants \xe0 l\'avenir et pour pousser l\'exp\xe9rience de test \xe0 un nouveau niveau. Here\'s a list of the biggest changes you may see:\\n\\n- **Require test descriptions and functions**: We\'re now failing tests that do not include both a function and a description.\\n- **Remove undefined props from React snapshots**: Smaller snapshots and proper React behavior.\\n- **Remove deprecations**: We removed mapCoverage since it\'s no longer needed. Additionally, we removed `jest.genMockFunction` and `jest.genMockFn` since these are the same as `jest.fn`.\\n- **Add snapshot names to failures**: We added the snapshot name (if provided) to the snapshot failure message so it\'s easier to find the snapshot that\'s failing.\\n- **Replace mock timestamps**: We replaced mock timestamps with invocationCallOrder since two or mocks may often have the same timestamp, making it impossible to test the call order.\\n- **Add results to mock snapshots**: We added mock function call results to snapshots so that both the calls and the results of the invocation are tracked.\\n\\n## Other Improvements\\n\\n- **Watch mode coverage**: Coverage is now limited to only the files tested in watch mode or when using `--onlyChanged` and `--findRelatedTests`.\\n- **Version documentation**: We added docs for each minor release back to Jest 22, and have removed all of the \u201cRequires Jest X.X+\u201d from the docs.\\n- **Better snapshot summaries**: We overhauled the Snapshot Summary output to make obsolete snapshots more informative.\\n- **Better stack traces**: We added stack traces to asynchronous errors, timeout errors, expect.assertions, and thrown non-errors. We\'re also indicating the column in the code frame!\\n- **Better React 16 support**: Adds snapshot support for `React.Fragment`, `React.forwardRef`, and `React.createContext`.\\n- **Track mock return and throw values**: Adds `mock.results` that contains the return value or thrown value for each mock call.\\n- **Blazing \ud83d\udd25**: We\'ve added a blazing badge to the README to indicate that Jest is blazing good.\\n\\n## Jest Summit\\n\\nLast week, the Jest Core Team met for the Jest Summit at Facebook London where worked on and released Jest 23, announced the Jest Open Collective, and gave a number of talks:\\n\\n- **Christoph Nakazawa** \u2013 [Intro](https://www.youtube.com/watch?v=cAKYQpTC7MA)\\n- **Aaron Abramov** \u2013 [Writing Meaningful Tests](https://youtu.be/cAKYQpTC7MA?t=440)\\n- **Rick Hanlon II** \u2013 [Blazing Fast Snapshot Testing in Jest 23](https://youtu.be/cAKYQpTC7MA?t=1881)\\n- **Simen Bekkhus** \u2013 [Jest\'s Delightful Error Messages](https://youtu.be/cAKYQpTC7MA?t=2990)\\n- **Matt Phillips** \u2013 [Level up your Jest experience with community packages](https://youtu.be/cAKYQpTC7MA?t=3852)\\n- **Michele Bertoli** \u2013 [Snapshot all the things](https://youtu.be/cAKYQpTC7MA?t=4582)\\n- **Jordan Eldredge** \u2013 [Webamp: Learn by imitating](https://youtu.be/cAKYQpTC7MA?t=5185)\\n\\nFull talk is available [here](https://www.youtube.com/watch?v=cAKYQpTC7MA).\\n\\nThe turnout was amazing, and we were able to meet a lot of the London-based community in person. Thank you to everyone who joined us and for your continued support! Stay tuned for our next post which will outline the Jest Open Collective and the plans we have for the future.\\n\\n_As always, this release couldn\'t have been possible without you, the JavaScript community. Nous sommes incroyablement reconnaissants d\'avoir la possibilit\xe9 de travailler ensemble \xe0 l\'am\xe9lioration des tests JavaScript. If you\'d like to contribute to Jest, please don\'t hesitate to reach out to us on_ _[GitHub](https://github.com/jestjs/jest) or on_ _[Discord](https://discord.gg/j6FKKQQrW9)._"},{"id":"/2017/12/18/jest-22","metadata":{"permalink":"/fr/blog/2017/12/18/jest-22","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2017-12-18-jest-22.md","source":"@site/i18n/fr/docusaurus-plugin-content-blog/2017-12-18-jest-22.md","title":"Jest 22\xa0: Am\xe9liorations & ex\xe9cuteurs personnalis\xe9s","description":"Today we are announcing a new major version of Jest which refines almost all parts of Jest to provide a more solid testing foundation. Together with the Jest community we made a number of changes across the board that will help you get more out of Jest. We are also graduating the custom runners feature out of the experimental stage and added a new package, jest-worker, for parallelizing work across multiple processes. We have compiled a list of highlights below but make sure to check out the (as always) massive changelog.","date":"2017-12-18T00:00:00.000Z","formattedDate":"18 d\xe9cembre 2017","tags":[],"readingTime":7.12,"hasTruncateMarker":true,"authors":[{"name":"Simen Bekkhus","url":"https://github.com/SimenB"}],"frontMatter":{"title":"Jest 22\xa0: Am\xe9liorations & ex\xe9cuteurs personnalis\xe9s","author":"Simen Bekkhus","authorURL":"https://github.com/SimenB","authorFBID":100003004880942},"unlisted":false,"prevItem":{"title":"Jest 23\xa0: \ud83d\udd25 Des tests rapides et agr\xe9ables","permalink":"/fr/blog/2018/05/29/jest-23-blazing-fast-delightful-testing"},"nextItem":{"title":"Jest 20\xa0: \ud83d\udc96 Tests agr\xe9ables & \ud83c\udfc3\ud83c\udffd ex\xe9cuteur multi-projets","permalink":"/fr/blog/2017/05/06/jest-20-delightful-testing-multi-project-runner"}},"content":"Today we are announcing a new major version of Jest which refines almost all parts of Jest to provide a more solid testing foundation. Together with the Jest community we made a number of changes across the board that will help you get more out of Jest. We are also graduating the custom runners feature out of the experimental stage and added a new package, `jest-worker`, for parallelizing work across multiple processes. We have compiled a list of highlights below but make sure to check out the (as always) [massive changelog](https://github.com/jestjs/jest/blob/main/CHANGELOG.md).\\n\\n\x3c!--truncate--\x3e\\n\\n## Good bye Node 4 & welcome JSDOM 11\\n\\nWith this release we are dropping support for Node 4, mainly because one of our main dependencies, JSDOM, ended their support. Jest now comes out of the box with JSDOM 11 which features better support for SVGs, `requestAnimationFrame`, `URL` and `URLSearchParams` built in, and [much more](https://github.com/jsdom/jsdom/blob/master/Changelog.md).\\n\\n## Custom Runners + Easy parallelization with `jest-worker`\\n\\nIn Jest 21 we introduced the concept of custom Jest runners. Since then, Rogelio, one of Jest\'s core contributors, built a number of useful runners: If you have many existing tests written using another framework but you\'d like to immediately benefit from Jest\'s features, check out [jest-runner-mocha](https://yarnpkg.com/en/package/jest-runner-mocha). If you have a large codebase that needs linting, [you may get a significant speedup](https://twitter.com/lencioni/status/907398856756695040) if you run eslint within Jest using [jest-runner-eslint](https://yarnpkg.com/en/package/jest-runner-eslint).\\n\\nTo gain more of fine-grained control over heavy tasks parallelization (e.g. transforming files or crawling the file system), we designed a new library perfectly suited for the job. We developed a modern, Promise-based module with an approachable API, called `jest-worker`, that allows you to delegate to child processes those intensive functions. As `jest-worker`, like any other Jest package, is a part of the Jest platform, you can use it however you like even without ever using Jest itself. You\'ll find more in the documentation [here](https://yarnpkg.com/en/package/jest-worker).\\n\\nTo get a better understanding of custom runners and Jest as a platform, make sure to check out Rogelio\'s talk from Reactive Conf 2017: [Jest as a Platform](https://www.youtube.com/watch?v=NtjyeojAOBs).\\n\\n## Codeframe in test failures\\n\\nIn order to more easily identify which assertion is failing your test, we\'ve added a code frame showing the context where the assertion is in order to focus on your own code. See the following example test:\\n\\n```js\\ntest(\'some test\', () => {\\n  function someFunctionWhichShouldThrow() {\\n    if (false) {\\n      throw new Error();\\n    }\\n\\n    return \'success!\';\\n  }\\n\\n  expect(someFunctionWhichShouldThrow).toThrow();\\n});\\n```\\n\\nIn Jest 21, we would display the following error:\\n\\n![failure in Jest 21](/img/blog/22-failure-21.png)\\n\\nIn Jest 22, we have added a codeframe, giving more context to the failing assertions. We have also cleaned up the stack trace to remove more clutter than ever.\\n\\n![failure in Jest 22](/img/blog/22-failure-22.png)\\n\\n## Easier testing of errors thrown in async code\\n\\nYou can now use `toThrow` and `toThrowErrorMatchingSnapshot` on promise rejections in the same way you can on synchronous errors.\\n\\n```js\\nasync function throwingFunction() {\\n  throw new Error(\'This failed\');\\n}\\n\\ntest(\'asynchronous rejection\', async () => {\\n  await expect(throwingFunction()).rejects.toThrowErrorMatchingSnapshot();\\n});\\n```\\n\\n## Asynchronous test environments\\n\\nWhen [Puppeteer](https://github.com/GoogleChrome/puppeteer/), a way of programmatically interacting with a real Chromium Browser, was announced by the Google Chrome team in August, many wanted to be able to use Jest to write their tests running them in Chrome. The community have helped us out making this possible by allowing asynchronous test environments. We are still working on making this experience as good as possible, but please see [this guide](/docs/puppeteer) for how to use Puppeteer with Jest, starting today.\\n\\n## Experimental Leak Detection\\n\\nWe added an experimental `--detectLeaks` setting to Jest that will let you know if your internal environment instance is leaked after a test execution. It will also warn you when your test suite tries to require a file after the test has finished, meaning you forgot to wait for all async operations or left something not properly cleaned. This will however not discover leaks in user land code, only in test land code; although the technology used behind it can help you (see `jest-leak-detector`). If you are reporting a bug about Jest\'s memory usage, please provide a repro where `--detectLeaks` will make the test suite fail. We [started building a better sandboxing mechanism](https://github.com/jestjs/jest/pull/4970) for Jest but it\'s not ready yet to be enabled by default. If you\'d like to help, please reach out to us on discord!\\n\\n## Watch Mode Refinements\\n\\nWhen using watch mode, there is now a way to [focus only on tests that previously failed](https://github.com/jestjs/jest/pull/4886). In this mode, Jest will not re-run previously passing tests which should help you iron out all test failures. Additionally, [we added a plugin system to watch mode](https://github.com/jestjs/jest/pull/4841). By adding modules to `watchPlugins` in your configuration you can extend the features of the watch mode.\\n\\n## Babel 7 support\\n\\nJest uses Babel under the hood to power code coverage and advanced mocking features. With Jest 22, it also supports the upcoming Babel 7. You\'ll find more in the documentation [here](/docs/getting-started#using-babel).\\n\\n## Mock function improvements\\n\\nThere has been a couple of changes to mock functions in Jest 22, making them even easier to use. Firstly, we added a [`mockName`](/docs/mock-function-api#mockfnmocknamevalue) property allowing you to name your mocks, which is useful in assertion failures. We have also made the Jest mock function serializable in `pretty-format`, meaning that you can snapshot test mocks. In Jest 21, `expect(jest.fn()).toMatchSnapshot()` would serialize to `[Function]`, in Jest 22, you might get something like this:\\n\\n```js\\ntest(\'my mocking test\', () => {\\n  const mock = jest.fn().mockName(\'myMock\');\\n\\n  mock(\'hello\', {foo: \'bar\'});\\n\\n  expect(mock).toMatchSnapshot();\\n});\\n\\n// Serializes to:\\n\\nexports[`my mocking test 1`] = `\\n[MockFunction myMock] {\\n  \\"calls\\": Array [\\n    Array [\\n      \\"hello\\",\\n      Object {\\n        \\"foo\\": \\"bar\\",\\n      },\\n    ],\\n  ],\\n}\\n`;\\n```\\n\\n## Highlights from Jest 21\\n\\nJest 21 was released back in September, and we unfortunately never got around to write a blog post. So here is a quick summary of the main changes in version 21:\\n\\n1.  **Use expect and jest-mock in the browser:** [Michael Jackson](https://github.com/mjackson) donated his excellent [`expect`](https://github.com/mjackson/expect) package to the Jest project. As part of that transition, the Jest core team, with much help from [Kenneth Skovhus](https://github.com/skovhus/), made both `jest-matchers` (renamed to `expect`) and `jest-mock` work in browsers. This means that while you cannot use Jest itself in browsers ([yet](https://github.com/jestjs/jest/issues/848)), you can use its awesome assertions and mocks for instance as replacements for Chai and Sinon running in Mocha tests. If you are migrating from earlier `expect` to the new Jest-powered `expect`, you can use [`jest-codemods`](https://github.com/skovhus/jest-codemods/) to automate the migration.\\n2.  **MIT License:** We changed Jest\'s license to MIT. _Yay!_\\n3.  **Fail test suites on async errors:** Jest used to have a bug that made it crash when errors were thrown in certain parts of async code. This was fixed by community contributors.\\n4.  **Faster startup:** With Jest 21 we fine tuned Jest\'s startup to be more than 50% faster. The large overhead of Jest when running it on a small and fast test was always an issue for us and now this shouldn\'t be a reason to hold you back from using Jest any longer.\\n\\n## Jest Community\\n\\nLa communaut\xe9 autour de Jest travaille dur pour rendre l\'exp\xe9rience de test encore plus efficace. These are separate projects from the main Jest project, but we want to highlight some of our personal favorites here.\\n\\n- [jest-image-snapshot](https://github.com/americanexpress/jest-image-snapshot) \u2013 custom matcher to compare images with snapshots by American Express developers\\n- [ts-jest](https://github.com/kulshekhar/ts-jest) \u2013 all you need to successfully run Jest within TypeScript project by [@kulshekhar](https://github.com/kulshekhar/ts-jest)\\n- [jest-codemods](https://github.com/skovhus/jest-codemods/) \u2013 migrate your tests from other frameworks to Jest with ease\\n- [jest-plugins](https://github.com/negativetwelve/jest-plugins) \u2013 a new community project oriented around simplifying setting up test environment for specific tools, like React, or providing some handy utilities\\n\\nWe\'d also like to announce that recently we launched a new place for high quality Jest additions \u2013 [jest-community](https://github.com/jest-community). It\'s a new GitHub organization already featuring our favorite projects, like [vscode-jest](https://github.com/jest-community/vscode-jest), [jest-extended](https://github.com/jest-community/jest-extended), to name a few, curated by Jest maintainers and collaborators. We\'ve even migrated our [eslint-plugin-jest](https://github.com/jest-community/eslint-plugin-jest) there, and already see some great contributions, which are published independently at a faster pace.\\n\\n![Jest Community](/img/blog/22-community.png)\\n\\nCommunity projects under one organisation are also a great way for us to experiment on things like automated releases, which we\'d like to explore for Jest as well. They also enable us to share some common things between them, like the shape of the README for example (thanks to the webpack Community for the idea), making it easier to learn and use for all of us.\\n\\nSi vous avez quelque chose de g\xe9nial \xe0 partager, n\'h\xe9sitez pas \xe0 nous contacter ! We\'d love to share your project here."},{"id":"/2017/05/06/jest-20-delightful-testing-multi-project-runner","metadata":{"permalink":"/fr/blog/2017/05/06/jest-20-delightful-testing-multi-project-runner","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2017-05-06-jest-20-delightful-testing-multi-project-runner.md","source":"@site/i18n/fr/docusaurus-plugin-content-blog/2017-05-06-jest-20-delightful-testing-multi-project-runner.md","title":"Jest 20\xa0: \ud83d\udc96 Tests agr\xe9ables & \ud83c\udfc3\ud83c\udffd ex\xe9cuteur multi-projets","description":"A few months ago we announced Jest 19 which came with major new features and was the biggest Jest release until today. Jest 20 has twice the amount of changes compared to the previous version, features a complete rewrite of the test runner, adds new testing APIs. The new release enables a new level of customization and configuration for projects all while making it effortless to upgrade. Beyond Painless JavaScript Testing, we believe Jest is now delivering a Delightful JavaScript Testing experience. Let\'s take a look at the best new features and changes in depth:","date":"2017-05-06T00:00:00.000Z","formattedDate":"6 mai 2017","tags":[],"readingTime":6.335,"hasTruncateMarker":true,"authors":[{"name":"Christoph Nakazawa","url":"http://twitter.com/cpojer"}],"frontMatter":{"title":"Jest 20\xa0: \ud83d\udc96 Tests agr\xe9ables & \ud83c\udfc3\ud83c\udffd ex\xe9cuteur multi-projets","author":"Christoph Nakazawa","authorURL":"http://twitter.com/cpojer","authorFBID":100000023028168},"unlisted":false,"prevItem":{"title":"Jest 22\xa0: Am\xe9liorations & ex\xe9cuteurs personnalis\xe9s","permalink":"/fr/blog/2017/12/18/jest-22"},"nextItem":{"title":"\ud83c\udccf Jest 19\xa0: Mode de surveillance immersif & am\xe9liorations de la plateforme de test","permalink":"/fr/blog/2017/02/21/jest-19-immersive-watch-mode-test-platform-improvements"}},"content":"A few months ago we announced [Jest 19](/blog/2017/02/21/jest-19-immersive-watch-mode-test-platform-improvements) which came with major new features and was the biggest Jest release until today. Jest 20 has twice the amount of changes compared to the previous version, features a complete rewrite of the test runner, adds new testing APIs. The new release enables a new level of customization and configuration for projects all while making it effortless to upgrade. Beyond Painless JavaScript Testing, we believe Jest is now delivering a **Delightful JavaScript Testing experience**. Let\'s take a look at the best new features and changes in depth:\\n\\n## Multi-Project-Runner & Configuration Overhaul\\n\\nUntil now, Jest could only operate in one project at a time. This is often cumbersome if you are working on many smaller projects that each have their own setup and configuration. With Jest 20, we rewrote the test runner completely to run many projects at the same time within a single instance of Jest, for example if you are working on a React frontend and a node.js backend. Here is a video of Jest running tests for [React](https://github.com/facebook/react), [Relay](https://github.com/facebook/relay), [Yarn](https://github.com/yarnpkg/yarn) and Jest all at the same time:\\n\\n![multi-runner](/img/blog/20-multi-runner.gif)\\n\\n\x3c!--truncate--\x3e\\n\\nJest is now collapsing the usage guide after the first test run to save vertical space in the terminal.\\n\\nFurther, we completely overhauled how the configuration system works inside of Jest. You can now pass any configuration option through the CLI to overwrite the ones specified in your configuration file. Along with that, we changed Jest to look for a `jest.config.js` file by default which means you are now able to define a Jest configuration using JavaScript as well as being able to configure it through `package.json` like before. Through the addition of all these new features, you are now able to combine Jest in more powerful ways than ever before. For example, if you would like to find out which tests Jest would run given a set of changed files from a commit across multiple projects in a monorepo, you can combine cli arguments like this now:\\n\\n```bash\\n$ jest --projects projectA projectB --listTests --findRelatedTests projectA/banana.js projectB/kiwi.js\\n[\\n  \\"projectA/banana.test.js\\",\\n  \\"projectB/kiwi.test.js\\",\\n  \\"projectB/pineapple.test.js\\",\\n]\\n```\\n\\nThis is especially useful for continuous integration (CI) systems where you may want to only run a subset of tests for Pull Requests to prevent Jest from running thousands of test files on every small change.\\n\\nFinally, we are now properly mapping code coverage when using TypeScript and we are running code coverage for untested files in worker processes which yields significant speed ups for this feature.\\n\\n## New & Improved Testing APIs\\n\\nWe made a number of additions and improvements to the testing APIs which will help write more effective tests. We\'d like to point out that all of these improvements were made entirely by community members!\\n\\n- **Better async testing:** Added new async/Promise support through resolves/rejects modifiers on expect: `expect(Promise(\u2026)).resolves.toEqual(\u2026)`. [See documentation](/docs/expect#resolves).\\n- **Expect `n` assertions:** Along with the existing `expect.assertions(n)`, the new `expect.hasAssertions()` can be used to ensure a test has at least one assertion.\\n- **Lint Plugin:** A `valid-expect` rule was added to `eslint-plugin-jest` to ensure that an assertion is called after invoking `expect`. This will prevent mistakes like a stray `expect(banana);` with a missing assertion call.\\n- **Pretty-Format Plugins:** A number of new pretty-format plugins were added to Jest. We now pretty-print [Immutable.js](https://github.com/facebook/immutable-js/) data structures and HtmlElements in assertion failures and snapshots.\\n- **Custom Environment:** It is now possible to add a `@jest-environment node|jsdom` annotation to the doc-block comment of a test file to use a test environment different from the default for individual tests.\\n\\nHere is an example of all how all the new APIs together will make testing more delightful:\\n\\n```js\\n/**\\n * @jest-environment node\\n */\\n\\ntest(\'compares apples and bananas\', async () => {\\n  expect.hasAssertions(); // Ensure this test has at least one assertion.\\n\\n  await expect(\\n    Promise.resolve(Immutable.Map({apples: 1, bananas: 2})),\\n  ).resolves.toEqual(Immutable.Map({apples: 1, bananas: 3}));\\n\\n  expect(\'banana\'); // valid-expect in eslint-plugin-jest will show an error.\\n});\\n```\\n\\nThis example will print a test failure similar to this:\\n\\n![testing-apis](/img/blog/20-testing-apis.png)\\n\\n## Changements de rupture\\n\\nComme pour chaque version majeure, nous apportons un certain nombre de changements de rupture pour rendre possibles des changements plus importants \xe0 l\'avenir et pour pousser l\'exp\xe9rience de test \xe0 un nouveau niveau. This time, we tried our best to only break APIs that we don\'t expect to affect the majority of Jest\'s users:\\n\\n- **Fork of Jasmine 2.5:** We finally decided to fork Jasmine itself and take ownership over Jest\'s own test runner. This will allow us to improve all aspects of the unit testing experience in the future but for now we are focused on incremental rewrites and reducing the API surface. If you see a test breaking as a result of a Jasmine API that is now missing, there should be an equivalent feature on the `jest` or `expect` objects. As such, we have removed many Jasmine features that aren\'t generally used in most codebases.\\n- **New Snapshots on CI:** Snapshots must always be committed along with the test and the modules they are testing. We changed Jest to not save new snapshots automatically in Continuous Integration (CI) environments or when the `--ci` flag is specified. To overwrite this behavior, which is generally not recommended, the `--updateSnapshot` flag can be used.\\n- **Babel-Polyfill:** Jest used to load `babel-polyfill` automatically when using babel-jest which resulted in memory leaks inside of Jest. In most versions of node, it is not necessary to load `babel-polyfill` so we removed this auto-inclusion and instead changed Jest to only include `regenerator-runtime` by default, which is commonly used to support async/await in older versions of Node.js. If you need `babel-polyfill`, you can manually require it in your setup files.\\n\\n## Other Improvements\\n\\n- **Documentation:** Documentation is critical to share best practices and teach everyone how to write effective tests which will lead to better software. Over the last few weeks we have also expanded Jest\'s documentation to include a Snapshot Testing FAQ, a guide with information about how to use Jest with common JavaScript libraries as well as we documented the new features mentioned above.\\n- **Translations:** We are now asking for your help to [translate the Jest documentation](https://crowdin.com/project/jest-v2) to make it easier for people to learn how to use Jest.\\n- **Custom Reporters:** Jest now supports custom test reporters through the `reporters` configuration option. You can finally customize the output of Jest as well as integrate it with other tools by generating reports in formats such as XML. [See documentation](/docs/configuration#reporters-array-modulename-modulename-options).\\n- **Codebase Health:** It was only possible iterate so quickly in Jest because we spent a significant amount of time on the health of the codebase. We were one of the early adopters of [prettier](https://github.com/prettier/prettier), we notably increased flow coverage, forked Jasmine to improve our test runner library and we rewrote and refactored significant portions of Jest itself to set up Jest for success in the future.\\n- **Bugfixes:** As always, we made plenty of bugfixes in Jest. The full changelog can be found in the [Jest repository](https://github.com/jestjs/jest/blob/main/CHANGELOG.md#jest-2000).\\n\\n## Talks about Jest\\n\\nRecently the Jest core team and other contributors started to talk more about Jest and the experience of working on Jest at conferences:\\n\\n- Rogelio Guzman did a talk about [Jest Snapshots and Beyond](https://www.youtube.com/watch?time_continue=416&v=HAuXJVI_bUs) at React Conf.\\n- I spoke about [Building High-Quality JavaScript Tools](https://developers.facebook.com/videos/f8-2017/building-high-quality-javascript-tools/) at Facebook\'s F8 conference.\\n\\n_As always, this release couldn\'t have been possible without you, the JavaScript community. Nous sommes incroyablement reconnaissants d\'avoir la possibilit\xe9 de travailler ensemble \xe0 l\'am\xe9lioration des tests JavaScript. If you\'d like to contribute to Jest, please don\'t hesitate to reach out to us on [GitHub](https://github.com/jestjs/jest) or on [Discord](https://discord.gg/j6FKKQQrW9)._"},{"id":"/2017/02/21/jest-19-immersive-watch-mode-test-platform-improvements","metadata":{"permalink":"/fr/blog/2017/02/21/jest-19-immersive-watch-mode-test-platform-improvements","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2017-02-21-jest-19-immersive-watch-mode-test-platform-improvements.md","source":"@site/i18n/fr/docusaurus-plugin-content-blog/2017-02-21-jest-19-immersive-watch-mode-test-platform-improvements.md","title":"\ud83c\udccf Jest 19\xa0: Mode de surveillance immersif & am\xe9liorations de la plateforme de test","description":"Today we are pleased to ship version 19 of the Jest testing platform. It\'s the biggest Jest release we have shipped so far and we are quite excited to show you what we\'ve built over the last two months:","date":"2017-02-21T00:00:00.000Z","formattedDate":"21 f\xe9vrier 2017","tags":[],"readingTime":6.865,"hasTruncateMarker":true,"authors":[{"name":"Rogelio Guzman","url":"http://twitter.com/rogeliog"}],"frontMatter":{"title":"\ud83c\udccf Jest 19\xa0: Mode de surveillance immersif & am\xe9liorations de la plateforme de test","author":"Rogelio Guzman","authorURL":"http://twitter.com/rogeliog","authorFBID":511230566},"unlisted":false,"prevItem":{"title":"Jest 20\xa0: \ud83d\udc96 Tests agr\xe9ables & \ud83c\udfc3\ud83c\udffd ex\xe9cuteur multi-projets","permalink":"/fr/blog/2017/05/06/jest-20-delightful-testing-multi-project-runner"},"nextItem":{"title":"Une grande exp\xe9rience pour les d\xe9veloppeurs","permalink":"/fr/blog/2017/01/30/a-great-developer-experience"}},"content":"Today we are pleased to ship version 19 of the Jest testing platform. It\'s the biggest Jest release we have shipped so far and we are quite excited to show you what we\'ve built over the last two months:\\n\\n## Immersive Watch Mode\\n\\nWe [completely rewrote the watch mode](https://github.com/jestjs/jest/pull/2362) to make it instant and more extensible. As a result, the experience of using it really is immersive: tests re-run instantly after a file change and we made it easy to select the right tests.\\n\\n\x3c!--truncate--\x3e\\n\\n## Snapshot Updates\\n\\nWe made a couple of changes to the snapshot format. We don\'t make changes like this often and only consider them if they actually improve how snapshots work. As well as introducing a snapshot version number we accumulated a number of changes we wanted to make to the format for a while:\\n\\n- We dropped the \u201ctest\u201d prefix in snapshot names from top level `test` or `it` calls.\\n- We improved the printing of React elements to cause less changes when the last prop in an element changes.\\n- We improved the character escaping mechanism to be more bulletproof.\\n\\nAvant\xa0:\\n\\n```js\\nexports[`test snap 1`] = `\\n<header>\\n  <h1>\\n    Jest \\\\\\"19\\\\\\"\\n  </h1>\\n  <Subtitle\\n    name=\\"Painless JavaScript Testing\\" />\\n</header>\\n`;\\n```\\n\\nAfter (no \u201ctest\u201d prefix, better JSX rendering, version header):\\n\\n```js\\n// Jest Snapshot v1, https://goo.gl/fbAQLP\\n\\nexports[`snap 1`] = `\\n<header>\\n  <h1>\\n    Jest \\"19\\"\\n  </h1>\\n  <Subtitle\\n    name=\\"Painless JavaScript Testing\\"\\n  />\\n</header>\\n`;\\n```\\n\\nWe decided it\'s a good time to introduce versioned snapshots to ensure all developers are using a compatible version of Jest. Here\'s how we warn you about the need to update your snapshot:\\n\\n![snapshot-version](/img/blog/19-snapshot-version.png)\\n\\nPlease make sure you revert any local changes before updating to make the transition smooth and to ensure you aren\'t including any unwanted changes from failing tests in your new snapshots.\\n\\n## Improved printing of skipped tests\\n\\nSkipped tests are now printed as a single line instead of showing every individual one when testing in verbose mode or a single suite. Hopefully it will let you focus on currently important tests. It also occupies far less space!\\n\\n![skipped-tests](/img/blog/19-skipped-tests.png)\\n\\n## New CLI arguments\\n\\nJest 19 ships with two new coverage-related arguments which you can run from CLI:\\n\\n- `--collectCoverageFrom`\\n- `--coverageDirectory`\\n\\nWe now also error on invalid CLI arguments instead of ignoring them. But we\'ve got your back with helpful error message like the one below, e.g. when you try running `jest --watc`:\\n\\n![cli-error](/img/blog/19-cli-error.png)\\n\\n## `expect` Improvements\\n\\n- [`expect.addSnapshotSerializer`](/docs/expect#expectaddsnapshotserializerserializer)\\n- [`expect.stringContaining`](/docs/expect#expectstringcontainingstring)\\n- [`jest.spyOn`](/docs/jest-object#jestspyonobject-methodname)\\n\\nWe\'re close to almost full feature parity with the `expect` npm package. [Michael Jackson](https://twitter.com/mjackson), the author of the package, agreed to [donate](https://github.com/jestjs/jest/issues/1679) it to the Jest project, which means that `jest-matchers` will be renamed to `expect`. Since our version of `expect` is not intended to be fully compatible, [Christopher Chedeau](https://twitter.com/Vjeux) is working on a codemod to make the transition painless. Christopher also worked on a number of improvements to `jest-matchers` which enables it to be used outside of Jest and even [works inside browsers](https://github.com/jestjs/jest/pull/2795).\\n\\n## [eslint-plugin-jest](https://github.com/jestjs/jest/tree/main/packages/eslint-plugin-jest) \u2013 our very own ESLint plugin\\n\\nThanks to [Jonathan Kim](https://twitter.com/jonnykim) Jest finally has its own official ESLint plugin. It exposes three rules:\\n\\n- [no-disabled-tests](https://github.com/jestjs/jest/blob/main/packages/eslint-plugin-jest/docs/rules/no-disabled-tests.md) - this rule prevents you from accidentally committing disabled tests.\\n- [no-focused-tests](https://github.com/jestjs/jest/blob/main/packages/eslint-plugin-jest/docs/rules/no-focused-tests.md) - this rule prevents you from committing focused tests which would disable all other tests in the same suite.\\n- [no-identical-title](https://github.com/jestjs/jest/blob/main/packages/eslint-plugin-jest/docs/rules/no-identical-title.md) - disallows identical titles in test names.\\n\\nYou can install it using `npm install --save-dev eslint-plugin-jest` or `yarn add --dev eslint eslint-plugin-jest` and it can be enabled by adding `{\\"plugins\\": [\\"jest\\"]}` to your eslint configuration.\\n\\n## New public package: [jest-validate](https://github.com/jestjs/jest/tree/main/packages/jest-validate)\\n\\nWhile we refactored the validation and normalization code for Jest\'s configuration, we were so happy with the new error messaging that we extracted it to its own module to share it with everyone. With Jest 19 we welcome `jest-validate` to our self-sustained packages family.\\n\\n`jest-validate` is a generic configuration validation tool that helps you with warnings, errors and deprecation messages in your JavaScript tool. It\'s also capable of showing users friendly examples of correct configuration and it comes with a simple but powerful API. We hope it\'ll make a good addition to your projects!\\n\\n![validate](/img/blog/19-validate.png)\\n\\nWe\'re happy to announce that `jest-validate` is validating config options of [prettier](https://github.com/jlongster/prettier) since [v0.12](https://github.com/jlongster/prettier/blob/main/CHANGELOG.md#0120). Feel free to add it to your project, try it, send us feedback and improve it by making pull requests on GitHub.\\n\\n## Improved asymmetric matchers\\n\\nWe moved the asymmetric matchers implementation from Jasmine into Jest, which enabled us to further improve the user experience around them. As a result, asymmetric matchers are now pretty-printed nicely, we added the new [`expect.stringContaining()`](/docs/expect#expectstringcontainingstring) matcher and we also paired them with [`expect.toMatchObject()`](/docs/expect#tomatchobjectobject) so you can use the best of both:\\n\\n![asymmetric-matchers](/img/blog/19-asymmetric-matchers.png)\\n\\n## Better manual mocks\\n\\nWith the latest release, manual mocks now finally work with nested folders. For example `__mocks__/react-native/Libraries/Text/Text.js` will now work as expected and mock the correct module. We also fixed issues with virtual mocks and transitive dependencies and improved `moduleNameMapper` to not overwrite mocks when many patterns map to the same file.\\n\\n## Changements de rupture\\n\\nAs a part of our cleanups and fixes we removed the `mocksPattern` configuration option which was never officially supported. We also renamed the `testPathDirs` configuration option to `roots` which better explains what the option can be used for. The default configuration for `roots` is `[\\"<rootDir>\\"]` and can be customized to include any number of directories. The rootDir configuration option has always been used mostly as a token for other configuration options and this rename should make configuring Jest clearer.\\n\\n## Revamped documentation\\n\\nAs you may have already seen, [Hector Ramos](https://twitter.com/hectorramos) and [Kevin Lacker](https://twitter.com/lacker) gave Jest\'s documentation a fresh new look. We changed the way we organize the website and it now features Docs and API as separate pages:\\n\\n- Under [Docs](/docs/getting-started#content) you can find an introduction to Jest, including [Getting Started](/docs/getting-started#content) or [Testing Asynchronous Code](/docs/asynchronous#content) and handy guides like [Snapshot Testing](/docs/snapshot-testing#content), [Testing React Native App](/docs/tutorial-react-native#content), [Using with webpack](/docs/webpack#content) or [Migrating to Jest](/docs/migration-guide#content) and many more!\\n- The [API](/docs/api) section on the other hand lists all available methods exposed by Jest: the `expect` and `jest` objects, mock functions, globals, along with configuration options from _package.json_ and from the CLI.\\n\\nThe homepage was completely redesigned to be more descriptive of what Jest is about: \u201c_Zero configuration testing platform_\u201d. We also made sure it reads better on mobile devices. And for those using RSS \u2013 we finally provide a [feed for our blog](https://jestjs.io/blog/feed.xml).\\n\\n## Community Updates\\n\\n- We really loved this talk: \u201c[Introduction to Jest](https://www.youtube.com/watch?v=tvy0bSgwtTo)\u201c by Vas Boroviak.\\n- Follow [@jestjs\\\\_ on Twitter](http://twitter.com/jestjs_).\\n- The Jest Core team syncs once a week to discuss current and future issues. If you\'d like to work on Jest, let us know, submit a few pull requests and join our weekly team meetings.\\n- The awesome engineers at Artsy wrote [about Jest as part of their 2017 frontend stack](http://artsy.github.io/blog/2017/02/05/Front-end-JavaScript-at-Artsy-2017/).\\n- Stephen Scott wrote a detailed article about [testing React components](https://medium.freecodecamp.com/the-right-way-to-test-react-components-548a4736ab22) in which he weighs the pros and cons of different approaches.\\n- [Using Jest with vue.js](https://medium.com/@kentaromiura_the_js_guy/jest-for-all-episode-1-vue-js-d616bccbe186#.r8ryxlw98) got a lot easier after reading Cristian Carlesso\'s blog post.\\n- [Michele Bertoli wrote a book about React Design Patterns and Best Practices](https://twitter.com/cpojer/status/825004258219130880) which features an entire section about Jest.\\n- Improved `--notify` command that shows an operating system notification which [can now also re-run tests from the notification](https://github.com/jestjs/jest/pull/2727). This is actually a Jest feature and we are just checking if you are still reading this blog post.\\n- Jest is now part of [react-boilerplate](https://twitter.com/mxstbr/status/820326656439177217).\\n- Read about the [hidden powers of Jest\'s matchers](https://medium.com/@boriscoder/the-hidden-power-of-jest-matchers-f3d86d8101b0#.pn10z1pzx).\\n\\nFinally, we are happy to announce that the [ava](https://github.com/avajs/ava) test runner has adopted parts of the Jest platform and is now shipping with basic [snapshot support](https://github.com/avajs/ava#snapshot-testing) and is using [pretty-format](https://github.com/jestjs/jest/tree/main/packages/pretty-format). Consolidating test infrastructure makes it easier to learn how to test applications and enables us to share best practices. We are looking forward to see what we can learn from existing test libraries in the future.\\n\\nThe full [changelog can be found on GitHub](https://github.com/jestjs/jest/blob/main/CHANGELOG.md#jest-1900). Jest 19 was a true JavaScript community effort with [17 people who contributed](https://github.com/jestjs/jest/graphs/contributors?from=2016-12-23&to=2017-02-21&type=c) to this release. We thank each and every one of you for your help to make this project great.\\n\\n_This blog post was written by [Rogelio Guzman](https://twitter.com/rogeliog) and [Micha\u0142 Pierzcha\u0142a](https://twitter.com/thymikee)._"},{"id":"/2017/01/30/a-great-developer-experience","metadata":{"permalink":"/fr/blog/2017/01/30/a-great-developer-experience","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2017-01-30-a-great-developer-experience.md","source":"@site/i18n/fr/docusaurus-plugin-content-blog/2017-01-30-a-great-developer-experience.md","title":"Une grande exp\xe9rience pour les d\xe9veloppeurs","description":"Nous croyons fermement que la grande documentation est cruciale pour fournir une grande exp\xe9rience de d\xe9veloppeur. Les docs doivent \xeatre clairs, concis, et utiles pour les nouveaux utilisateurs et les v\xe9t\xe9rans. Dans cet esprit, nous avons r\xe9cemment pris un certain temps pour r\xe9viser le site Web de Jest.","date":"2017-01-30T00:00:00.000Z","formattedDate":"30 janvier 2017","tags":[],"readingTime":2.755,"hasTruncateMarker":true,"authors":[{"name":"H\xe9ctor Ramos","url":"http://twitter.com/hectorramos"}],"frontMatter":{"title":"Une grande exp\xe9rience pour les d\xe9veloppeurs","author":"H\xe9ctor Ramos","authorURL":"http://twitter.com/hectorramos","authorFBID":121800083},"unlisted":false,"prevItem":{"title":"\ud83c\udccf Jest 19\xa0: Mode de surveillance immersif & am\xe9liorations de la plateforme de test","permalink":"/fr/blog/2017/02/21/jest-19-immersive-watch-mode-test-platform-improvements"},"nextItem":{"title":"2016 dans Jest","permalink":"/fr/blog/2016/12/15/2016-in-jest"}},"content":"Nous croyons fermement que la grande documentation est cruciale pour fournir une grande exp\xe9rience de d\xe9veloppeur. Les docs doivent \xeatre clairs, concis, et utiles pour les nouveaux utilisateurs et les v\xe9t\xe9rans. Dans cet esprit, nous avons r\xe9cemment pris un certain temps pour r\xe9viser le site Web de Jest.\\n\\n## Docs am\xe9lior\xe9s\\n\\nUne des modifications que vous remarquerez lors de la visite de notre documentation est la barre lat\xe9rale mise \xe0 jour. La documentation est maintenant divis\xe9e en trois domaines principaux : une introduction \xe0 Jest, des guides d\xe9taill\xe9s sur les fonctionnalit\xe9s de Jest et une r\xe9f\xe9rence compl\xe8te \xe0 l\'API.\\n\\nLa section **Introduction** vous guidera depuis l\'installation de Jest et l\'\xe9criture de votre premier cas, jusqu\'\xe0 l\'utilisation des matchers de Jest et le test du code asynchrone. Si vous \xeates nouveau chez Jest ou si vous avez besoin d\'une mise \xe0 jour rapide, ces docs devraient vous aider \xe0 acc\xe9l\xe9rer en un rien de temps. Si vous avez d\xe9j\xe0 utilis\xe9 Jest et que vous n\'avez besoin que d\'une r\xe9f\xe9rence rapide sur la fa\xe7on dont il est install\xe9, vous ne devez pas aller plus loin que le guide [Pour commencer](/docs/getting-started).\\n\\nUne fois que vous vous sentez \xe0 l\'aise en utilisant Jest, passez \xe0 la section avanc\xe9e **Guides**. Le nouveau [Guide de test d\'instantan\xe9](/docs/snapshot-testing) couvre tout ce que vous devez savoir sur la cr\xe9ation et la maintenance de cas de tests instantan\xe9s.\\n\\nEnfin, nous avons compl\xe8tement remani\xe9 notre documentation de r\xe9f\xe9rence de l\'API. Vous pouvez maintenant trouver des informations d\xe9taill\xe9es sur tous les [Globals](/docs/api)de Jest, [correspondants](/docs/expect), et [chaque drapeau](/docs/cli) support\xe9 par `jest` CLI.\\n\\n\x3c!--truncate--\x3e\\n\\n## Nouvelles couleurs & site web\\n\\nLes couleurs dans le logo Jest et sur le site web se sont senties d\xe9pass\xe9es depuis un certain temps. Nous avons modifi\xe9 le sch\xe9ma de couleurs que nous utilisons pour Jest et modifi\xe9 la page de destination de fa\xe7on significative pour \xeatre plus invitant. Nous esp\xe9rons que vous appr\xe9cierez les nouvelles couleurs et la vitrine des forces de Jest.\\n\\n## Qui utilise Jest\xa0?\\n\\nNous avons cr\xe9\xe9 une vitrine [des utilisateurs](/) pour mettre en \xe9vidence certaines des entreprises qui utilisent Jest. Nous sommes reconnaissants \xe0 toutes ces entreprises d\'avoir utilis\xe9 Jest pour tester leurs sites Web, leurs applications mobiles et leurs API. Si vous utilisez Jest, consultez les directives sur GitHub et envoyez-nous une pull request !\\n\\n<div class=\\"productShowcaseSection\\">\\n <div class=\\"logos\\">\\n   <img src=\\"/img/logos/twitter.png\\" title=\\"Twitter\\"/>\\n   <img src=\\"/img/logos/pinterest.png\\" title=\\"Pinterest\\"/>\\n   <img src=\\"/img/logos/paypal.png\\" title=\\"PayPal\\"/>\\n   <img src=\\"/img/logos/ibm.png\\" title=\\"IBM\\"/>\\n   <img src=\\"/img/logos/spotify.png\\" title=\\"Spotify\\"/>\\n </div>\\n</div>\\n\\n## Jest dans le navigateur\\n\\nComme soulign\xe9 [le mois dernier](/blog/2016/12/15/2016-in-jest), il est maintenant possible d\'utiliser Jest directement dans le navigateur en utilisant [repl.it](https://repl.it/languages/jest). Si vous voulez essayer Jest avant de l\'installer, vous pouvez facilement le faire ci-dessous ou directement \xe0 partir de la page d\'accueil de Jest. Allez-y et essayez le !\\n\\n<div class=\\"jest-repl\\">\\n  <iframe src=\\"https://repl.it/@amasad/try-jest?lite=true\\"></iframe>\\n</div>\\n\\n## Impliquez-vous\\n\\nCe n\'est qu\'un avant-go\xfbt. Allez jeter un coup d\'oeil \xe0 la documentation et n\'h\xe9sitez pas \xe0 nous faire part de vos commentaires. If you find a mistake in the docs or you just want to let us know what needs to be documented better, please tweet at us at [@jestjs\\\\_](https://twitter.com/jestjs_), [open an issue on GitHub](https://github.com/jestjs/jest/issues), or send us a PR by clicking \\"Edit on GitHub\\" at the top of the doc.\\n\\nNous sommes vraiment excit\xe9s pour l\'ann\xe9e \xe0 venir et nous avons h\xe2te de recevoir de vos nouvelles!"},{"id":"/2016/12/15/2016-in-jest","metadata":{"permalink":"/fr/blog/2016/12/15/2016-in-jest","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2016-12-15-2016-in-jest.md","source":"@site/i18n/fr/docusaurus-plugin-content-blog/2016-12-15-2016-in-jest.md","title":"2016 dans Jest","description":"2016 a \xe9t\xe9 une grande ann\xe9e pour les tests JavaScript avec Jest. Au cours des six premiers mois de l\'ann\xe9e, nous avons r\xe9\xe9crit Jest et construit une base solide pour am\xe9liorer de mani\xe8re significative les performances et l\'exp\xe9rience des d\xe9veloppeurs lors des tests du code JavaScript. We flow-typed the entire codebase, built a ton of integration tests for Jest itself and adopted lerna to turn Jest from a framework into a Painless JavaScript Testing platform.","date":"2016-12-15T00:00:00.000Z","formattedDate":"15 d\xe9cembre 2016","tags":[],"readingTime":7.125,"hasTruncateMarker":true,"authors":[{"name":"Christoph Nakazawa","url":"http://twitter.com/cpojer"}],"frontMatter":{"title":"2016 dans Jest","author":"Christoph Nakazawa","authorURL":"http://twitter.com/cpojer","authorFBID":100000023028168},"unlisted":false,"prevItem":{"title":"Une grande exp\xe9rience pour les d\xe9veloppeurs","permalink":"/fr/blog/2017/01/30/a-great-developer-experience"},"nextItem":{"title":"Jest 16.0: Turbocharged CLI & Community Update","permalink":"/fr/blog/2016/10/03/jest-16"}},"content":"2016 a \xe9t\xe9 une grande ann\xe9e pour les tests JavaScript avec Jest. Au cours des six premiers mois de l\'ann\xe9e, nous avons r\xe9\xe9crit Jest et construit une base solide pour am\xe9liorer de mani\xe8re significative les performances et l\'exp\xe9rience des d\xe9veloppeurs lors des tests du code JavaScript. We flow-typed the entire codebase, built a ton of integration tests for Jest itself and adopted [lerna](https://lernajs.io/) to turn Jest from a framework into a [_Painless JavaScript Testing platform_](https://github.com/jestjs/jest/tree/main/packages).\\n\\nThe newly created [react-test-renderer](https://yarnpkg.com/en/package/react-test-renderer) finally enabled testing of react-native components. Through the jest-react-native preset (now merged directly into react-native) Jest now works out of the box for any React project and comes pre-configured in [create-react-app](https://github.com/facebookincubator/create-react-app) and [react-native](https://github.com/facebook/react-native) projects. We integrated core pieces of Jest into [react-native\'s packager](https://github.com/facebook/react-native/tree/main/packager/react-packager/src) and the completely new snapshot testing feature has since been used outside of Jest: It was integrated with React Storybook as \u201c[storyshots](https://github.com/storybooks/storyshots)\u201d and is being adopted by other test runners like [ava](https://github.com/avajs/ava/pull/1113).\\n\\n\x3c!--truncate--\x3e\\n\\nThe [pretty-format](https://github.com/jestjs/jest/tree/main/packages/pretty-format) project was rewritten with performance in mind to drive Jest\'s snapshot feature, was recently merged into Jest\'s monorepo and is also helpful in other [test runners](https://github.com/avajs/ava/pull/1154). Nowadays Jest is much more about collecting different ideas and solutions to testing than it is about one specific implementation of a test framework.\\n\\nI\'d like to deeply thank all the people that have [contributed to Jest this year](https://github.com/jestjs/jest/graphs/contributors?from=2016-01-01&to=2016-12-14&type=c), both from the open source community and at Facebook: Dmitrii Abramov, Cristian Carlesso, Dan Abramov, Daniel Lo Nigro, Maxim Derbin, Evan Scott, Forbes Lindesay, Keyan Zhang and 60 more people. We\'d also like to welcome [Micha\u0142 Pierzcha\u0142a (@thymikee)](https://twitter.com/thymikee) as first official external contributor to Jest. He\'s been doing a great job managing the issues and PRs on the repo. If you\'d like to start contributing to Jest, we have a bunch of [good first tasks](https://github.com/jestjs/jest/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+bug%22) and we are always happy to help on our [discord channel](https://discord.gg/j6FKKQQrW9).\\n\\n## [repl.it](http://repl.it/) with Jest integration\\n\\nAmjad Massad [built a Jest container](https://repl.it/languages/jest) so you can now try out Jest directly in the browser. You can use it from now on when creating GitHub issues which should help troubleshoot problems more quickly. Amjad and Haya are building [repl.it](http://repl.it/) to democratize programming by building powerful yet simple tools and platforms for educators, learners, and developers. They are also [hiring talented engineers](https://repl.it/site/jobs)!\\n\\n<div class=\\"jest-repl\\">\\n  <iframe src=\\"https://repl.it/languages/jest?lite=true\\"></iframe>\\n</div>\\n\\n## Community Update\\n\\nWe feel incredibly humbled that 100+ companies [have adopted Jest](https://twitter.com/cpojer/status/803965499407290369) in the last six months. Companies like Twitter, Pinterest, Paypal, nytimes, IBM (Watson), Spotify, eBay, SoundCloud, Intuit, FormidableLabs, Automattic, Trivago and Microsoft have either fully or partially switched to Jest for their JavaScript testing needs. Thank you very much for giving this project a chance. We would also like to thank everyone who went to conferences and meetups to speak about Jest and to everyone who is writing blog posts about how Jest is or isn\'t working for them!\\n\\nHere is what happened in the community in the last two months:\\n\\n- Jason Bonta and Dmitrii Abramov [redefined the \u201ctesting pyramid\u201d](https://twitter.com/abramov_dmitrii/status/805913874704674816) we were talking a lot about at Facebook.\\n- [jest-codemods](https://github.com/skovhus/jest-codemods#jest-codemods) now allows you to painlessly migrate from Mocha, Tape and Ava to Jest.\\n- The React team announced [improvements to the react-test-renderer](https://facebook.github.io/react/blog/2016/11/16/react-v15.4.0.html) in 15.4.0.\\n- Orta Therox build an amazing [vscode-jest integration](https://github.com/orta/vscode-jest#the-aim) and donated the code for editor support to Jest.\\n- Pavithra Kodmad is documenting [Flipkarts adoption of Jest](http://pksjce.github.io/2016/12/08/notes-on-jest) and shares some getting started tips.\\n- Kent C. Dodds wrote about [migrating to Jest at Paypal](https://medium.com/@kentcdodds/migrating-to-jest-881f75366e7e#.ticf0wchu) and Jason Brown [wrote about migrating to Jest as well](http://browniefed.com/blog/migrating-ava-to-jest/).\\n- Ben McCormick wrote about [saving time with Jest](http://benmccormick.org/2016/12/10/saving-time-with-jest/).\\n- Eric Clemmons wrote about [snapshots and storybook integration](https://medium.com/@ericclemmons/jest-snapshots-for-storybook-5bf36b5e5a3a).\\n- Edvin Erikson wrote about [getting Tap output in Jest](https://medium.com/@edvinerikson/getting-jest-output-in-tap-format-6e07dc2c484c#.1l4edixhl).\\n- [jest-html](https://github.com/guigrpa/jest-html#jest-html--) can bring snapshot diffing to your browser.\\n- There were a few [great conversations on hackernews](https://news.ycombinator.com/item?id=13128146) about Jest.\\n- The community started a great discussion about the [future of enzyme](https://github.com/airbnb/enzyme/issues/715).\\n- Ruben Oostinga wrote about [combining chai and Jest matchers](https://medium.com/@RubenOostinga/combining-chai-and-jest-matchers-d12d1ffd0303#.87si0ra2h).\\n- Emil Ong wrote about why [\u201cTDD\'ing your frontend seems pointless\u201d](https://engineering.haus.com/why-tdding-your-frontend-feels-pointless-5f710fea7325#.pql79knnm).\\n- Nate Hunzaker wrote about [end-to-end testing with Jest and Nightmare](https://www.viget.com/articles/acceptance-testing-react-apps-with-jest-and-nightmare).\\n- [Using Jest with Angular just works](https://medium.com/aya-experience/testing-an-angularjs-app-with-jest-3029a613251#.h9badqevy) according to Matthieu Lux.\\n- A fantastic conversation about the [purpose of snapshot testing](https://github.com/jestjs/jest/issues/2197) is happening right now.\\n- Dmitrii made a new [music video with his metal band](https://twitter.com/abramov_dmitrii/status/806613542447157248).\\n- [lazyspec](https://yarnpkg.com/en/package/lazyspec) can help you create smoke tests quickly if you are introducing tests to an existing codebase.\\n- Patrick Stapfer did a lightning talk about [vim and Jest](https://twitter.com/ryyppy/status/803871975995277312).\\n- Mark Dalgleish was [commenting on the value of snapshot testing](https://twitter.com/markdalgleish/status/806608159527747584).\\n\\n## New features, changes and fixes in Jest 17 & 18\\n\\nJest was initially created more than five years ago and as such an old framework it has accumulated some technical debt. C\'est pourquoi nous avons tendance \xe0 faire des changements de rupture plus souvent que n\xe9cessaire\xa0: Nous pensons qu\'il est important de r\xe9duire progressivement la dette technique pour s\'assurer que Jest en tant que projet reste maintenable \xe0 long terme. We didn\'t announce Jest 17 in a blog post and if you haven\'t upgraded to it in the last month you may find the [changelog](https://github.com/jestjs/jest/blob/main/CHANGELOG.md) useful.\\n\\n- **Breaking:** Removed `pit` in favor of `it` or `test` and `mockImpl` in favor of `jest.fn()` or `mockImplementation` .\\n- **Breaking:** Renamed `--jsonOutputFile` to `--outputFile`.\\n- **Breaking:** Updated `testRegex` to include `test.js` and `spec.js` files.\\n- **Breaking:** Replaced `scriptPreprocessor` with the new `transform` option.\\n- **Breaking:** The `testResultsProcessor` function is now required to return the modified results.\\n- **Potentially Breaking:** Properly resolve `snapshotSerializers`, `setupFiles`, `transform`, `testRunner` and `testResultsProcessor` with a resolution algorithm instead of using `path.resolve`. This mainly means that `<rootDir>` is no longer needed for these options.\\n- **Added:** `pretty-format` and `jest-editor-support` were merged into Jest.\\n- **Added:** `expect.any`, `expect.anything`, `expect.objectContaining`, `expect.arrayContaining`, `expect.stringMatching`.\\n- **Added:** `--testResultsProcessor` is now exposed through the cli.\\n- **Added:** Implemented file watching in `jest-haste-map`.\\n- **Added:** Usage of Jest in watch mode can be hidden through `JEST_HIDE_USAGE`.\\n- **Added:** `expect.assertions(number)` which will ensure that a specified amount of assertions is made in one test.\\n- **Added:** `.toMatchSnapshot(?string)` feature to give snapshots a name.\\n- **Added:** `toMatchObject`, `toHaveProperty` , `toHaveLength` matchers.\\n- **Added:** `expect.extend`.\\n- **Added:** Added support for custom snapshots serializers.\\n- **Added:** Big diffs are now collapsed by default in snapshots and assertions. Added `--expand` (or `-e`) to show the full diff.\\n- **Added:** `jest.resetAllMocks` which replaces `jest.clearAllMocks`.\\n- **Added:** `--json` now includes information about individual tests inside a file.\\n- **Fixed:** `test.concurrent` unhandled promise rejections.\\n- **Fixed:** `babel-plugin-jest-hoist` when using `jest.mock` with three arguments.\\n- **Fixed:** The `JSON` global in `jest-environment-node` now comes from the vm context instead of the parent context.\\n- **Fixed:** Jest does not print stack traces from babel any longer.\\n- **Fixed:** Fake timers are reset when `FakeTimers.useTimers()` is called.\\n- **Fixed:** Regular expressions are properly escaped in snapshots.\\n- **Fixed:** Improved pretty printing of large objects.\\n- **Fixed:** `NaN% Failed` in the OS notification when using `--notify`.\\n- **Fixed:** The first test run without cached timings will now use separate processes instead of running in band.\\n- **Fixed:** `Map`/`Set` comparisons.\\n- **Fixed:** `test.concurrent` now works with `--testNamePattern`.\\n- **Fixed:** Improved `.toContain` matcher.\\n- **Fixed:** Properly resolve modules with platform extensions on react-native.\\n- **Fixed:** global built in objects in `jest-environment-node` now work properly.\\n- **Fixed:** Create mock objects in the vm context instead of the parent context.\\n- **Fixed:** `.babelrc` is now part of the transform cache key in `babel-jest`.\\n- **Fixed:** docblock parsing with haste modules.\\n- **Fixed:** Exit with the proper code when the coverage threshold is not reached.\\n- **Fixed:** Jest now clears the entire scrollback in watch mode.\\n- **Deprecated:** `jest-react-native` was deprecated and now forwards `react-native`.\\n\\n## Plans for Jest in H1 2017\\n\\nSix months ago [we shared our plans for Jest](/blog/2016/07/27/jest-14#what-s-next-for-jest) and we are happy that we were able to execute well on almost all of them. For the next six months, here is what we are planning:\\n\\n- **Instant feedback:** [Nuclide](https://nuclide.io/) integration and an improved and [faster watch mode](https://github.com/jestjs/jest/pull/2324#issuecomment-267149669).\\n- **Improved developer experience:** new mocking APIs and improved assertions.\\n- **Better performance and memory usage:** analyze Jest and be more conscious about efficiency.\\n- **Snapshot Improvements:** snapshot approval mode, syntax highlighting and improved `react-test-renderer` APIs.\\n- **Website:** We\'ll overhaul the website and documentation and add a Jest cheat sheet.\\n\\nWe won\'t be providing timelines or estimates for these features and we may not actually get to all of these things. If you\'d like to help make these things a reality, send us issues and pull requests with your ideas and let\'s work on improving Jest together in 2017."},{"id":"/2016/10/03/jest-16","metadata":{"permalink":"/fr/blog/2016/10/03/jest-16","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2016-10-03-jest-16.md","source":"@site/i18n/fr/docusaurus-plugin-content-blog/2016-10-03-jest-16.md","title":"Jest 16.0: Turbocharged CLI & Community Update","description":"It\'s been one month since the last major release and we\'ve made significant improvements to Jest since. In this major release we are updating the snapshot format we are using which will likely require snapshots to be updated when upgrading Jest. We don\'t make these changes lightly and don\'t expect this to happen often but we think it is necessary to improve the format from time to time.","date":"2016-10-03T00:00:00.000Z","formattedDate":"3 octobre 2016","tags":[],"readingTime":5.84,"hasTruncateMarker":true,"authors":[{"name":"Christoph Nakazawa","url":"http://twitter.com/cpojer"}],"frontMatter":{"title":"Jest 16.0: Turbocharged CLI & Community Update","author":"Christoph Nakazawa","authorURL":"http://twitter.com/cpojer","authorFBID":100000023028168},"unlisted":false,"prevItem":{"title":"2016 dans Jest","permalink":"/fr/blog/2016/12/15/2016-in-jest"},"nextItem":{"title":"Jest 15.0\xa0: Nouvelles valeurs par d\xe9faut pour Jest","permalink":"/fr/blog/2016/09/01/jest-15"}},"content":"It\'s been one month since the last major release and we\'ve made significant improvements to Jest since. In this major release we are updating the snapshot format we are using which will likely require snapshots to be updated when upgrading Jest. We don\'t make these changes lightly and don\'t expect this to happen often but we think it is necessary to improve the format from time to time.\\n\\n## Upgraded CLI\\n\\n![reporter](/img/blog/16-reporter.gif)\\n\\nJest 16 features a new reporter interface that shows running tests as well as a live summary and a progress bar based on the estimated test runtime from previous test runs. We also improved the CLI output to work better with different color schemes. If there were test failures in a previous run, Jest will now always run those tests first to give useful signal to users as quickly as possible.\\n\\n\x3c!--truncate--\x3e\\n\\nWe also added a lot of new features which you may find useful:\\n\\n- New CLI flags were added: A `--testNamePattern=pattern` or `-t <pattern>` option was added to filter tests from the command line much like `it.only` or `fit` does in tests.\\n- Previously failed tests now always run first.\\n- `jest <pattern>` is now case-insensitive to make it easier to filter test files.\\n- A test run in watch mode can now be interrupted. During a test run, simply press any of the keys used for input during watch mode (`a`, `o`, `p`, `q` or `enter`) to abort a test run and start a new one.\\n- The `--bail` flag now also works in watch mode. Together with running failed tests first, Jest\'s watch mode will now feel turbocharged!\\n- Jest now automatically considers files and tests with the `jsx` extension.\\n- Jest warns about duplicate manual mock files and we improved automatically created mocks for ES modules compiled with babel.\\n- A `jest.clearAllMocks` function was added to clear all mocks in between tests.\\n- We improved module resolution when `moduleNameMapper` is used.\\n- Finally, a `--findRelatedTests <fileA> <fileB>` cli option was added to run tests related to the specified files. This is especially helpful as a pre-commit hook if you\'d like to run tests only on a specified set of files that have tests associated with them.\\n\\nThis is what Jest looks like when a test run is interrupted in watch mode: ![watch](/img/blog/16-watch.gif)\\n\\n## Snapshot Updates\\n\\nJest\'s snapshot implementation was completely rewritten. The new version of the `jest-snapshot` package is now structured in a way that allows for easier integration into other test runners and enables more cool integrations like with [React Storybook](https://voice.kadira.io/snapshot-testing-in-react-storybook-43b3b71cec4f#.qh4lzcadb). Jest doesn\'t mark snapshots as obsolete in a file with skipped or failing tests. We also made a number of changes to the snapshot format:\\n\\n- Objects and Arrays are now printed with a trailing comma to minimize future changes to snapshots.\\n- We removed function names from snapshots. They were causing issues with different versions of Node, with code coverage instrumentation and we generally felt like it wasn\'t useful signal to show to the user that the name of a function has changed.\\n- Snapshots are now sorted using natural sort order within a file.\\n\\nWhen upgrading to Jest 16, the diff might look similar to this one: ![snapshots](/img/blog/16-snapshots.png)\\n\\n## Test Library Updates\\n\\nWe finished the migration of Jasmine assertions to the new Jest matchers. We added three new matchers: `toBeInstanceOf`, `toContainEqual` and `toThrowErrorMatchingSnapshot` . We have more readable failure messages for the spy/mock matchers `toHaveBeenLastCalledWith`, `toHaveBeenCalledWith`, `lastCalledWith` and `toBeCalledWith`. Now that we have rewritten all assertions and separated them into their own package, we\'ll be working on making them standalone so they can be integrated into any test framework if you\'d like to use them outside of Jest.\\n\\nWe also added a bunch of aliases that were requested by the community. To make Jest focus on a single test you can now use either `it.only` or `test.only` or keep using `fit`; For skipping a test, `it.skip` or `test.skip` are now available alongside of `xit`; finally to define a test as concurrent you can use `test.concurrent` which is useful in case your test accesses network resources or databases.\\n\\nFinally, if you\'d like to overwrite the `expect` global with a different assertion library like [chai](http://chaijs.com/), this can now be done using the `setupTestFrameworkScriptFile` configuration option.\\n\\n## Community Update\\n\\nOver the last month lots of articles were written about Jest\'s snapshot testing feature, how to migrate to Jest and how to get started writing tests. I also did a few live videos to explain how Jest and snapshot testing works:\\n\\n- [FB Live Video about Snapshot Testing](https://www.facebook.com/react/videos/1035427199869020/).\\n- [JavaScript & React Testing with Kent C. Dodds](https://www.youtube.com/watch?v=i31VtyJSM-I&feature=youtu.be).\\n\\nA number of people wrote articles about snapshot testing. The most opinionated article that resonated with the Jest team was \u201c[Testing with Jest Snapshots: First Impressions](http://benmccormick.org/2016/09/19/testing-with-jest-snapshots-first-impressions/)\u201d. Ben makes three great points in his blog post:\\n\\n1.  Snapshot tests are a complement for conventional tests not a replacement.\\n2.  Snapshot tests are more useful with a healthy code review process.\\n3.  Snapshot tests work well with auto-mocking.\\n\\nWe highly recommend reading the entire blog post. Ben did a fantastic job explaining the reasons why we built snapshot testing. It\'s important to point out that we didn\'t introduce snapshot testing to replace all other forms of testing but rather as a way to enable engineers to write tests for code that they otherwise wouldn\'t write tests for. It works well for things like React components, CLI output, error messages and many others but it doesn\'t solve all problems. Jest\'s goal is to provide many different ways to write effective tests without sacrificing performance or the project\'s maintainability.\\n\\nOther highlights about snapshot testing:\\n\\n- A React Native testing series: [Part 1: Jest \u2013 Snapshot come into play](https://blog.callstack.io/unit-testing-react-native-with-the-new-jest-i-snapshots-come-into-play-68ba19b1b9fe) and [Part 2: Jest \u2013 Redux Snapshots for your Actions and Reducers](https://blog.callstack.io/unit-testing-react-native-with-the-new-jest-ii-redux-snapshots-for-your-actions-and-reducers-8559f6f8050b#.putt9eipm).\\n- [How we landed on Jest snapshot testing for JavaScript](https://blog.grommet.io/post/2016/09/01/how-we-landed-on-jest-snapshot-testing-for-javascript).\\n- [Picture This: Snapshot Testing](http://guigrpa.github.io/2016/09/27/picture-this-snapshot-testing/).\\n- [Snapshot testing with React Storybook](https://voice.kadira.io/snapshot-testing-in-react-storybook-43b3b71cec4f).\\n- [Testing React and Redux Applications](https://medium.com/@ryancollinsio/testing-react-redux-applications-fee79ac0087f#.lyjl7st1n).\\n- If you are using the popular [enzyme](https://github.com/airbnb/enzyme) testing utility, there is now a project [enzyme-to-json](https://github.com/trayio/enzyme-to-json) which makes it possible to use Jest\'s snapshot testing feature together with enzyme.\\n\\n[Redux itself now uses Jest](https://github.com/reactjs/redux/commit/7296d3cba1f5f899bdee5ef6695a8d21149f8d6c) and Max Stoiber wrote a [tutorial on how to test code written with redux](http://academy.plot.ly/react/6-testing/). There is also a great [guide on how to write tests for MobX](https://semaphoreci.com/community/tutorials/how-to-test-react-and-mobx-with-jest). If you are using [create-react-app](https://github.com/facebookincubator/create-react-app), Jest is now included by default. Kent C. Dodds created a ton of [videos on egghead.io](https://egghead.io/lessons/javascript-use-jest-s-snapshot-testing-feature?pl=testing-javascript-with-jest-a36c4074) that will help you get started with Jest.\\n\\nIf you are using other test runners, Kenneth Skovhus built an awesome [jest-codemods](https://github.com/skovhus/jest-codemods) library that will automate the conversion for you. Codemods are awesome: they\'ll allow you to quickly evaluate whether Jest will work for you. Give it a try!\\n\\nThe full [changelog can be found on GitHub](https://github.com/jestjs/jest/blob/main/CHANGELOG.md#jest-1600). Jest 16 was a true JavaScript community effort and the project now has more than 220 contributors. We thank each and every one of you for your help to make this project great."},{"id":"/2016/09/01/jest-15","metadata":{"permalink":"/fr/blog/2016/09/01/jest-15","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2016-09-01-jest-15.md","source":"@site/i18n/fr/docusaurus-plugin-content-blog/2016-09-01-jest-15.md","title":"Jest 15.0\xa0: Nouvelles valeurs par d\xe9faut pour Jest","description":"We spent the past year making Jest faster, easier to configure, added tons of features and built snapshot testing. However, there were two areas where we invested very little we can move fast and improve the framework for Facebook and the open source community at light-speed. Jest\'s goal is to come with batteries included and to require as little configuration as necessary. We recently got a chance to explain our philosophy on a create-react-app issue.","date":"2016-09-01T00:00:00.000Z","formattedDate":"1 septembre 2016","tags":[],"readingTime":7.205,"hasTruncateMarker":true,"authors":[{"name":"Christoph Nakazawa","url":"http://twitter.com/cpojer"}],"frontMatter":{"title":"Jest 15.0\xa0: Nouvelles valeurs par d\xe9faut pour Jest","author":"Christoph Nakazawa","authorURL":"http://twitter.com/cpojer","authorFBID":100000023028168},"unlisted":false,"prevItem":{"title":"Jest 16.0: Turbocharged CLI & Community Update","permalink":"/fr/blog/2016/10/03/jest-16"},"nextItem":{"title":"Jest 14.0\xa0: Test de snapshot de l\'arborescence React","permalink":"/fr/blog/2016/07/27/jest-14"}},"content":"We spent the past year making Jest [faster](/blog/2016/03/11/javascript-unit-testing-performance), [easier to configure](/blog/2016/04/12/jest-11), [added tons of features](/blog/2016/06/22/jest-13) and built [snapshot testing](/blog/2016/07/27/jest-14). However, there were two areas where we invested very little: the CLI output and user experience. With Jest 15 we are changing the framework radically to make it easier to use both for beginners and experienced users. We are excited that our investment in Jest is now paying off: we can move fast and improve the framework for Facebook and the open source community at light-speed. Jest\'s goal is to come with batteries included and to require as little configuration as necessary. We recently got a chance to explain our philosophy on a [create-react-app issue](https://github.com/facebookincubator/create-react-app/pull/250#issuecomment-237098619).\\n\\nThe most important change to talk about is a set of [new defaults](https://github.com/jestjs/jest/pull/1511). If you are an existing Jest user you will very likely need to update your configuration for Jest 15. In most cases it will simplify your setup and Jest will provide useful error messages during the upgrade. All of the new defaults can be disabled to suit your needs, but we still consider the disabled features critical for Jest in certain situations and will continue to use and support them at Facebook long-term. Our [API documentation](/docs/api) was also completely rewritten to reflect these changes. [This pull request for React](https://github.com/facebook/react/pull/7625/files) highlights some of the changes necessary for existing projects.\\n\\n\x3c!--truncate--\x3e\\n\\n## New CLI error messages and summaries\\n\\nAs part of our effort to remove Jasmine incrementally within Jest, replacing all Jasmine matchers was almost completed. A lot of time was spent tweaking every error message for every matcher to give the best signal to users when a test is failing \u2013 the time when Jest should provide the most value to you. In addition to printing the expected and received values, a diff is printed for the `toBe` and `toEqual` matchers to help spot mistakes. More colors were added and relevant files from stack traces are highlighted more prominently.\\n\\nHere is a comparison of the before and after on a light terminal: ![failure1](/img/blog/15-failure1.png) It also works well with darker colors: ![failure2](/img/blog/15-failure2.png)\\n\\n## New watch command\\n\\nWe completely rewrote `jest --watch` to be more interactive. It can now switch between running all tests or only test files related to changed files by pressing `a` or `o`. By pressing `p` a prompt appears that allows to specify a test pattern to focus on a specific set of files. Snapshot tests can be updated by pressing `u`.\\n\\n![watch](/img/blog/15-watch.gif)\\n\\n## jest-react-native improvements\\n\\nMocks for `ListView`, `TextInput`, `ActivityIndicator`, `ScrollView` and more were added. The existing mocks were updated to use the real implementations and existing snapshots likely have to be updated when upgrading to Jest 15. A `mockComponent` function was added to `jest-react-native` that can be used to mock native components:\\n\\n```js\\njest.mock(\'MyNativeComponent\', () => {\\n  const jestReactNative = require(\'jest-react-native\');\\n  return jestReactNative.mockComponent(\'MyNativeComponent\');\\n});\\n```\\n\\nThere have also been a number of improvements around mocking images, the fetch module and other native APIs.\\n\\n## Buffered Console Messages\\n\\nJest parallelizes test runs across workers to maximize performance. Previously Jest used to forward console messages from workers to the parent and printed them immediately. When running multiple tests in parallel, it was often hard to find out which test and which module was calling a log function. In Jest 15, all console messages are buffered and printed together with individual test results. In addition the file and line number of the log call is printed so the code can easily be inspected.\\n\\nCompare the output of the previous version of Jest and Jest 15: ![console](/img/blog/15-console.png)\\n\\n## Disabled Automocking\\n\\nAutomocking is now disabled by default in Jest. This is by far the most confusing feature for new users and in many ways it doesn\'t make sense for small projects. We introduced automocking at Facebook and it worked great for us when unit testing was adopted in a large existing code base with few existing tests, but over time it felt like people spent more time fighting with mocked/unmocked modules than it would have taken them to write a test normally. We also noticed that library authors often require a huge number of basic modules that always have to be manually unmocked. Even for Jest itself we realized that the majority of tests had automocking disabled manually. We still believe that explicit automocking can be incredibly valuable. This change simply trades implicit mocks for explicit mocks via calls to `jest.mock(moduleName)`.\\n\\nIf you would still like to use automocking by default, enable the `automock` setting in your configuration or manually call `jest.enableAutomock()` in your test or setup file.\\n\\n## Test File Patterns\\n\\nNot everyone uses the same convention of using a `__tests__` folder to store tests. Jest 15 also looks for files ending in `.spec.js` or `.test.js`, two popular community standards. Jest 15 also removes the `testDirectoryName` and `testFileExtensions` configuration options and asks users to switch to the `testRegex` option when the old configuration options are used.\\n\\n## Module Registry Persistence\\n\\nJest used to implicitly reset all modules before each test and we recommended requiring modules in `beforeEach` or inside of tests. This is useful when modules have local state that shouldn\'t be shared between tests. However, two big shifts happened: ES modules with the top-level `import` syntax and a renewed interest in writing stateless functional modules.\\n\\nThis has lead to numerous incompatibilities. We also noticed that at Facebook we weren\'t even using this implicit reset. Instead we relied on explicit calls to `jest.resetModules()` which puts engineers in control on when to wipe away all state.\\n\\nHere is an example:\\n\\n```js\\nconst React1 = require(\'react\');\\njest.resetModules();\\nconst React2 = require(\'react\');\\n\\nReact1 !== React2; // These two are separate copies of React.\\n```\\n\\nThe call to `resetModules` wipes away the require cache. A second call to require the same module will result in a new instantiation of the same module and all of its dependencies. This feature is especially useful when dealing with modules that have side effects, like [jest-haste-map](https://github.com/jestjs/jest/blob/3bbf32a239fc4aad8cc6928a787f235bd86fecac/packages/jest-haste-map/src/__tests__/index-test.js#L64).\\n\\nWe believe it is better to put users in control so we disabled the implicit reset. Modules can be reset using `jest.resetModules()` in code and the `resetModules` option can be enabled in the configuration to bring back the previous behavior.\\n\\n## Real vs Fake Timers\\n\\nBy default Jest used to mock all timer functions like `setTimeout` or `process.nextTick` and provided an API `jest.runAllTimers()` to advance timers programatically. This is useful when a piece of code sets a long timeout that we don\'t want to wait for in a test.\\n\\nHowever we found that most of the time the use cases are quite isolated. [Async programming](/docs/tutorial-async) has also become much simpler in our test runner. Jest now uses the real timers by default.\\n\\nYou can still override this by specifying `\\"timers\\": \\"fake\\"` in the configuration or by calling `jest.useRealTimers()` and `jest.useFakeTimers()` global switches.\\n\\n## setupEnvScriptFile vs setupFiles\\n\\nThe `setupEnvScriptFile` configuration option has been deprecated for a while. Jest 15 removes it completely and replaces it with `setupFiles`. This option expects an array of file paths that are loaded in order before a test file is executed.\\n\\n## Rewritten Code Coverage Support\\n\\nCode coverage in Jest can be used through `jest --coverage` and requires no additional packages or configuration. Code coverage support was completely rewritten and a new `collectCoverageFrom` option was added to collect code coverage information from entire projects, including **untested files**. Note that this option uses globs as we are hoping to further simplify configuration options in the future and provide a simpler alternative to regular expressions. See Jest\'s [package.json](https://github.com/jestjs/jest/blob/9088f6517813f6c089cf52e980d6579511dcde88/package.json#L47) for an example.\\n\\n## Other Improvements\\n\\nA huge number of other improvements were also made:\\n\\n- Improved performance of small test runs.\\n- Jest now uses verbose mode when only a single test file is executed.\\n- Added an `--env` option to override the configured test environment.\\n- `moduleNameMapper` now uses a resolution algorithm.\\n- Jest now works with paths that have special characters in them, like parenthesis.\\n- Added `global.global` to the node environment.\\n- Fixed `babel-plugin-jest-hoist`\'s invalid error when a random user function was called `mock`.\\n- Fix `testEnvironment` resolution to prefer `jest-environment-{name}` instead of `{name}` only. This prevents a module collision when using `jsdom` as test environment.\\n- Improvements to Jest\'s own test infra by merging integration and unit tests. Code coverage is now collected for Jest.\\n\\nWe are happy when looking back at all the changes we have made together with the help from the community and couldn\'t be more excited to make Jest even better over the course of the next few months. Please [file an issue](https://github.com/jestjs/jest/issues) if something isn\'t working as expected and send us pull requests.\\n\\nNext up: [Concurrent Reporter](https://github.com/jestjs/jest/pull/1480)."},{"id":"/2016/07/27/jest-14","metadata":{"permalink":"/fr/blog/2016/07/27/jest-14","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2016-07-27-jest-14.md","source":"@site/i18n/fr/docusaurus-plugin-content-blog/2016-07-27-jest-14.md","title":"Jest 14.0\xa0: Test de snapshot de l\'arborescence React","description":"One of Jest\'s philosophies is to provide an integrated \u201czero-configuration\u201d experience. We want to make it as frictionless as possible to write good tests that are useful. We observed that when engineers are provided with ready-to-use tools, they end up writing more tests, which in turn results in stable and healthy code bases.","date":"2016-07-27T00:00:00.000Z","formattedDate":"27 juillet 2016","tags":[],"readingTime":5.355,"hasTruncateMarker":true,"authors":[{"name":"Christoph Nakazawa","url":"http://twitter.com/cpojer"}],"frontMatter":{"title":"Jest 14.0\xa0: Test de snapshot de l\'arborescence React","author":"Christoph Nakazawa","authorURL":"http://twitter.com/cpojer","authorFBID":100000023028168},"unlisted":false,"prevItem":{"title":"Jest 15.0\xa0: Nouvelles valeurs par d\xe9faut pour Jest","permalink":"/fr/blog/2016/09/01/jest-15"},"nextItem":{"title":"Jest 13.0: Flow & REPL","permalink":"/fr/blog/2016/06/22/jest-13"}},"content":"One of Jest\'s philosophies is to provide an integrated \u201czero-configuration\u201d experience. We want to make it as frictionless as possible to write good tests that are useful. We observed that when engineers are provided with ready-to-use tools, they end up writing more tests, which in turn results in stable and healthy code bases.\\n\\nOne of the big open questions was how to write React tests efficiently. There are plenty of tools such as [ReactTestUtils](https://facebook.github.io/react/docs/test-utils.html) and [enzyme](https://enzymejs.github.io/enzyme/). Both of these tools are great and are actively being used. However engineers frequently told us that they spend more time writing a test than the component itself. As a result many people stopped writing tests altogether which eventually led to instabilities. Engineers told us all they wanted was to make sure their components don\'t change unexpectedly.\\n\\n\x3c!--truncate--\x3e\\n\\nTogether with the React team we created a new test renderer for React and added snapshot testing to Jest. Consider this [example test](https://github.com/jestjs/jest/blob/main/examples/snapshot/__tests__/link.test.js) for a simple [Link component](https://github.com/jestjs/jest/blob/main/examples/snapshot/Link.js):\\n\\n```javascript\\nimport renderer from \'react-test-renderer\';\\ntest(\'Link renders correctly\', () => {\\n  const tree = renderer\\n    .create(<Link page=\\"http://www.facebook.com\\">Facebook</Link>)\\n    .toJSON();\\n  expect(tree).toMatchSnapshot();\\n});\\n```\\n\\nThe first time this test is run, Jest creates a [snapshot file](https://github.com/jestjs/jest/blob/main/examples/snapshot/__tests__/__snapshots__/link.test.js.snap) that looks like this:\\n\\n```javascript\\nexports[`Link renders correctly 1`] = `\\n<a\\n  className=\\"normal\\"\\n  href=\\"http://www.facebook.com\\"\\n  onMouseEnter={[Function bound _onMouseEnter]}\\n  onMouseLeave={[Function bound _onMouseLeave]}>\\n  Facebook\\n</a>\\n`;\\n```\\n\\nThe snapshot artifact should be committed alongside code changes. We use [pretty-format](https://github.com/thejameskyle/pretty-format) to make snapshots human-readable during code review. On subsequent test runs Jest will simply compare the rendered output with the previous snapshot. S\'ils sont identiques, le test est r\xe9ussi. If they don\'t match, either the implementation has changed and the snapshot needs to be updated with `jest -u`, or the test runner found a bug in your code that should be fixed.\\n\\nIf we change the address the Link component in our example is pointing to, Jest will print this output:\\n\\n![snapshot-testing](/img/blog/snapshot.png)\\n\\nNow you know that you either need to accept the changes with `jest -u`, or fix the component if the changes were unintentional. To try out this functionality, please clone the [snapshot example](https://github.com/jestjs/jest/tree/main/examples/snapshot), modify the Link component and run Jest. We updated the [React Tutorial](/docs/tutorial-react) with a new guide for snapshot testing.\\n\\nThis feature was built by [Ben Alpert](https://twitter.com/soprano) and [Cristian Carlesso](https://twitter.com/kentaromiura).\\n\\n## Experimental React Native support\\n\\nBy building a test renderer that targets no specific platform we are finally able to support a full, unmocked version of React Native. We are excited to launch experimental React Native support for Jest through the `jest-react-native` package.\\n\\nYou can start using Jest with react-native by running `yarn add --dev jest-react-native` and by adding the preset to your Jest configuration:\\n\\n```json\\n\\"jest\\": {\\n  \\"preset\\": \\"jest-react-native\\"\\n}\\n```\\n\\n- [Tutorial and setup guide](/docs/tutorial-react-native#content)\\n- [Example project](https://github.com/jestjs/jest/tree/main/examples/react-native)\\n- [Example pull request for _snowflake_](https://github.com/bartonhammond/snowflake/pull/110), a popular react-native open source library.\\n\\n:::info\\n\\nThe preset currently only implements the minimal set of configuration necessary to get started with React Native testing. We are hoping for community contributions to improve this project. Please try it and file [issues](https://github.com/jestjs/jest/issues) or send pull requests!\\n\\n:::\\n\\n## Why snapshot testing?\\n\\nFor Facebook\'s native apps we use a system called \u201csnapshot testing\u201d: a snapshot test system that renders UI components, takes a screenshot and subsequently compares a recorded screenshot with changes made by an engineer. If the screenshots don\'t match, there are two possibilities: either the change is unexpected or the screenshot can be updated to the new version of the UI component.\\n\\nWhile this was the solution we wanted for the web, we also found many problems with such end-to-end tests that snapshot integration tests solve:\\n\\n- **No flakiness:** Because tests are run in a command line runner instead of a real browser or on a real phone, the test runner doesn\'t have to wait for builds, spawn browsers, load a page and drive the UI to get a component into the expected state which tends to be flaky and the test results become noisy.\\n- **Fast iteration speed:** Engineers want to get results in less than a second rather than waiting for minutes or even hours. If tests don\'t run quickly like in most end-to-end frameworks, engineers don\'t run them at all or don\'t bother writing them in the first place.\\n- **Debugging:** It\'s easy to step into the code of an integration test in JS instead of trying to recreate the screenshot test scenario and debugging what happened in the visual diff.\\n\\nBecause we believe snapshot testing can be useful beyond Jest we split the feature into a [jest-snapshot](https://github.com/jestjs/jest/tree/main/packages/jest-snapshot) package. We are happy to work with the community to make it more generic so it can be integrated with other test runners and share concepts and infrastructure with each other.\\n\\nFinally, here is a quote of a Facebook engineer describing how snapshot testing changed his unit testing experience:\\n\\n> \u201cOne of the most challenging aspects of my project was keeping the input and output files for each test case in sync. Each little change in functionality could cause all the output files to change. With snapshot testing I do not need the output files, the snapshots are generated for free by Jest! I can simply inspect how Jest updates the snapshots rather than making the changes manually.\u201d \u2013 [Kyle Davis](https://github.com/kyldvs) working on [fjs](https://github.com/kyldvs/fjs).\\n\\n## What\'s next for Jest\\n\\nRecently [Aaron Abramov](https://twitter.com/aarondjents) has joined the Jest team full time to improve our unit and integration test infrastructure for Facebook\'s ads products. For the next few months the Jest team is planning major improvements in these areas:\\n\\n- **Replace Jasmine:** Jasmine is slowing us down and is not being very actively developed. We started replacing all the Jasmine matchers and are excited to add new features and drop this dependency.\\n- **Code Coverage:** When Jest was originally created, tools such as babel didn\'t exist. Our code coverage support has a bunch of edge cases and isn\'t always working properly. We are rewriting it to address all the current problems with coverage.\\n- **Developer Experience:** This ranges from improving the setup process, the debugging experience to CLI improvements and more documentation.\\n- **Mocking:** The mocking system, especially around manual mocks, is not working well and is confusing. We hope to make it more strict and easier to understand.\\n- **Performance:** Further performance improvements especially for really large codebases are being worked on.\\n\\nAs always, if you have questions or if you are excited to help out, please reach out to us!"},{"id":"/2016/06/22/jest-13","metadata":{"permalink":"/fr/blog/2016/06/22/jest-13","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2016-06-22-jest-13.md","source":"@site/i18n/fr/docusaurus-plugin-content-blog/2016-06-22-jest-13.md","title":"Jest 13.0: Flow & REPL","description":"Today we are happy to announce the next major release of Jest. We have made major changes to Jest which are going to benefit you and all of Facebook\'s JavaScript test infrastructure. Most importantly, we added static types to all of Jest\'s code during a recent Jest hackathon at Facebook. Fifteen people worked for a day and night to add Flow types to Jest and to add new features to Jest. The Flow types serve two purposes: First, we believe that code is written to be read. Most of the time, code is written only once but read by dozens of people over the course of years. Adding static types to the project helps document the code and helps explain some of the architecture in Jest. Second, adding static types makes maintenance easier and will allow us to more confidently refactor parts of Jest without fear of breakages.","date":"2016-06-22T00:00:00.000Z","formattedDate":"22 juin 2016","tags":[],"readingTime":2.565,"hasTruncateMarker":true,"authors":[{"name":"Christoph Nakazawa","url":"http://twitter.com/cpojer"}],"frontMatter":{"title":"Jest 13.0: Flow & REPL","author":"Christoph Nakazawa","authorURL":"http://twitter.com/cpojer","authorFBID":100000023028168},"unlisted":false,"prevItem":{"title":"Jest 14.0\xa0: Test de snapshot de l\'arborescence React","permalink":"/fr/blog/2016/07/27/jest-14"},"nextItem":{"title":"Jest 11.0","permalink":"/fr/blog/2016/04/12/jest-11"}},"content":"Today we are happy to announce the next major release of Jest. We have made major changes to Jest which are going to benefit you and all of Facebook\'s JavaScript test infrastructure. Most importantly, we added static types to all of Jest\'s code during a recent Jest hackathon at Facebook. Fifteen people worked for a day and night to add [Flow](https://flowtype.org/) types to Jest and to add new features to Jest. The Flow types serve two purposes: First, we believe that code is written to be read. Most of the time, code is written only once but read by dozens of people over the course of years. Adding static types to the project helps document the code and helps explain some of the architecture in Jest. Second, adding static types makes maintenance easier and will allow us to more confidently refactor parts of Jest without fear of breakages.\\n\\nThe Flow project has evolved a lot within Facebook and has been successfully adopted across many of our frameworks and almost all of our product code. Adoption can be parallelized incredibly well \u2013 it can be done file-by-file until enough of the codebase is well-typed. Then, Flow provides real value and helps guide through large changes. Through this, many small edge cases and bugs were found.\\n\\n\x3c!--truncate--\x3e\\n\\nWith the help of [lerna](https://github.com/lerna/lerna), we continued to modularize the Jest project. With just a small [update to the configuration](https://github.com/lerna/lerna#lernajson), Flow and lerna now get along well with each other. Splitting up Jest into packages helped us rethink module boundaries and enabled us to ship useful [packages](https://github.com/jestjs/jest/tree/main/packages) standalone: The `jest-runtime` and `jest-repl` cli tools now allow you to run scripts in a sandboxed Jest environment, enabling you to run and debug your app from the command line. This is especially helpful for projects that use Facebook\'s `@providesModule` module convention. To get started, just install `jest-repl` and run it in the same folder you normally run your tests in! We also published a `jest-changed-files` package that finds changed files in version control for either git or hg, a common thing in developer tools.\\n\\n## New and improved features\\n\\n- Added a notification plugin that shows a test run notification when using `--notify`.\\n- Added a `browser` config option to properly resolve npm packages with a browser field in `package.json` if you are writing tests for client side apps.\\n- Improved \u201cno tests found message\u201d which will now report which tests were found and how they were filtered.\\n- Added `jest.isMockFunction(jest.fn())` to test for mock functions.\\n- Improved test reporter printing and added a test failure summary when running many tests.\\n- Added support for mocking virtual modules through `jest.mock(\'Module\', implementation, {virtual: true})`.\\n- Removed the `.haste_cache` folder. Jest now uses the operating system\'s preferred temporary file location.\\n- Added the duration of individual tests in verbose mode.\\n- Added the ability to record snapshots in Jest. We\'ll be publishing a separate blog post about this feature soon.\\n\\nFinally, we have received a complete website redesign done by Matthew Johnston and added documentation for using [Jest with webpack](/docs/webpack). Happy Jesting\xa0!"},{"id":"/2016/04/12/jest-11","metadata":{"permalink":"/fr/blog/2016/04/12/jest-11","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2016-04-12-jest-11.md","source":"@site/i18n/fr/docusaurus-plugin-content-blog/2016-04-12-jest-11.md","title":"Jest 11.0","description":"Aujourd\'hui, nous annon\xe7ons un passage \xe0 la version majeure de Jest avec Jest 11.0 comme premi\xe8re version majeure. Jest a \xe9t\xe9 utilis\xe9 par les ing\xe9nieurs de Facebook et sur nos syst\xe8mes d\u2019int\xe9gration continue depuis des ann\xe9es et nous pensons que Jest a \xe9t\xe9 bien plus qu\u2019un \u201c1. \xbb pour une longue p\xe9riode. Ceci est similaire \xe0 un changement l\'\xe9quipe React a fait.","date":"2016-04-12T00:00:00.000Z","formattedDate":"12 avril 2016","tags":[],"readingTime":4.595,"hasTruncateMarker":true,"authors":[{"name":"Christoph Nakazawa","url":"http://twitter.com/cpojer"}],"frontMatter":{"title":"Jest 11.0","author":"Christoph Nakazawa","authorURL":"http://twitter.com/cpojer","authorFBID":100000023028168},"unlisted":false,"prevItem":{"title":"Jest 13.0: Flow & REPL","permalink":"/fr/blog/2016/06/22/jest-13"},"nextItem":{"title":"Performance des tests unitaires JavaScript","permalink":"/fr/blog/2016/03/11/javascript-unit-testing-performance"}},"content":"Aujourd\'hui, nous annon\xe7ons un passage \xe0 la version majeure de Jest avec Jest 11.0 comme premi\xe8re version majeure. Jest a \xe9t\xe9 utilis\xe9 par les ing\xe9nieurs de Facebook et sur nos syst\xe8mes d\u2019int\xe9gration continue depuis des ann\xe9es et nous pensons que Jest a \xe9t\xe9 bien plus qu\u2019un \u201c1. \xbb pour une longue p\xe9riode. Ceci est similaire \xe0 un changement [l\'\xe9quipe React a fait](http://facebook.github.io/react/blog/2016/02/19/new-versioning-scheme.html).\\n\\nSi vous utilisez Jest 0.9 ou Jest 0.10, la mise \xe0 jour devrait \xeatre transparente. Tous les changements de ces derniers mois ont \xe9t\xe9 introduits dans Jest 11.0.\\n\\n### New in Jest 11.0\\n\\n#### Int\xe9gration de Babel et configuration simplifi\xe9e\\n\\n`babel-jest` was adopted within the newly modularized Jest [repository](https://github.com/jestjs/jest/tree/main/packages) and it is now seamlessly integrated into Jest. Si vous effectuez une mise \xe0 jour depuis une ancienne version de Jest ou si vous souhaitez adopter Jest, Nous vous recommandons de lire le [guide pour commencer](/docs/getting-started).\\n\\n\x3c!--truncate--\x3e\\n\\nJest a pr\xe9c\xe9demment fourni des API telles que `jest.dontMock` qui d\xe9moque un module qui est par la suite requis en utilisant la fonction `require`. Les tests de code ressemblaient g\xe9n\xe9ralement \xe0 ceci :\\n\\n```javascript\\njest.dontMock(\'LikeButton\');\\nconst LikeButton = require(\'LikeButton\'); // LikeButton est d\xe9mocked\\n```\\n\\nCependant, avec les d\xe9clarations d\'importation ES2015, cela ne fonctionnera plus. Par la sp\xe9cification `import`s sont hiss\xe9s en haut de leur bloc de code. Code \xe9crit comme ceci :\\n\\n```javascript\\njest.dontMock(\'LikeButton\');\\nimportez le LikeButton depuis \'LikeButton\';\\n```\\n\\nlorsqu\'il est ex\xe9cut\xe9, serait en fait ex\xe9cut\xe9 dans cet ordre:\\n\\n```javascript\\nimport LikeButton depuis \'LikeButton\'; // Cela se produit avant l\'appel de dontMock.\\njest.dontMock(\'LikeButton\');\\n```\\n\\nLe module LikeButton serait donc bouch\xe9, m\xeame si nous appelons explicitement `dontMock`.\\n\\nQuand les derni\xe8res versions de Jest et babel-jest sont utilis\xe9es ensemble, appelle aux nouvelles APIs `jest. nmock`, `jest.mock`, `jest. isableAutomock` et `jest.enableAutomock` sont hiss\xe9s en haut de leur bloc, avant les instructions d\'importation ES2015.\\n\\n```javascript\\njest.dontMock(\'LikeButton\');\\nconst LikeButton = require(\'LikeButton\'); // LikeButton est d\xe9mocked!\\n```\\n\\n#### (Auto)Mocking Am\xe9liorations\\n\\nNous avons apport\xe9 de nombreuses am\xe9liorations et corrections de bugs \xe0 la fonctionnalit\xe9 d\'automocking de Jest, am\xe9lior\xe9 le support de npm3 et ajout\xe9 de nouvelles API manuelles. De nombreuses personnes ont exprim\xe9 un d\xe9sir d\'utiliser Jest avec la fonction d\'automatisation d\xe9sactiv\xe9e. Une option de configuration globale [`automock`](/docs/api#automock-boolean), qui peut \xeatre d\xe9finie \xe0 `false`, a \xe9t\xe9 ajout\xe9e.\\n\\nNous avons \xe9galement ajout\xe9 deux nouvelles API pour simplifier les bouchons manuels. `jest.mock` sp\xe9cifie une usine manuelle de bouchon pour un test sp\xe9cifique :\\n\\n```js\\n// Impl\xe9mente un bouchon pour un module hypoth\xe9tique \\"sum\\".\\njest.mock(\'sum\', () => {\\n  return (a, b) => a + b;\\n});\\n\\nconst sum = require(\'sum\');\\nsum(1, 4); // 5\\n```\\n\\nEt `jest.fn` a \xe9t\xe9 ajout\xe9 pour faciliter la cr\xe9ation de fonctions de bouchon :\\n\\n```js\\n// Create a mock function\\nconst mockFn = jest.fn(() => 42);\\nmockFn(); // 42\\nexpect(mockFn.calls.length).toBe(1);\\n```\\n\\n#### Performance\\n\\nNous avons r\xe9cemment \xe9crit sur quelques [am\xe9liorations de performance](/blog/2016/03/11/javascript-unit-testing-performance) que nous avons faites \xe0 Jest. Plus particuli\xe8rement, le temps de d\xe9marrage a \xe9t\xe9 am\xe9lior\xe9 et nous sommes maintenant dans un endroit confortable en ce qui concerne les performances.\\n\\n#### Am\xe9liorations du Jasmine et du Test Assertion\\n\\nQuand Jest a \xe9t\xe9 open source, il a \xe9t\xe9 exp\xe9di\xe9 avec Jasmine 1. Jest was designed to work with any test assertion library and optional Jasmine 2 support was added through an [external contribution](https://github.com/jestjs/jest/pull/330) at the end of last year. Ce changement apporte de meilleures performances et fournit de meilleures APIs par rapport \xe0 la version pr\xe9c\xe9dente de Jasmine. Ainsi, nous avons converti tous nos tests JavaScript sur Facebook en Jasmine 2. Avec Jest 11, nous faisons de Jasmine 2 la nouvelle valeur par d\xe9faut. Jasmine 1 peut \xeatre activ\xe9 via l\'option de configuration [`testRunner`](/docs/api#testrunner-string).\\n\\nNous avons \xe9galement fait de nombreuses mises \xe0 jour autour de Jasmine. Les messages d\'\xe9chec pour les correspondants personnalis\xe9s fournis pour les fonctions de bouchon de Jest ont \xe9t\xe9 am\xe9lior\xe9s et fonctionneront maintenant aussi pour les espions Jasmine. Les tests ignor\xe9s, lorsque vous utilisez `fit` ou `fdescribe,` sont maintenant correctement signal\xe9s \xe0 la fin d\'une ex\xe9cution de test.\\n\\n#### Autres modifications\\n\\nLa commande `jest --watch` a \xe9t\xe9 r\xe9\xe9crite et am\xe9lior\xe9e. Par d\xe9faut, il ex\xe9cute maintenant uniquement les tests li\xe9s aux fichiers modifi\xe9s. Si vous voulez ex\xe9cuter tous les tests \xe0 chaque modification, vous pouvez ex\xe9cuter `jest --watch=all`. La sortie du journal d\xe9taill\xe9 a \xe9galement \xe9t\xe9 am\xe9lior\xe9e et nous avons ajout\xe9 des avertissements et des messages d\'erreur plus utiles. Nous avons ajout\xe9 une option de configuration [`testEnvironment`](/docs/api#testenvironment-string) pour personnaliser l\'environnement de test. Par exemple, lors de la construction d\'un service de n\u0153ud, un environnement sp\xe9cial `node` au lieu de `jsdom` peut \xeatre utilis\xe9. Enfin, le site web et toute la documentation ont \xe9t\xe9 enti\xe8rement r\xe9\xe9crits.\\n\\nAll changes from the past few months can be found in the [CHANGELOG](https://github.com/jestjs/jest/blob/main/CHANGELOG.md).\\n\\n### Contributions et avenir de Jest\\n\\nAu cours des six derniers mois, Jest a re\xe7u des changements significatifs de la part d\'un grand nombre de nouveaux contributeurs. J\'aimerais remercier tous les contributeurs open source et les employ\xe9s de Facebook pour leur aide \xe0 rendre Jest meilleur pour tout le monde. Nouveaux contributeurs: Alexander Juarez, Christian Lentfort, Cristian Carlesso, Dan Abramov, Dmitrii Abramov, Evan Jacobs, James Friend, James Ide, Jeff Carpenter, Joe Lencioni, Michael Diolosa, Nik Graf, Pavel Prokopenko, Pavel Volokitin, Sebastian Mayr et ShihChi Huang.\\n\\nAvec votre soutien, nous sommes impatients de rendre Jest encore meilleur dans les mois \xe0 venir. Nous travaillons actuellement sur l\'am\xe9lioration des tests React (Native), une meilleure prise en charge de la couverture de code et planifie d\'ouvrir la source de notre ex\xe9cuteur de test interne qui permet \xe0 plusieurs projets Jest d\'\xeatre ex\xe9cut\xe9s avec une seule commande d\'ex\xe9cution."},{"id":"/2016/03/11/javascript-unit-testing-performance","metadata":{"permalink":"/fr/blog/2016/03/11/javascript-unit-testing-performance","editUrl":"https://github.com/jestjs/jest/tree/main/website/blog/2016-03-11-javascript-unit-testing-performance.md","source":"@site/i18n/fr/docusaurus-plugin-content-blog/2016-03-11-javascript-unit-testing-performance.md","title":"Performance des tests unitaires JavaScript","description":"Jest ex\xe9cute des milliers de tests sur Facebook \xe0 tout moment, soit par une int\xe9gration continue, soit par un appel manuel des ing\xe9nieurs pendant le d\xe9veloppement. Cela a bien fonctionn\xe9 pendant des ann\xe9es, m\xeame lorsque les personnes travaillant sur Jest ont \xe9t\xe9 transf\xe9r\xe9es vers d\'autres projets au sein de Facebook.","date":"2016-03-11T00:00:00.000Z","formattedDate":"11 mars 2016","tags":[],"readingTime":10.995,"hasTruncateMarker":true,"authors":[{"name":"Christoph Nakazawa","url":"http://twitter.com/cpojer"}],"frontMatter":{"title":"Performance des tests unitaires JavaScript","author":"Christoph Nakazawa","authorURL":"http://twitter.com/cpojer","authorFBID":100000023028168},"unlisted":false,"prevItem":{"title":"Jest 11.0","permalink":"/fr/blog/2016/04/12/jest-11"}},"content":"Jest ex\xe9cute des milliers de tests sur Facebook \xe0 tout moment, soit par une int\xe9gration continue, soit par un appel manuel des ing\xe9nieurs pendant le d\xe9veloppement. Cela a bien fonctionn\xe9 pendant des ann\xe9es, m\xeame lorsque les personnes travaillant sur Jest ont \xe9t\xe9 transf\xe9r\xe9es vers d\'autres projets au sein de Facebook.\\n\\nCependant, \xe0 mesure que les ing\xe9nieurs ajoutaient de plus en plus de tests, nous avons remarqu\xe9 que les performances de Jest n\'allaient pas s\'am\xe9liorer. En outre, au cours de l\'ann\xe9e derni\xe8re, l\'\xe9cosyst\xe8me JavaScript a radicalement chang\xe9 avec l\'introduction de choses comme npm3 et Babel, ce que nous n\'avions pas anticip\xe9. Nous avons form\xe9 une nouvelle \xe9quipe de Jest pour traiter tous ces probl\xe8mes et nous partagerons nos progr\xe8s et nos plans sur ce blog \xe0 partir de maintenant.\\n\\n\x3c!--truncate--\x3e\\n\\nJest est un peu diff\xe9rent de la plupart des frameworks de test. Nous l\'avons con\xe7u pour bien fonctionner dans le contexte de l\'infrastructure de Facebook\xa0:\\n\\n- **Monorepo** Sur Facebook, nous avons un \xe9norme monorepo qui contient tout notre code JavaScript. Il y a de nombreuses raisons pour lesquelles cette approche est avantageuse pour nous et il y a un [discours g\xe9nial](https://www.youtube.com/watch?v=W71BTkUbdqE) d\'un ing\xe9nieur Google qui met en \xe9vidence tous les avantages et inconv\xe9nients des monorepos.\\n- **La boxe \xe0 sable** Une autre fonctionnalit\xe9 de Jest qui est importante pour Facebook est la fa\xe7on dont elle virtualise l\'environnement de test et enveloppe `n\xe9cessite` pour ex\xe9cuter du code sandbox et isoler des tests individuels. Nous travaillons m\xeame \xe0 rendre Jest plus modulaire pour que nous puissions tirer parti de cette fonctionnalit\xe9 dans d\'autres cas d\'utilisation non li\xe9s aux tests.\\n- **providesModule** Si vous avez regard\xe9 l\'un de nos projets JavaScript open source avant, vous avez peut-\xeatre remarqu\xe9 que nous utilisons un en-t\xeate `@providesModule` pour assigner des identifiants globalement uniques aux modules. Cela n\xe9cessite des outils personnalis\xe9s, mais cela nous permet de r\xe9f\xe9rencer des modules sans chemins relatifs, ce qui nous a aid\xe9s \xe0 avancer incroyablement vite. a \xe9volu\xe9 ainsi que notre organisation d\'ing\xe9nierie a grandi et a favoris\xe9 le partage de code dans toute l\'entreprise. Consultez [RelayContainer](https://github.com/facebook/relay/blob/4eae620d86ed7fce1ee463c2fca88eb690d9cbde/src/container/RelayContainer.js#L9) pour un exemple de comment cela fonctionne en pratique. Un inconv\xe9nient \xe0 cette approche, cependant, est que nous sommes forc\xe9s de lire et d\'analyser toute notre base de code JavaScript afin de r\xe9soudre une seule requ\xeate requise. Cela serait \xe9videmment prohibitif sans mise en cache compl\xe8te, en particulier pour un processus de courte dur\xe9e comme Jest.\\n\\nEn raison de ces contraintes uniques, Jest ne pourra peut-\xeatre jamais \xeatre aussi rapide que les autres ex\xe9cuteurs de test lorsqu\'il s\'ex\xe9cute sur toute notre suite de tests. Cependant, les ing\xe9nieurs ont rarement besoin d\'ex\xe9cuter Jest sur toute notre suite de tests. Propuls\xe9 par une analyse statique dans le projet [node-haste](https://github.com/facebook/node-haste) \u2013 nous avons pu faire le mode par d\xe9faut pour ex\xe9cuter Jest sur Facebook `jest --onlyChanged`, ou `jest -o`. Dans ce mode, nous construisons un graphique de d\xe9pendance invers\xe9e pour ne trouver que les tests concern\xe9s qui doivent \xeatre ex\xe9cut\xe9s en fonction des modules qui ont \xe9t\xe9 modifi\xe9s.\\n\\n## Planification optimale d\'une ex\xe9cution de test\\n\\nLa plupart du temps, notre analyse statique d\xe9termine que plusieurs tests doivent \xeatre ex\xe9cut\xe9s. Le nombre de tests affect\xe9s peut aller de quelques tests \xe0 des milliers. Afin d\'acc\xe9l\xe9rer ce processus, Jest effectue des parall\xe9lisations de tests entre les travailleurs. C\'est g\xe9nial parce que la majeure partie du d\xe9veloppement de Facebook se produit sur des serveurs distants avec de nombreux c\u0153urs de processeur.\\n\\nR\xe9cemment, nous avons remarqu\xe9 que Jest semblait souvent coinc\xe9 _\xab En attente de 3 tests \xbb_ jusqu\'\xe0 une minute vers la fin d\'une course. Il s\'est av\xe9r\xe9 que nous avions quelques tests vraiment lents dans notre base de code qui dominaient l\'ex\xe9cution. Bien que nous ayons pu acc\xe9l\xe9rer de mani\xe8re significative ces tests individuels, nous avons \xe9galement modifi\xe9 la fa\xe7on dont Jest planifie le fonctionnement des tests. Auparavant, nous avions l\'habitude de planifier des ex\xe9cutions de tests bas\xe9es sur la travers\xe9e du syst\xe8me de fichiers, qui \xe9tait en fait assez al\xe9atoire. Voici un exemple de 11 tests en blocs gris sur deux travailleurs. La taille du bloc est le temps d\'ex\xe9cution du test :\\n\\n![perf-planification de base](/img/blog/Scheduling1.png)\\n\\nNous avons fait un m\xe9lange al\xe9atoire de tests rapides et lents, et l\'un de nos tests les plus lents a fini par fonctionner comme presque tous les autres tests ont \xe9t\xe9 termin\xe9s, au cours desquels le second worker a \xe9t\xe9 inactif.\\n\\nNous avons modifi\xe9 la planification des tests en fonction de leur taille de fichier, ce qui est g\xe9n\xe9ralement un bon proxy pour la dur\xe9e \xe0 laquelle un test va prendre. Un test avec quelques milliers de lignes de code prend probablement plus de temps qu\'un test avec 15 lignes de code. Tandis que cette vitesse acc\xe9l\xe8re le test entier d\'environ 10%, nous avons fini par trouver une meilleure heuristique : maintenant Jest stocke l\'ex\xe9cution de chaque test dans une cache et lors des ex\xe9cutions suivantes, il planifie les tests les plus lents \xe0 ex\xe9cuter en premier. Dans l\'ensemble, cela a contribu\xe9 \xe0 am\xe9liorer le temps d\'ex\xe9cution de tous les tests d\'environ 20%.\\n\\nVoici un exemple du m\xeame test avec une meilleure planification :\\n\\n![planifications am\xe9lior\xe9es par tranche](/img/blog/Scheduling2.png)\\n\\nParce que nous lan\xe7ons d\'abord des tests lents, Jest peut parfois prendre beaucoup de temps pour d\xe9marrer \u2013 nous n\u2019imprimons les r\xe9sultats qu\u2019une fois le premier test termin\xe9. Pour l\'avenir, nous pr\xe9voyons d\'abord d\'ex\xe9cuter les tests qui ont \xe9chou\xe9 pr\xe9c\xe9demment, parce que l\'obtention de cette information aux d\xe9veloppeurs le plus rapidement possible importe le plus.\\n\\n## Inline Requires and Lazy Mocking\\n\\nSi vous avez d\xe9j\xe0 \xe9crit des tests avec Jasmine, ils ressemblent probablement \xe0 ceci :\\n\\n```js\\nconst sum = require(\'sum\');\\ndescribe(\'sum\', () => {\\n  it(\'works\', () => {\\n    expect(sum(5, 4)).toBe(9);\\n  });\\n});\\n```\\n\\nUne chose sp\xe9ciale que nous faisons dans Jest est de r\xe9initialiser la totalit\xe9 du registre des modules apr\xe8s chaque test (appelez \xe0 `il`) pour vous assurer que les tests ne d\xe9pendent pas les uns des autres. Avant Jest, les tests individuels d\xe9pendaient les uns des autres et l\'\xe9tat interne des modules se divulguait souvent entre eux. Au fur et \xe0 mesure que les ing\xe9nieurs ont enlev\xe9, r\xe9ordonn\xe9 ou refa\xe7onn\xe9 les tests, certains ont commenc\xe9 \xe0 \xe9chouer, ce qui rend difficile pour les gens de comprendre ce qui se passait.\\n\\nChaque test de Jest re\xe7oit une nouvelle copie de tous les modules, y compris les nouvelles versions de toutes les d\xe9pendances fictives qui prennent beaucoup de temps \xe0 g\xe9n\xe9rer pour chaque test. Un effet secondaire de ceci est que nous avons d\xfb appeler `require` manuellement avant chaque test, comme ceci :\\n\\n```js\\nlet sum;\\ndescribe(\'sum\', () => {\\n  beforeEach(() => {\\n    sum = require(\'sum\');\\n  });\\n  it(\'works\', () => {\\n    expect(sum(5, 4)).toBe(9);\\n  });\\n  it(\'works too\', () => {\\n    // This copy of sum is not the same as in the previous call to `it`.\\n    expect(sum(2, 3)).toBe(5);\\n  });\\n});\\n```\\n\\nNous avons construit une transformation babel appel\xe9e [inline-requires](https://github.com/facebook/fbjs/blob/main/packages/babel-preset-fbjs/plugins/inline-requires.js) qui supprime les instructions de haut niveau et les ins\xe8re dans le code. Par exemple, la ligne `const sum = require(\'sum\');` sera retir\xe9 du code, mais chaque utilisation de la somme `` dans le fichier sera remplac\xe9e par `require(\'sum\')`. Avec cette transformation, nous pouvons \xe9crire des tests comme vous vous y attendiez dans Jasmine et le code se transforme en ceci :\\n\\n```js\\ndescribe(\'sum\', () => {\\n  it(\'works\', () => {\\n    expect(require(\'sum\')(5, 4)).toBe(9);\\n  });\\n});\\n```\\n\\nUn grand effet secondaire de la ligne exige que nous n\'ayons besoin que des modules que nous utilisons r\xe9ellement dans le test lui-m\xeame, au lieu de tous les modules que nous avons utilis\xe9s dans le fichier entier.\\n\\nCe qui m\xe8ne \xe0 une autre optimisation : le bouchon paresseux. L\'id\xe9e est de bouchonner uniquement les modules \xe0 la demande, qui est combin\xe9 avec inline nous sauve de bouchonner beaucoup de modules et toutes leurs d\xe9pendances r\xe9cursives.\\n\\nNous avons pu mettre \xe0 jour tous les tests en utilisant un [codemod](https://github.com/cpojer/js-codemod/blob/master/transforms/outline-require.js) en un rien de temps - c\'\xe9tait un _simple_ 50, 00 changement de code de ligne. Inline n\xe9cessite et paresseux mocking a am\xe9lior\xe9 le temps de test de 50%.\\n\\nLe plugin babel inline-require est non seulement utile pour Jest mais aussi pour JavaScript normal. Il a \xe9t\xe9 exp\xe9di\xe9 par [Bhuwan](https://twitter.com/voideanvalue) \xe0 tous les utilisateurs de [facebook.com](http://facebook.com/) il y a juste une semaine et a consid\xe9rablement am\xe9lior\xe9 le temps de d\xe9marrage.\\n\\nPour l\'instant, si vous souhaitez utiliser cette transformation dans Jest, vous devrez l\'ajouter manuellement \xe0 votre configuration Babel. Nous travaillons sur des moyens de faciliter la mise en \u0153uvre de cette option.\\n\\n## Repo-Sync et mise en cache\\n\\nLa version open source de Jest \xe9tait un fork de notre version interne, et nous synchroniserions Jest une fois tous les deux mois. Ce fut un processus manuel douloureux qui n\xe9cessitait de corriger de nombreux tests \xe0 chaque fois. Nous avons r\xe9cemment mis \xe0 jour Jest et apport\xe9 la parit\xe9 \xe0 toutes les plateformes (iOS, Android et web) et avons ensuite activ\xe9 notre processus de synchronisation. Maintenant, chaque changement de Jest en open source est ex\xe9cut\xe9 contre tous nos tests internes, et il n\'y a qu\'une seule version de Jest qui soit coh\xe9rente partout.\\n\\nLa premi\xe8re fonctionnalit\xe9 dont nous avons pu profiter apr\xe8s le d\xe9blocage \xe9tait le cache du pr\xe9processeur. Si vous utilisez Babel avec Jest, Jest doit pr\xe9traiter chaque fichier JavaScript avant de pouvoir l\'ex\xe9cuter. Nous avons construit un calque de mise en cache de sorte que chaque fichier, lorsqu\'il n\'est pas modifi\xe9, ne doit \xeatre transform\xe9 qu\'une seule fois. Apr\xe8s avoir lib\xe9r\xe9 Jest, nous avons pu facilement r\xe9parer l\'impl\xe9mentation de l\'open source et l\'exp\xe9dier sur Facebook. Cela a entra\xeen\xe9 une autre victoire de 50% sur la performance. Parce que la cache ne fonctionne que sur la seconde ex\xe9cution, l\'heure de d\xe9but froide de Jest n\'a pas \xe9t\xe9 affect\xe9e.\\n\\nNous avons \xe9galement r\xe9alis\xe9 que nous faisions beaucoup d\u2019op\xe9rations de trajectoire lorsque nous r\xe9solvons des besoins relatifs. Parce que le registre des modules est r\xe9initialis\xe9 pour chaque test, il y a eu des milliers d\'appels qui pourraient \xeatre m\xe9mois\xe9s. Une grande optimisation a \xe9t\xe9 d\'ajouter beaucoup plus de mise en cache, pas seulement autour d\'un seul test, mais aussi \xe0 travers les fichiers de test. Auparavant, nous g\xe9n\xe9rerions des m\xe9tadonn\xe9es de module pour la fonction d\'automocking une fois pour chaque fichier de test. L\'objet qu\'un module exporte ne change jamais, donc nous partageons maintenant ce code entre les fichiers de test. Malheureusement, comme JavaScript et Node.js n\'ont pas de m\xe9moire partag\xe9e, nous devons faire tout ce travail au moins une fois par processus de travail.\\n\\n## Tout remettre en question\\n\\nLorsque vous essayez d\'am\xe9liorer les performances, il est important de plonger aussi dans les syst\xe8mes qui s\'installent au-dessus et en dessous de votre syst\xe8me. Dans le cas de Jest, des choses comme Node.js et les fichiers de test eux-m\xeames, par exemple. L\'une des premi\xe8res choses que nous avons faites \xe9tait de mettre \xe0 jour Node.js \xe0 Facebook \xe0 partir des ann\xe9es 0,10 \xe0 iojs et ensuite \xe0 Node 4. La nouvelle version de V8 a contribu\xe9 \xe0 am\xe9liorer les performances et a \xe9t\xe9 assez facile \xe0 mettre \xe0 jour.\\n\\nNous avons remarqu\xe9 que le module `path` dans Node. s est lent lors de la cr\xe9ation de milliers d\'op\xe9rations de chemin qui ont \xe9t\xe9 [corrig\xe9es dans Node 5.7](https://github.com/nodejs/node/pull/5123). Jusqu\'\xe0 ce que nous supprimions le support de Node 4 en interne sur Facebook, nous exp\xe9dierons notre propre version du module [fastpath](https://github.com/facebook/node-haste/blob/master/src/fastpath.js).\\n\\nNous avons ensuite commenc\xe9 \xe0 interroger le [node-haste](https://github.com/facebook/node-haste) obsol\xe8te. Comme mentionn\xe9 pr\xe9c\xe9demment, le projet entier doit \xeatre analys\xe9 pour les en-t\xeates de `@providesModule` pour construire un graphique de d\xe9pendances. Quand ce syst\xe8me a \xe9t\xe9 construit \xe0 l\'origine, `node_modules` n\'existait pas et notre explorateur de syst\xe8me de fichiers ne les excluait pas correctement.\\n\\nDans les versions pr\xe9c\xe9dentes, Jest lisait en fait tous les fichiers dans `node_modules` \u2013 ce qui a contribu\xe9 au lente temps de d\xe9marrage de Jest. Lorsque nous avons repris Jest, nous avons remplac\xe9 l\'ensemble du projet par une nouvelle impl\xe9mentation, bas\xe9e sur l\'empaquetage de react-native. Le temps de d\xe9marrage de Jest est maintenant inf\xe9rieur \xe0 une seconde, m\xeame sur les grands projets. L\'\xe9quipe react-native [David](https://twitter.com/void_0), [Amjad](https://twitter.com/amasad) et [Martin](https://twitter.com/martinbigio) ont fait un travail remarquable sur ce projet.\\n\\n## Tout additionner\\n\\nUn grand nombre des changements ci-dessus ont am\xe9lior\xe9 le temps d\'ex\xe9cution du test de 10% ou parfois m\xeame de 50%. Nous avons commenc\xe9 \xe0 une dur\xe9e d\'ex\xe9cution d\'environ 10 minutes pour tous les tests, et sans ces am\xe9liorations, nous serions probablement \xe0 environ 20 minutes. Apr\xe8s ces am\xe9liorations, cependant, il faut maintenant toujours environ 1 minute et 35 secondes pour ex\xe9cuter tous nos tests !\\n\\nPlus important encore, l\'ajout de nouveaux tests entra\xeene une croissance tr\xe8s lente du temps d\'ex\xe9cution total. Les ing\xe9nieurs peuvent \xe9crire et ex\xe9cuter plus de tests sans en ressentir les co\xfbts.\\n\\nWith Jest\'s recent 0.9 release and performance improvements from the [node-haste2 integration](https://github.com/jestjs/jest/pull/599), the runtime of the [Relay](https://github.com/facebook/relay) framework\'s test suite went down from 60 seconds to about 25 and the [react-native](https://github.com/facebook/react-native) test suite now finishes in less than ten seconds on a 13\u201d MacBook Pro.\\n\\nNous sommes tr\xe8s heureux des victoires que nous avons vues jusqu\'\xe0 pr\xe9sent, et nous allons continuer \xe0 travailler sur Jest et \xe0 le rendre meilleur. Si vous \xeates curieux de contribuer \xe0 Jest, n\'h\xe9sitez pas \xe0 nous contacter sur GitHub, [Discord](https://discord.gg/j6FKKQQrW9) ou Facebook :)"}]}')}}]);