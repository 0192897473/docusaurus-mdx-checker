"use strict";(self.webpackChunkjest_website=self.webpackChunkjest_website||[]).push([[8961],{6620:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>d,frontMatter:()=>t,metadata:()=>r,toc:()=>c});var s=o(4246),l=o(1670);const t={id:"es6-class-mocks",title:"Simulations de classe ES6"},a=void 0,r={unversionedId:"es6-class-mocks",id:"version-29.4/es6-class-mocks",title:"Simulations de classe ES6",description:"Jest peut \xeatre utilis\xe9 pour simuler les classes ES6 qui sont import\xe9es dans les fichiers que vous voulez tester.",source:"@site/i18n/fr/docusaurus-plugin-content-docs/version-29.4/Es6ClassMocks.md",sourceDirName:".",slug:"/es6-class-mocks",permalink:"/fr/docs/29.4/es6-class-mocks",draft:!1,unlisted:!1,editUrl:"https://crowdin.com/project/jest-v2/fr",tags:[],version:"29.4",frontMatter:{id:"es6-class-mocks",title:"Simulations de classe ES6"},sidebar:"docs",previous:{title:"Simulations manuelles",permalink:"/fr/docs/29.4/manual-mocks"},next:{title:"Contournement des modules simul\xe9s",permalink:"/fr/docs/29.4/bypassing-module-mocks"}},i={},c=[{value:"Un exemple de classe ES6",id:"un-exemple-de-classe-es6",level:2},{value:"Les 4 fa\xe7ons de cr\xe9er une simulation de classe ES6",id:"les-4-fa\xe7ons-de-cr\xe9er-une-simulation-de-classe-es6",level:2},{value:"Simulation automatique",id:"simulation-automatique",level:3},{value:"Simulation manuelle",id:"simulation-manuelle",level:3},{value:"Appel de <code>jest.mock()</code> avec le param\xe8tre factory du module",id:"appel-de-jestmock-avec-le-param\xe8tre-factory-du-module",level:3},{value:"Remplacer la simulation en utilisant <code>mockImplementation()</code> ou <code>mockImplementationOnce()</code>",id:"remplacer-la-simulation-en-utilisant-mockimplementation-ou-mockimplementationonce",level:3},{value:"En d\xe9tail : comprendre les fonctions de constructeur simul\xe9es",id:"en-d\xe9tail--comprendre-les-fonctions-de-constructeur-simul\xe9es",level:2},{value:"Simulation manuelle qui est une autre classe ES6",id:"simulation-manuelle-qui-est-une-autre-classe-es6",level:3},{value:"Simuler en utilisant le param\xe8tre factory du module",id:"simuler-en-utilisant-le-param\xe8tre-factory-du-module",level:3},{value:"* La fonction factory du module doit retourner une fonction",id:"-la-fonction-factory-du-module-doit-retourner-une-fonction",level:4},{value:"Simulation d&#39;une m\xe9thode sp\xe9cifique d&#39;une classe",id:"simulation-dune-m\xe9thode-sp\xe9cifique-dune-classe",level:2},{value:"M\xe9thodes statiques, getter et setter",id:"m\xe9thodes-statiques-getter-et-setter",level:3},{value:"Suivre l&#39;utilisation (espionner la simulation)",id:"suivre-lutilisation-espionner-la-simulation",level:2},{value:"Espionnage du constructeur",id:"espionnage-du-constructeur",level:3},{value:"Simulation de classe non export\xe9e par d\xe9faut",id:"simulation-de-classe-non-export\xe9e-par-d\xe9faut",level:3},{value:"Espionnage sur les m\xe9thodes de notre classe",id:"espionnage-sur-les-m\xe9thodes-de-notre-classe",level:3},{value:"Nettoyage entre les tests",id:"nettoyage-entre-les-tests",level:3},{value:"Exemple complet",id:"exemple-complet",level:2}];function u(e){const n=Object.assign({p:"p",a:"a",h2:"h2",code:"code",pre:"pre",h3:"h3",admonition:"admonition",em:"em",strong:"strong",h4:"h4"},(0,l.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Jest peut \xeatre utilis\xe9 pour simuler les classes ES6 qui sont import\xe9es dans les fichiers que vous voulez tester."}),"\n",(0,s.jsxs)(n.p,{children:["Les classes ES6 sont des fonctions constructrices avec du sucre syntaxique. Par cons\xe9quent, toute simulation d'une classe ES6 doit \xeatre une fonction ou une classe ES6 r\xe9elle (qui est, elle aussi, une autre fonction). Vous pouvez donc les simuler en utilisant ",(0,s.jsx)(n.a,{href:"/fr/docs/29.4/mock-functions",children:"des fonctions simul\xe9es"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"un-exemple-de-classe-es6",children:"Un exemple de classe ES6"}),"\n",(0,s.jsxs)(n.p,{children:["Nous utiliserons un exemple factice d'une classe qui lit des fichiers sonores, ",(0,s.jsx)(n.code,{children:"SoundPlayer"}),", et une classe de consommatrice qui utilise cette classe, ",(0,s.jsx)(n.code,{children:"SoundPlayerConsumer"}),". Nous allons simuler ",(0,s.jsx)(n.code,{children:"SoundPlayer"})," dans nos tests pour ",(0,s.jsx)(n.code,{children:"SoundPlayerConsumer"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",metastring:'title="sound-player.js"',children:"export default class SoundPlayer {\n  constructor() {\n    this.foo = 'bar';\n  }\n\n  playSoundFile(fileName) {\n    console.log('Lecture du fichier audio ' + fileName);\n  }\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",metastring:'title="sound-player-consumer.js"',children:"import SoundPlayer from './sound-player';\n\nexport default class SoundPlayerConsumer {\n  constructor() {\n    this.soundPlayer = new SoundPlayer();\n  }\n\n  playSomethingCool() {\n    const coolSoundFileName = 'song.mp3';\n    this.soundPlayer.playSoundFile(coolSoundFileName);\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"les-4-fa\xe7ons-de-cr\xe9er-une-simulation-de-classe-es6",children:"Les 4 fa\xe7ons de cr\xe9er une simulation de classe ES6"}),"\n",(0,s.jsx)(n.h3,{id:"simulation-automatique",children:"Simulation automatique"}),"\n",(0,s.jsxs)(n.p,{children:["L'appel \xe0 ",(0,s.jsx)(n.code,{children:"jest.mock('./sound-player')"})," renvoie une \xab\xa0simulation automatique\xa0\xbb utile que vous pouvez utiliser pour espionner les appels au constructeur de la classe et \xe0 toutes ses m\xe9thodes. Elle remplace la classe ES6 par un constructeur simul\xe9, et remplace toutes ses m\xe9thodes par ",(0,s.jsx)(n.a,{href:"/fr/docs/29.4/mock-functions",children:"des fonctions simul\xe9es"})," qui renvoient toujours ",(0,s.jsx)(n.code,{children:"undefined"}),". Les appels de m\xe9thode sont enregistr\xe9s dans ",(0,s.jsx)(n.code,{children:"theAutomaticMock.mock.instances[index].methodName.mock.calls"}),"."]}),"\n",(0,s.jsx)(n.admonition,{title:"remarque",type:"note",children:(0,s.jsxs)(n.p,{children:["If you use arrow functions in your classes, they will ",(0,s.jsx)(n.em,{children:"not"})," be part of the mock. La raison, c'est que les fonctions fl\xe9ch\xe9es ne sont pas pr\xe9sentes sur le prototype de l'objet, ce sont simplement des propri\xe9t\xe9s contenant une r\xe9f\xe9rence \xe0 une fonction."]})}),"\n",(0,s.jsx)(n.p,{children:"Si vous n'avez pas besoin de remplacer l'impl\xe9mentation de la classe, c'est l'option la plus simple \xe0 mettre en place. Par exemple\xa0:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import SoundPlayer from './sound-player';\nimport SoundPlayerConsumer from './sound-player-consumer';\njest.mock('./sound-player'); // SoundPlayer is now a mock constructor\n\nbeforeEach(() => {\n  // Clear all instances and calls to constructor and all methods:\n  SoundPlayer.mockClear();\n});\n\nit('We can check if the consumer called the class constructor', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  expect(SoundPlayer).toHaveBeenCalledTimes(1);\n});\n\nit('We can check if the consumer called a method on the class instance', () => {\n  // Show that mockClear() is working:\n  expect(SoundPlayer).not.toHaveBeenCalled();\n\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  // Constructor should have been called again:\n  expect(SoundPlayer).toHaveBeenCalledTimes(1);\n\n  const coolSoundFileName = 'song.mp3';\n  soundPlayerConsumer.playSomethingCool();\n\n  // mock.instances is available with automatic mocks:\n  const mockSoundPlayerInstance = SoundPlayer.mock.instances[0];\n  const mockPlaySoundFile = mockSoundPlayerInstance.playSoundFile;\n  expect(mockPlaySoundFile.mock.calls[0][0]).toBe(coolSoundFileName);\n  // Equivalent to above check:\n  expect(mockPlaySoundFile).toHaveBeenCalledWith(coolSoundFileName);\n  expect(mockPlaySoundFile).toHaveBeenCalledTimes(1);\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"simulation-manuelle",children:"Simulation manuelle"}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez une ",(0,s.jsx)(n.a,{href:"/fr/docs/29.4/manual-mocks",children:"simulation manuelle"})," en sauvegardant une impl\xe9mentation de simulation dans le dossier ",(0,s.jsx)(n.code,{children:"__mocks__"}),". Cela vous permet de sp\xe9cifier l'impl\xe9mentation, et cela peut \xeatre utilis\xe9 dans plusieurs fichiers de test."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",metastring:'title="__mocks__/sound-player.js"',children:"// Importe cet export nomm\xe9 dans votre fichier de test\xa0:\nexport const mockPlaySoundFile = jest.fn();\nconst mock = jest.fn().mockImplementation(() => {\n  return {playSoundFile: mockPlaySoundFile};\n});\n\nexport default mock;\n"})}),"\n",(0,s.jsx)(n.p,{children:"Importez la simulation et la m\xe9thode simul\xe9e partag\xe9e par toutes les instances :"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",metastring:'title="sound-player-consumer.test.js"',children:"import SoundPlayer, {mockPlaySoundFile} from './sound-player';\nimport SoundPlayerConsumer from './sound-player-consumer';\njest.mock('./sound-player'); // SoundPlayer est maintenant un constructeur simul\xe9\n\nbeforeEach(() => {\n  // Efface toutes les instances et les appels au constructeur et \xe0 toutes les m\xe9thodes :\n  SoundPlayer.mockClear();\n  mockPlaySoundFile.mockClear();\n});\n\nit('Nous pouvons v\xe9rifier si le consommateur a appel\xe9 le constructeur de la classe', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  expect(SoundPlayer).toHaveBeenCalledTimes(1);\n});\n\nit('Nous pouvons v\xe9rifier si le consommateur a appel\xe9 une m\xe9thode sur l'instance de la classe', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  const coolSoundFileName = 'song.mp3';\n  soundPlayerConsumer.playSomethingCool();\n  expect(mockPlaySoundFile).toHaveBeenCalledWith(coolSoundFileName);\n});\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"appel-de-jestmock-avec-le-param\xe8tre-factory-du-module",children:["Appel de ",(0,s.jsx)(n.a,{href:"/fr/docs/29.4/jest-object#jestmockmodulename-factory-options",children:(0,s.jsx)(n.code,{children:"jest.mock()"})})," avec le param\xe8tre factory du module"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"jest.mock(path, moduleFactory)"})," prend un argument ",(0,s.jsx)(n.strong,{children:"factory de module"}),". Un factory de module est une fonction qui renvoie la simulation."]}),"\n",(0,s.jsx)(n.p,{children:"Pour pouvoir simuler une fonction de constructeur, la factory de module doit retourner une fonction de constructeur. En d'autres termes, le factory de module doit \xeatre une fonction qui renvoie une fonction - une fonction d'ordre sup\xe9rieur (\xab\xa0higher-order function\xa0\xbb HOF)."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import SoundPlayer from './sound-player';\nconst mockPlaySoundFile = jest.fn();\njest.mock('./sound-player', () => {\n  return jest.fn().mockImplementation(() => {\n    return {playSoundFile: mockPlaySoundFile};\n  });\n});\n"})}),"\n",(0,s.jsx)(n.admonition,{title:"attention",type:"caution",children:(0,s.jsxs)(n.p,{children:["Comme les appels \xe0 ",(0,s.jsx)(n.code,{children:"jest.mock()"})," sont remont\xe9s au sommet du fichier, Jest emp\xeache l'acc\xe8s aux variables hors de port\xe9e. Par d\xe9faut, vous ne pouvez pas d'abord d\xe9finir une variable et ensuite l'utiliser dans la factory. Jest d\xe9sactivera cette v\xe9rification pour les variables qui commencent par le mot ",(0,s.jsx)(n.code,{children:"mock"}),". Cependant, c'est \xe0 vous de garantir qu'elles seront initialis\xe9es \xe0 temps\xa0. Attention \xe0 la ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal_dead_zone_tdz",children:"zone morte temporaire"}),"."]})}),"\n",(0,s.jsxs)(n.p,{children:["Par exemple, l'exemple suivant d\xe9clenchera une erreur hors du champ d'application en raison de l'utilisation de ",(0,s.jsx)(n.code,{children:"fake"})," au lieu de ",(0,s.jsx)(n.code,{children:"mock"})," dans la d\xe9claration de la variable\xa0."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Remarque\xa0: ceci \xe9chouera\nimport SoundPlayer from './sound-player';\nconst fakePlaySoundFile = jest.fn();\njest.mock('./sound-player', () => {\n  return jest.fn().mockImplementation(() => {\n    return {playSoundFile: fakePlaySoundFile};\n  });\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Ce qui suit lancera une ",(0,s.jsx)(n.code,{children:"ReferenceError"})," malgr\xe9 l'utilisation de ",(0,s.jsx)(n.code,{children:"mock"})," dans la d\xe9claration de la variable, car le ",(0,s.jsx)(n.code,{children:"mockSoundPlayer"})," n'est pas envelopp\xe9 dans une fonction fl\xe9ch\xe9e et elle est donc acc\xe9d\xe9e avant l'initialisation apr\xe8s le hissage."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import SoundPlayer from './sound-player';\nconst mockSoundPlayer = jest.fn().mockImplementation(() => {\n  return {playSoundFile: mockPlaySoundFile};\n});\n// donne lieu \xe0 une ReferenceError\njest.mock('./sound-player', () => {\n  return mockSoundPlayer;\n});\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"remplacer-la-simulation-en-utilisant-mockimplementation-ou-mockimplementationonce",children:["Remplacer la simulation en utilisant ",(0,s.jsx)(n.a,{href:"/fr/docs/29.4/mock-function-api#mockfnmockimplementationfn",children:(0,s.jsx)(n.code,{children:"mockImplementation()"})})," ou ",(0,s.jsx)(n.a,{href:"/fr/docs/29.4/mock-function-api#mockfnmockimplementationoncefn",children:(0,s.jsx)(n.code,{children:"mockImplementationOnce()"})})]}),"\n",(0,s.jsxs)(n.p,{children:["Vous pouvez remplacer tous les simulations ci-dessus afin de modifier l'impl\xe9mentation, pour un seul test ou tous les tests, en appelant ",(0,s.jsx)(n.code,{children:"mockImplementation()"})," sur la simulation existante."]}),"\n",(0,s.jsxs)(n.p,{children:["Les appels \xe0 jest.mock sont remont\xe9s au sommet du code. Vous pouvez sp\xe9cifier une simulation ult\xe9rieurement, par exemple dans ",(0,s.jsx)(n.code,{children:"beforeAll()"}),", en appelant ",(0,s.jsx)(n.code,{children:"mockImplementation()"})," (ou ",(0,s.jsx)(n.code,{children:"mockImplementationOnce()"}),") sur la simulation existante au lieu d'utiliser le param\xe8tre factory. Cela vous permet \xe9galement de modifier la simulation entre les tests, si n\xe9cessaire\xa0:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import SoundPlayer from './sound-player';\nimport SoundPlayerConsumer from './sound-player-consumer';\n\njest.mock('./sound-player');\n\ndescribe('Quand SoundPlayer l\xe8ve une erreur', () => {\n  beforeAll(() => {\n    SoundPlayer.mockImplementation(() => {\n      return {\n        playSoundFile: () => {\n          throw new Error('Erreur de test');\n        },\n      };\n    });\n  });\n\n  it('Il devrait y avoir une erreur lors de l\\'appel de playSomethingCool', () => {\n    const soundPlayerConsumer = new SoundPlayerConsumer();\n    expect(() => soundPlayerConsumer.playSomethingCool()).toThrow();\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"en-d\xe9tail--comprendre-les-fonctions-de-constructeur-simul\xe9es",children:"En d\xe9tail : comprendre les fonctions de constructeur simul\xe9es"}),"\n",(0,s.jsxs)(n.p,{children:["La construction de votre fonction constructeur simul\xe9e en utilisant ",(0,s.jsx)(n.code,{children:"jest.fn().mockImplementation()"})," fait croire que les simulations sont plus compliqu\xe9es qu'elles ne le sont r\xe9ellement. Cette section montre comment vous pouvez cr\xe9er vos propres simulations pour illustrer le fonctionnement de la simulation."]}),"\n",(0,s.jsx)(n.h3,{id:"simulation-manuelle-qui-est-une-autre-classe-es6",children:"Simulation manuelle qui est une autre classe ES6"}),"\n",(0,s.jsxs)(n.p,{children:["Si vous d\xe9finissez une classe ES6 utilisant le m\xeame nom de fichier que la classe simul\xe9e dans le dossier ",(0,s.jsx)(n.code,{children:"__mocks__"}),", elle servira de simulation. Cette classe sera utilis\xe9e \xe0 la place de la classe r\xe9elle. Cela vous permet d'injecter une impl\xe9mentation de test pour la classe, mais ne fournit pas un moyen d'espionner les appels."]}),"\n",(0,s.jsx)(n.p,{children:"Pour l'exemple invent\xe9, la simulation pourrait ressembler \xe0 ceci\xa0:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",metastring:'title="__mocks__/sound-player.js"',children:"export default class SoundPlayer {\n  constructor() {\n    console.log('Mock SoundPlayer : le constructeur a \xe9t\xe9 appel\xe9');\n  }\n\n  playSoundFile() {\n    console.log('Mock SoundPlayer : playSoundFile a \xe9t\xe9 appel\xe9');\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"simuler-en-utilisant-le-param\xe8tre-factory-du-module",children:"Simuler en utilisant le param\xe8tre factory du module"}),"\n",(0,s.jsxs)(n.p,{children:["La fonction factory de modules pass\xe9e \xe0 ",(0,s.jsx)(n.code,{children:"jest.mock(path, moduleFactory)"})," peut \xeatre un HOF qui renvoie une fonction*. Cela permettra d'appeler ",(0,s.jsx)(n.code,{children:"new"})," sur la simulation. Encore une fois, cela vous permet d'injecter un comportement diff\xe9rent pour les tests, mais ne fournit pas un moyen d'espionner les appels."]}),"\n",(0,s.jsx)(n.h4,{id:"-la-fonction-factory-du-module-doit-retourner-une-fonction",children:"* La fonction factory du module doit retourner une fonction"}),"\n",(0,s.jsx)(n.p,{children:"Pour pouvoir simuler une fonction de constructeur, la factory de module doit retourner une fonction de constructeur. En d'autres termes, le factory de module doit \xeatre une fonction qui renvoie une fonction - une fonction d'ordre sup\xe9rieur (\xab\xa0higher-order function\xa0\xbb HOF)."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"jest.mock('./sound-player', () => {\n  return function () {\n    return {playSoundFile: () => {}};\n  };\n});\n"})}),"\n",(0,s.jsxs)(n.admonition,{title:"remarque",type:"note",children:[(0,s.jsxs)(n.p,{children:["The mock can't be an arrow function because calling ",(0,s.jsx)(n.code,{children:"new"})," on an arrow function is not allowed in JavaScript. Donc \xe7a ne marchera pas\xa0:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"jest.mock('./sound-player', () => {\n  return () => {\n    // Ne fonctionne pas; les fonctions fl\xe9ch\xe9es ne peuvent pas \xeatre appel\xe9es avec new\n    return {playSoundFile: () => {}};\n  };\n});\n"})}),(0,s.jsxs)(n.p,{children:["Cela l\xe8vera ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.em,{children:"TypeError: _soundPlayer2.default is not a constructor"})}),", sauf si le code est transpos\xe9 en ES5, par exemple par ",(0,s.jsx)(n.code,{children:"@babel/preset-env"}),". (ES5 n'a pas de fonctions fl\xe9ch\xe9es ni de classes, donc les deux seront transpiil\xe9es en fonctions simples.)"]})]}),"\n",(0,s.jsx)(n.h2,{id:"simulation-dune-m\xe9thode-sp\xe9cifique-dune-classe",children:"Simulation d'une m\xe9thode sp\xe9cifique d'une classe"}),"\n",(0,s.jsxs)(n.p,{children:["Lets say that you want to mock or spy on the method ",(0,s.jsx)(n.code,{children:"playSoundFile"})," within the class ",(0,s.jsx)(n.code,{children:"SoundPlayer"}),". Un exemple simple\xa0:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// votre fichier jest ci-dessous\nimport SoundPlayer from './sound-player';\nimport SoundPlayerConsumer from './sound-player-consumer';\n\nconst playSoundFileMock = jest\n  .spyOn(SoundPlayer.prototype, 'playSoundFile')\n  .mockImplementation(() => {\n    console.log('fonction simul\xe9e');\n  }); // commentez cette ligne si vous voulez juste \xab\xa0espionner\xa0\xbb.\n\nit('le lecteur joue de la musique', () => {\n  const player = new SoundPlayerConsumer();\n  player.playSomethingCool();\n  expect(playSoundFileMock).toHaveBeenCalled();\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"m\xe9thodes-statiques-getter-et-setter",children:"M\xe9thodes statiques, getter et setter"}),"\n",(0,s.jsxs)(n.p,{children:["Imaginons que notre classe ",(0,s.jsx)(n.code,{children:"SoundPlayer"})," a une m\xe9thode getter ",(0,s.jsx)(n.code,{children:"foo"})," et une m\xe9thode statique ",(0,s.jsx)(n.code,{children:"brand"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"export default class SoundPlayer {\n  constructor() {\n    this.foo = 'bar';\n  }\n\n  playSoundFile(fileName) {\n    console.log('Lecture du fichier audio ' + fileName);\n  }\n\n  get foo() {\n    return 'bar';\n  }\n  static brand() {\n    return 'player-brand';\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can mock/spy on them easily, here is an example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// your jest test file below\nimport SoundPlayer from './sound-player';\n\nconst staticMethodMock = jest\n  .spyOn(SoundPlayer, 'brand')\n  .mockImplementation(() => 'some-mocked-brand');\n\nconst getterMethodMock = jest\n  .spyOn(SoundPlayer.prototype, 'foo', 'get')\n  .mockImplementation(() => 'some-mocked-result');\n\nit('custom methods are called', () => {\n  const player = new SoundPlayer();\n  const foo = player.foo;\n  const brand = SoundPlayer.brand();\n\n  expect(staticMethodMock).toHaveBeenCalled();\n  expect(getterMethodMock).toHaveBeenCalled();\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"suivre-lutilisation-espionner-la-simulation",children:"Suivre l'utilisation (espionner la simulation)"}),"\n",(0,s.jsx)(n.p,{children:"L'injection d'une impl\xe9mentation de test est utile, mais vous voudrez probablement aussi tester si le constructeur et les m\xe9thodes de la classe sont appel\xe9s avec les bons param\xe8tres."}),"\n",(0,s.jsx)(n.h3,{id:"espionnage-du-constructeur",children:"Espionnage du constructeur"}),"\n",(0,s.jsxs)(n.p,{children:["Afin de suivre les appels au constructeur, remplacez la fonction retourn\xe9e par le HOF par une fonction simul\xe9e Jest. Cr\xe9ez-la avec ",(0,s.jsx)(n.a,{href:"/fr/docs/29.4/jest-object#jestfnimplementation",children:(0,s.jsx)(n.code,{children:"jest.fn()"})}),", puis sp\xe9cifiez son impl\xe9mentation avec ",(0,s.jsx)(n.code,{children:"mockImplementation()"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import SoundPlayer from './sound-player';\njest.mock('./sound-player', () => {\n  // Fonctionne et vous permet de v\xe9rifier les appels du constructeur\xa0:\n  return jest.fn().mockImplementation(() => {\n    return {playSoundFile: () => {}};\n  });\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This will let us inspect usage of our mocked class, using ",(0,s.jsx)(n.code,{children:"SoundPlayer.mock.calls"}),": ",(0,s.jsx)(n.code,{children:"expect(SoundPlayer).toHaveBeenCalled();"})," or near-equivalent: ",(0,s.jsx)(n.code,{children:"expect(SoundPlayer.mock.calls.length).toBeGreaterThan(0);"})]}),"\n",(0,s.jsx)(n.h3,{id:"simulation-de-classe-non-export\xe9e-par-d\xe9faut",children:"Simulation de classe non export\xe9e par d\xe9faut"}),"\n",(0,s.jsxs)(n.p,{children:["Si la classe ",(0,s.jsx)(n.strong,{children:"n'est pas"})," l'exportation par d\xe9faut du module alors vous devez retourner un objet avec la cl\xe9 qui est la m\xeame que le nom d'exportation de la classe."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import {SoundPlayer} from './sound-player';\njest.mock('./sound-player', () => {\n  // Fonctionne et vous permet de v\xe9rifier les appels du constructeur\xa0:\n  return {\n    SoundPlayer: jest.fn().mockImplementation(() => {\n      return {playSoundFile: () => {}};\n    }),\n  };\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"espionnage-sur-les-m\xe9thodes-de-notre-classe",children:"Espionnage sur les m\xe9thodes de notre classe"}),"\n",(0,s.jsxs)(n.p,{children:["Notre classe simul\xe9e devra fournir toutes les fonctions membres (",(0,s.jsx)(n.code,{children:"playSoundFile"})," dans l'exemple) qui seront appel\xe9es pendant nos tests, sinon nous obtiendrons une erreur pour avoir appel\xe9 une fonction qui n'existe pas. Mais nous voudrons probablement aussi espionner les appels \xe0 ces m\xe9thodes, pour nous assurer qu'elles ont \xe9t\xe9 appel\xe9es avec les param\xe8tres attendus."]}),"\n",(0,s.jsxs)(n.p,{children:["Un nouvel objet sera cr\xe9\xe9 chaque fois que la fonction constructeur simul\xe9e sera appel\xe9e pendant les tests. Pour espionner les appels de m\xe9thode dans tous ces objets, nous remplissons ",(0,s.jsx)(n.code,{children:"playSoundFile"})," avec une autre fonction simul\xe9e, et nous stockons une r\xe9f\xe9rence \xe0 cette m\xeame fonction simul\xe9e dans notre fichier de test, afin qu'elle soit disponible pendant les tests."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import SoundPlayer from './sound-player';\nconst mockPlaySoundFile = jest.fn();\njest.mock('./sound-player', () => {\n  return jest.fn().mockImplementation(() => {\n    return {playSoundFile: mockPlaySoundFile};\n    // Nous pouvons maintenant suivre les appels vers playSoundFile\n  });\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"L'\xe9quivalent de la simulation manuelle serait le suivant\xa0:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",metastring:'title="__mocks__/sound-player.js"',children:"// Importe cet export nomm\xe9 dans votre fichier de test\nexport const mockPlaySoundFile = jest.fn();\nconst mock = jest.fn().mockImplementation(() => {\n  return {playSoundFile: mockPlaySoundFile};\n});\n\nexport default mock;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["L'utilisation est similaire \xe0 la fonction factory du module, sauf que vous pouvez omettre le second argument de ",(0,s.jsx)(n.code,{children:"jest.mock()"}),", et vous devez importer la m\xe9thode simul\xe9e dans votre fichier de test, puisqu'elle n'y est plus d\xe9finie. Utilisez le chemin du module original pour cela ; n'incluez pas ",(0,s.jsx)(n.code,{children:"__mocks__"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"nettoyage-entre-les-tests",children:"Nettoyage entre les tests"}),"\n",(0,s.jsxs)(n.p,{children:["Pour effacer l'enregistrement des appels \xe0 la fonction constructeur simul\xe9e et \xe0 ses m\xe9thodes, nous appelons ",(0,s.jsx)(n.a,{href:"/fr/docs/29.4/mock-function-api#mockfnmockclear",children:(0,s.jsx)(n.code,{children:"mockClear()"})})," dans la fonction ",(0,s.jsx)(n.code,{children:"beforeEach()"}),"\xa0:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"beforeEach(() => {\n  SoundPlayer.mockClear();\n  mockPlaySoundFile.mockClear();\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"exemple-complet",children:"Exemple complet"}),"\n",(0,s.jsxs)(n.p,{children:["Voici un fichier de test complet qui utilise le param\xe8tre factory du module pour ",(0,s.jsx)(n.code,{children:"jest.mock"}),"\xa0:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",metastring:'title="sound-player-consumer.test.js"',children:"import SoundPlayer from './sound-player';\nimport SoundPlayerConsumer from './sound-player-consumer';\n\nconst mockPlaySoundFile = jest.fn();\njest.mock('./sound-player', () => {\n  return jest.fn().mockImplementation(() => {\n    return {playSoundFile: mockPlaySoundFile};\n  });\n});\n\nbeforeEach(() => {\n  SoundPlayer.mockClear();\n  mockPlaySoundFile.mockClear();\n});\n\nit('The consumer should be able to call new() on SoundPlayer', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  // Ensure constructor created the object:\n  expect(soundPlayerConsumer).toBeTruthy();\n});\n\nit('We can check if the consumer called the class constructor', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  expect(SoundPlayer).toHaveBeenCalledTimes(1);\n});\n\nit('We can check if the consumer called a method on the class instance', () => {\n  const soundPlayerConsumer = new SoundPlayerConsumer();\n  const coolSoundFileName = 'song.mp3';\n  soundPlayerConsumer.playSomethingCool();\n  expect(mockPlaySoundFile.mock.calls[0][0]).toBe(coolSoundFileName);\n});\n"})})]})}const d=function(e={}){const{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(u,e)})):u(e)}},1670:(e,n,o)=>{o.d(n,{Zo:()=>r,ah:()=>t});var s=o(7378);const l=s.createContext({});function t(e){const n=s.useContext(l);return s.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}const a={};function r({components:e,children:n,disableParentContext:o}){let r;return r=o?"function"==typeof e?e({}):e||a:t(e),s.createElement(l.Provider,{value:r},n)}}}]);