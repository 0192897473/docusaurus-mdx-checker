"use strict";(self.webpackChunkjest_website=self.webpackChunkjest_website||[]).push([[8107],{9814:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var i=t(4246),s=t(1670);const r={id:"using-matchers",title:"Utilizarea regulilor de potrivire"},o=void 0,a={unversionedId:"using-matchers",id:"version-29.4/using-matchers",title:"Utilizarea regulilor de potrivire",description:'Jest uses "matchers" to let you test values in different ways. This document will introduce some commonly used matchers. For the full list, see the expect API doc.',source:"@site/i18n/ro/docusaurus-plugin-content-docs/version-29.4/UsingMatchers.md",sourceDirName:".",slug:"/using-matchers",permalink:"/ro/docs/29.4/using-matchers",draft:!1,unlisted:!1,editUrl:"https://crowdin.com/project/jest-v2/ro",tags:[],version:"29.4",frontMatter:{id:"using-matchers",title:"Utilizarea regulilor de potrivire"},sidebar:"docs",previous:{title:"Primii pa\u0219i",permalink:"/ro/docs/29.4/getting-started"},next:{title:"Testarea codului asincron",permalink:"/ro/docs/29.4/asynchronous"}},c={},l=[{value:"Validatori comuni",id:"validatori-comuni",level:2},{value:"Adev\u0103r",id:"adev\u0103r",level:2},{value:"Numere",id:"numere",level:2},{value:"\u015eiruri de caractere",id:"\u015firuri-de-caractere",level:2},{value:"Arrays and iterables",id:"arrays-and-iterables",level:2},{value:"Excep\u0163ii",id:"excep\u0163ii",level:2},{value:"\u015ei mai mult",id:"\u015fi-mai-mult",level:2}];function d(e){const n=Object.assign({p:"p",a:"a",code:"code",h2:"h2",pre:"pre",admonition:"admonition",ul:"ul",li:"li"},(0,s.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:['Jest uses "matchers" to let you test values in different ways. This document will introduce some commonly used matchers. For the full list, see the ',(0,i.jsxs)(n.a,{href:"/ro/docs/29.4/expect",children:[(0,i.jsx)(n.code,{children:"expect"})," API doc"]}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"validatori-comuni",children:"Validatori comuni"}),"\n",(0,i.jsx)(n.p,{children:"Cel mai simplu mod de a testa o valoare este cu egalitatea exact\u0103."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"test('two plus two is four', () => {\n  expect(2 + 2).toBe(4);\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\xcen acest cod, ",(0,i.jsx)(n.code,{children:"expect(2 + 2)"}),' returneaz\u0103 un obiect "expectation". De obicei nu ve\u0163i face mult cu aceste obiecte cu excep\u0163ia c\u0103 ve\u021bi apela validatori pe ele. \xcen acest cod, ',(0,i.jsx)(n.code,{children:".toBe(4)"})," este validator. C\xe2nd Jest se execut\u0103, el urm\u0103re\u0219te to\u021bi validatorii e\u0219ua\u021bi astfel \xeenc\xe2t s\u0103 poat\u0103 afi\u0219a frumos mesajele de eroare."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"toBe"})," uses ",(0,i.jsx)(n.code,{children:"Object.is"})," to test exact equality. If you want to check the value of an object, use ",(0,i.jsx)(n.code,{children:"toEqual"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"test('object assignment', () => {\n  const data = {one: 1};\n  data['two'] = 2;\n  expect(data).toEqual({one: 1, two: 2});\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"toEqual"})," verific\u0103 recursiv fiecare c\xe2mp dintr-un obiect sau un array."]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"toEqual"})," ignores object keys with ",(0,i.jsx)(n.code,{children:"undefined"})," properties, ",(0,i.jsx)(n.code,{children:"undefined"})," array items, array sparseness, or object type mismatch. To take these into account use ",(0,i.jsx)(n.code,{children:"toStrictEqual"})," instead."]})}),"\n",(0,i.jsxs)(n.p,{children:["You can also test for the opposite of a matcher using ",(0,i.jsx)(n.code,{children:"not"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"test('adding positive numbers is not zero', () => {\n  for (let a = 1; a < 10; a++) {\n    for (let b = 1; b < 10; b++) {\n      expect(a + b).not.toBe(0);\n    }\n  }\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"adev\u0103r",children:"Adev\u0103r"}),"\n",(0,i.jsxs)(n.p,{children:["In tests, you sometimes need to distinguish between ",(0,i.jsx)(n.code,{children:"undefined"}),", ",(0,i.jsx)(n.code,{children:"null"}),", and ",(0,i.jsx)(n.code,{children:"false"}),", but you sometimes do not want to treat these differently. Jest con\u0163ine utillitare care v\u0103 permit s\u0103 fi\u021bi explici\u021bi despre ceea ce dori\u021bi."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"toBeNull"})," valideaz\u0103 doar ",(0,i.jsx)(n.code,{children:"null"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"toBeUndefined"})," valideaz\u0103 doar ",(0,i.jsx)(n.code,{children:"undefined"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"toBeDefined"})," este opusul lui ",(0,i.jsx)(n.code,{children:"toBeUndefined"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"toBeTruthy"})," valideaz\u0103 orice declara\u021bie ",(0,i.jsx)(n.code,{children:"dac\u0103"})," este adev\u0103rat\u0103"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"toBeFalsy"})," valideaz\u0103 orice declara\u021bie ",(0,i.jsx)(n.code,{children:"dac\u0103"})," este fals\u0103"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"De exemplu:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"test('null', () => {\n  const n = null;\n  expect(n).toBeNull();\n  expect(n).toBeDefined();\n  expect(n).not.toBeUndefined();\n  expect(n).not.toBeTruthy();\n  expect(n).toBeFalsy();\n});\n\ntest('zero', () => {\n  const z = 0;\n  expect(z).not.toBeNull();\n  expect(z).toBeDefined();\n  expect(z).not.toBeUndefined();\n  expect(z).not.toBeTruthy();\n  expect(z).toBeFalsy();\n});\n"})}),"\n",(0,i.jsx)(n.p,{children:"Ar trebui s\u0103 utiliza\u0163i validatorul care corespunde cel mai exact cu ceea ce dore\u0219ti s\u0103 fac\u0103 codul t\u0103u."}),"\n",(0,i.jsx)(n.h2,{id:"numere",children:"Numere"}),"\n",(0,i.jsx)(n.p,{children:"Majoritatea modurilor de comparare a numerelor au validatori echivalen\u0163i."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"test('two plus two', () => {\n  const value = 2 + 2;\n  expect(value).toBeGreaterThan(3);\n  expect(value).toBeGreaterThanOrEqual(3.5);\n  expect(value).toBeLessThan(5);\n  expect(value).toBeLessThanOrEqual(4.5);\n\n  // toBe and toEqual are equivalent for numbers\n  expect(value).toBe(4);\n  expect(value).toEqual(4);\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Pentru egalitatea numerelor cu virgul\u0103 mobil\u0103, utiliza\u0163i ",(0,i.jsx)(n.code,{children:"toBeCloseTo"})," \xeen loc de ",(0,i.jsx)(n.code,{children:"toEqual"}),", deoarece nu vrei ca un test s\u0103 depind\u0103 de o eroare mic\u0103 de rotunjire."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"test('adding floating point numbers', () => {\n  const value = 0.1 + 0.2;\n  //expect(value).toBe(0.3);           This won't work because of rounding error\n  expect(value).toBeCloseTo(0.3); // This works.\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"\u015firuri-de-caractere",children:"\u015eiruri de caractere"}),"\n",(0,i.jsxs)(n.p,{children:["Pute\u0163i verifica \u0219iruri de caractere cu expresii regulate utiliz\xe2nd ",(0,i.jsx)(n.code,{children:"toMatch"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"test('there is no I in team', () => {\n  expect('team').not.toMatch(/I/);\n});\n\ntest('but there is a \"stop\" in Christoph', () => {\n  expect('Christoph').toMatch(/stop/);\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"arrays-and-iterables",children:"Arrays and iterables"}),"\n",(0,i.jsxs)(n.p,{children:["You can check if an array or iterable contains a particular item using ",(0,i.jsx)(n.code,{children:"toContain"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const shoppingList = [\n  'diapers',\n  'kleenex',\n  'trash bags',\n  'paper towels',\n  'milk',\n];\n\ntest('the shopping list has milk on it', () => {\n  expect(shoppingList).toContain('milk');\n  expect(new Set(shoppingList)).toContain('milk');\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"excep\u0163ii",children:"Excep\u0163ii"}),"\n",(0,i.jsxs)(n.p,{children:["If you want to test whether a particular function throws an error when it's called, use ",(0,i.jsx)(n.code,{children:"toThrow"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function compileAndroidCode() {\n  throw new Error('you are using the wrong JDK!');\n}\n\ntest('compiling android goes as expected', () => {\n  expect(() => compileAndroidCode()).toThrow();\n  expect(() => compileAndroidCode()).toThrow(Error);\n\n  // You can also use a string that must be contained in the error message or a regexp\n  expect(() => compileAndroidCode()).toThrow('you are using the wrong JDK');\n  expect(() => compileAndroidCode()).toThrow(/JDK/);\n\n  // Or you can match an exact error message using a regexp like below\n  expect(() => compileAndroidCode()).toThrow(/^you are using the wrong JDK$/); // Test fails\n  expect(() => compileAndroidCode()).toThrow(/^you are using the wrong JDK!$/); // Test pass\n});\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["The function that throws an exception needs to be invoked within a wrapping function otherwise the ",(0,i.jsx)(n.code,{children:"toThrow"})," assertion will fail."]})}),"\n",(0,i.jsx)(n.h2,{id:"\u015fi-mai-mult",children:"\u015ei mai mult"}),"\n",(0,i.jsxs)(n.p,{children:["This is just a taste. Pentru o list\u0103 complet\u0103 a validatorilor, verifica\u021bi ",(0,i.jsx)(n.a,{href:"/ro/docs/29.4/expect",children:"documenta\u021bia de referin\u0163\u0103"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Odat\u0103 ce a\u0163i \xeenv\u0103\u0163at despre validatorii disponibili, un bun pas urm\u0103tor este s\u0103 vede\u021bi cum v\u0103 permite Jest s\u0103 ",(0,i.jsx)(n.a,{href:"/ro/docs/29.4/asynchronous",children:"testa\u0163i codul asincron"}),"."]})]})}const u=function(e={}){const{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,i.jsx)(n,Object.assign({},e,{children:(0,i.jsx)(d,e)})):d(e)}},1670:(e,n,t)=>{t.d(n,{Zo:()=>a,ah:()=>r});var i=t(7378);const s=i.createContext({});function r(e){const n=i.useContext(s);return i.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}const o={};function a({components:e,children:n,disableParentContext:t}){let a;return a=t?"function"==typeof e?e({}):e||o:r(e),i.createElement(s.Provider,{value:a},n)}}}]);