"use strict";(self.webpackChunkjest_website=self.webpackChunkjest_website||[]).push([[1430],{5785:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>m,frontMatter:()=>i,metadata:()=>r,toc:()=>a});var s=t(4246),o=t(1670);const i={id:"manual-mocks",title:"Manual pentru dubluri"},c=void 0,r={unversionedId:"manual-mocks",id:"version-29.4/manual-mocks",title:"Manual pentru dubluri",description:"Mock-urile manuale sunt folosite pentru a \xeenlocui func\u0163ionalit\u0103\u021bi cu date mock. De exemplu, \xeen loc s\u0103 accesa\u021bi o resurs\u0103 din re\u021bea precum un site sau o baz\u0103 de date, a\u0163i putea dori s\u0103 crea\u021bi un mock manual care v\u0103 permite s\u0103 utiliza\u0163i date false. Acest lucru asigur\u0103 c\u0103 testele vor fi rapide \u015fi nu fragile.",source:"@site/i18n/ro/docusaurus-plugin-content-docs/version-29.4/ManualMocks.md",sourceDirName:".",slug:"/manual-mocks",permalink:"/ro/docs/29.4/manual-mocks",draft:!1,unlisted:!1,editUrl:"https://crowdin.com/project/jest-v2/ro",tags:[],version:"29.4",frontMatter:{id:"manual-mocks",title:"Manual pentru dubluri"},sidebar:"docs",previous:{title:"Dubluri de timp",permalink:"/ro/docs/29.4/timer-mocks"},next:{title:"ES6 Class Mocks",permalink:"/ro/docs/29.4/es6-class-mocks"}},l={},a=[{value:"Mocking user modules",id:"mocking-user-modules",level:2},{value:"Mocking Node modules",id:"mocking-node-modules",level:2},{value:"Exemple",id:"exemple",level:2},{value:"Folosirea cu importurile modulelor ES",id:"folosirea-cu-importurile-modulelor-es",level:2},{value:"Mocking methods which are not implemented in JSDOM",id:"mocking-methods-which-are-not-implemented-in-jsdom",level:2}];function d(e){const n=Object.assign({p:"p",h2:"h2",code:"code",admonition:"admonition",strong:"strong",a:"a",pre:"pre"},(0,o.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Mock-urile manuale sunt folosite pentru a \xeenlocui func\u0163ionalit\u0103\u021bi cu date mock. De exemplu, \xeen loc s\u0103 accesa\u021bi o resurs\u0103 din re\u021bea precum un site sau o baz\u0103 de date, a\u0163i putea dori s\u0103 crea\u021bi un mock manual care v\u0103 permite s\u0103 utiliza\u0163i date false. Acest lucru asigur\u0103 c\u0103 testele vor fi rapide \u015fi nu fragile."}),"\n",(0,s.jsx)(n.h2,{id:"mocking-user-modules",children:"Mocking user modules"}),"\n",(0,s.jsxs)(n.p,{children:["Mock-urile manuale sunt definite prin crearea unui modul \xeen subdirectorul ",(0,s.jsx)(n.code,{children:"__mocks__ /"})," imediat adiacent modulului. De exemplu, pentru crea un mock pentru un modul numit ",(0,s.jsx)(n.code,{children:"user"})," \xeen directorul ",(0,s.jsx)(n.code,{children:"models"}),", crea\u0163i un fi\u015fier numit ",(0,s.jsx)(n.code,{children:"user.js"})," \u015fi pune\u021bi-l \xeen directorul ",(0,s.jsx)(n.code,{children:"models/__mocks__"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"__mocks__"})," folder is case-sensitive, so naming the directory ",(0,s.jsx)(n.code,{children:"__MOCKS__"})," will break on some systems."]})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["When we require that module in our tests (meaning we want to use the manual mock instead of the real implementation), explicitly calling ",(0,s.jsx)(n.code,{children:"jest.mock('./moduleName')"})," is ",(0,s.jsx)(n.strong,{children:"required"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"mocking-node-modules",children:"Mocking Node modules"}),"\n",(0,s.jsxs)(n.p,{children:["If the module you are mocking is a Node module (e.g.: ",(0,s.jsx)(n.code,{children:"lodash"}),"), the mock should be placed in the ",(0,s.jsx)(n.code,{children:"__mocks__"})," directory adjacent to ",(0,s.jsx)(n.code,{children:"node_modules"})," (unless you configured ",(0,s.jsx)(n.a,{href:"/ro/docs/29.4/configuration#roots-arraystring",children:(0,s.jsx)(n.code,{children:"roots"})})," to point to a folder other than the project root) and will be ",(0,s.jsx)(n.strong,{children:"automatically"})," mocked. There's no need to explicitly call ",(0,s.jsx)(n.code,{children:"jest.mock('module_name')"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Scoped modules (also known as ",(0,s.jsx)(n.a,{href:"https://docs.npmjs.com/cli/v6/using-npm/scope",children:"scoped packages"}),") can be mocked by creating a file in a directory structure that matches the name of the scoped module. For example, to mock a scoped module called ",(0,s.jsx)(n.code,{children:"@scope/project-name"}),", create a file at ",(0,s.jsx)(n.code,{children:"__mocks__/@scope/project-name.js"}),", creating the ",(0,s.jsx)(n.code,{children:"@scope/"})," directory accordingly."]}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsxs)(n.p,{children:["If we want to mock Node's built-in modules (e.g.: ",(0,s.jsx)(n.code,{children:"fs"})," or ",(0,s.jsx)(n.code,{children:"path"}),"), then explicitly calling e.g. ",(0,s.jsx)(n.code,{children:"jest.mock('path')"})," is ",(0,s.jsx)(n.strong,{children:"required"}),", because built-in modules are not mocked by default."]})}),"\n",(0,s.jsx)(n.h2,{id:"exemple",children:"Exemple"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:".\n\u251c\u2500\u2500 config\n\u251c\u2500\u2500 __mocks__\n\u2502\xa0\xa0 \u2514\u2500\u2500 fs.js\n\u251c\u2500\u2500 models\n\u2502\xa0\xa0 \u251c\u2500\u2500 __mocks__\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 user.js\n\u2502\xa0\xa0 \u2514\u2500\u2500 user.js\n\u251c\u2500\u2500 node_modules\n\u2514\u2500\u2500 views\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Atunci c\xe2nd un mock manual exist\u0103 pentru un anumit modul, sistemul de module din Jest va utiliza acel modul c\xe2nd apela\u021bi explicit ",(0,s.jsx)(n.code,{children:"jest.mock('moduleName')"}),". However, when ",(0,s.jsx)(n.code,{children:"automock"})," is set to ",(0,s.jsx)(n.code,{children:"true"}),", the manual mock implementation will be used instead of the automatically created mock, even if ",(0,s.jsx)(n.code,{children:"jest.mock('moduleName')"})," is not called. Pentru a renun\u0163a la acest comportament trebuie s\u0103 apela\u021bi explicit ",(0,s.jsx)(n.code,{children:"jest.unmock('moduleName')"})," \xeen testele care ar trebui s\u0103 utilizeze implementarea real\u0103 a modulului."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["In order to mock properly, Jest needs ",(0,s.jsx)(n.code,{children:"jest.mock('moduleName')"})," to be in the same scope as the ",(0,s.jsx)(n.code,{children:"require/import"})," statement."]})}),"\n",(0,s.jsxs)(n.p,{children:["Here's a contrived example where we have a module that provides a summary of all the files in a given directory. In this case, we use the core (built in) ",(0,s.jsx)(n.code,{children:"fs"})," module."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",metastring:'title="FileSummarizer.js"',children:"'use strict';\n\nconst fs = require('fs');\n\nfunction summarizeFilesInDirectorySync(directory) {\n  return fs.readdirSync(directory).map(fileName => ({\n    directory,\n    fileName,\n  }));\n}\n\nexports.summarizeFilesInDirectorySync = summarizeFilesInDirectorySync;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Since we'd like our tests to avoid actually hitting the disk (that's pretty slow and fragile), we create a manual mock for the ",(0,s.jsx)(n.code,{children:"fs"})," module by extending an automatic mock. Our manual mock will implement custom versions of the ",(0,s.jsx)(n.code,{children:"fs"})," APIs that we can build on for our tests:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",metastring:'title="__mocks__/fs.js"',children:"'use strict';\n\nconst path = require('path');\n\nconst fs = jest.createMockFromModule('fs');\n\n// This is a custom function that our tests can use during setup to specify\n// what the files on the \"mock\" filesystem should look like when any of the\n// `fs` APIs are used.\nlet mockFiles = Object.create(null);\nfunction __setMockFiles(newMockFiles) {\n  mockFiles = Object.create(null);\n  for (const file in newMockFiles) {\n    const dir = path.dirname(file);\n\n    if (!mockFiles[dir]) {\n      mockFiles[dir] = [];\n    }\n    mockFiles[dir].push(path.basename(file));\n  }\n}\n\n// A custom version of `readdirSync` that reads from the special mocked out\n// file list set via __setMockFiles\nfunction readdirSync(directoryPath) {\n  return mockFiles[directoryPath] || [];\n}\n\nfs.__setMockFiles = __setMockFiles;\nfs.readdirSync = readdirSync;\n\nmodule.exports = fs;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Now we write our test. In this case ",(0,s.jsx)(n.code,{children:"jest.mock('fs')"})," must be called explicitly, because ",(0,s.jsx)(n.code,{children:"fs"})," is Node\u2019s built-in module:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",metastring:'title="__tests__/FileSummarizer-test.js"',children:"'use strict';\n\njest.mock('fs');\n\ndescribe('listFilesInDirectorySync', () => {\n  const MOCK_FILE_INFO = {\n    '/path/to/file1.js': 'console.log(\"file1 contents\");',\n    '/path/to/file2.txt': 'file2 contents',\n  };\n\n  beforeEach(() => {\n    // Set up some mocked out file info before each test\n    require('fs').__setMockFiles(MOCK_FILE_INFO);\n  });\n\n  test('includes all files in the directory in the summary', () => {\n    const FileSummarizer = require('../FileSummarizer');\n    const fileSummary =\n      FileSummarizer.summarizeFilesInDirectorySync('/path/to');\n\n    expect(fileSummary.length).toBe(2);\n  });\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The example mock shown here uses ",(0,s.jsx)(n.a,{href:"/ro/docs/29.4/jest-object#jestcreatemockfrommodulemodulename",children:(0,s.jsx)(n.code,{children:"jest.createMockFromModule"})})," to generate an automatic mock, and overrides its default behavior. This is the recommended approach, but is completely optional. If you do not want to use the automatic mock at all, you can export your own functions from the mock file. One downside to fully manual mocks is that they're manual \u2013 meaning you have to manually update them any time the module they are mocking changes. Because of this, it's best to use or extend the automatic mock when it works for your needs."]}),"\n",(0,s.jsxs)(n.p,{children:["To ensure that a manual mock and its real implementation stay in sync, it might be useful to require the real module using ",(0,s.jsx)(n.a,{href:"/ro/docs/29.4/jest-object#jestrequireactualmodulename",children:(0,s.jsx)(n.code,{children:"jest.requireActual(moduleName)"})})," in your manual mock and amending it with mock functions before exporting it."]}),"\n",(0,s.jsxs)(n.p,{children:["The code for this example is available at ",(0,s.jsx)(n.a,{href:"https://github.com/jestjs/jest/tree/main/examples/manual-mocks",children:"examples/manual-mocks"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"folosirea-cu-importurile-modulelor-es",children:"Folosirea cu importurile modulelor ES"}),"\n",(0,s.jsxs)(n.p,{children:["If you're using ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import",children:"ES module imports"})," then you'll normally be inclined to put your ",(0,s.jsx)(n.code,{children:"import"})," statements at the top of the test file. But often you need to instruct Jest to use a mock before modules use it. For this reason, Jest will automatically hoist ",(0,s.jsx)(n.code,{children:"jest.mock"})," calls to the top of the module (before any imports). To learn more about this and see it in action, see ",(0,s.jsx)(n.a,{href:"https://github.com/kentcdodds/how-jest-mocking-works",children:"this repo"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"jest.mock"})," calls cannot be hoisted to the top of the module if you enabled ECMAScript modules support. The ESM module loader always evaluates the static imports before executing code. See ",(0,s.jsx)(n.a,{href:"/ro/docs/29.4/ecmascript-modules",children:"ECMAScriptModules"})," for details."]})}),"\n",(0,s.jsx)(n.h2,{id:"mocking-methods-which-are-not-implemented-in-jsdom",children:"Mocking methods which are not implemented in JSDOM"}),"\n",(0,s.jsxs)(n.p,{children:["If some code uses a method which JSDOM (the DOM implementation used by Jest) hasn't implemented yet, testing it is not easily possible. This is e.g. the case with ",(0,s.jsx)(n.code,{children:"window.matchMedia()"}),". Jest returns ",(0,s.jsx)(n.code,{children:"TypeError: window.matchMedia is not a function"})," and doesn't properly execute the test."]}),"\n",(0,s.jsxs)(n.p,{children:["In this case, mocking ",(0,s.jsx)(n.code,{children:"matchMedia"})," in the test file should solve the issue:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"Object.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: jest.fn().mockImplementation(query => ({\n    matches: false,\n    media: query,\n    onchange: null,\n    addListener: jest.fn(), // deprecated\n    removeListener: jest.fn(), // deprecated\n    addEventListener: jest.fn(),\n    removeEventListener: jest.fn(),\n    dispatchEvent: jest.fn(),\n  })),\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This works if ",(0,s.jsx)(n.code,{children:"window.matchMedia()"})," is used in a function (or method) which is invoked in the test. If ",(0,s.jsx)(n.code,{children:"window.matchMedia()"})," is executed directly in the tested file, Jest reports the same error. In this case, the solution is to move the manual mock into a separate file and include this one in the test ",(0,s.jsx)(n.strong,{children:"before"})," the tested file:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import './matchMedia.mock'; // Must be imported before the tested file\nimport {myMethod} from './file-to-test';\n\ndescribe('myMethod()', () => {\n  // Test the method here...\n});\n"})})]})}const m=function(e={}){const{wrapper:n}=Object.assign({},(0,o.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(d,e)})):d(e)}},1670:(e,n,t)=>{t.d(n,{Zo:()=>r,ah:()=>i});var s=t(7378);const o=s.createContext({});function i(e){const n=s.useContext(o);return s.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}const c={};function r({components:e,children:n,disableParentContext:t}){let r;return r=t?"function"==typeof e?e({}):e||c:i(e),s.createElement(o.Provider,{value:r},n)}}}]);