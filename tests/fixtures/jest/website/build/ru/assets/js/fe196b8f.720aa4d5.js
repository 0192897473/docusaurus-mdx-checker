"use strict";(self.webpackChunkjest_website=self.webpackChunkjest_website||[]).push([[8540],{677:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>a,contentTitle:()=>d,default:()=>p,frontMatter:()=>c,metadata:()=>i,toc:()=>l});var o=t(4246),n=t(1670),r=t(3039);const c={id:"upgrading-to-jest29",title:"From v28 to v29"},d=void 0,i={unversionedId:"upgrading-to-jest29",id:"version-29.5/upgrading-to-jest29",title:"From v28 to v29",description:"Upgrading Jest from v28 to v29? This guide aims to help refactoring your configuration and tests.",source:"@site/i18n/ru/docusaurus-plugin-content-docs/version-29.5/UpgradingToJest29.md",sourceDirName:".",slug:"/upgrading-to-jest29",permalink:"/ru/docs/29.5/upgrading-to-jest29",draft:!1,unlisted:!1,editUrl:"https://crowdin.com/project/jest-v2/ru",tags:[],version:"29.5",frontMatter:{id:"upgrading-to-jest29",title:"From v28 to v29"},sidebar:"docs",previous:{title:"Testing Web Frameworks",permalink:"/ru/docs/29.5/testing-frameworks"}},a={},l=[{value:"Compatibility",id:"compatibility",level:2},{value:"Snapshot format",id:"snapshot-format",level:2},{value:"JSDOM upgrade",id:"jsdom-upgrade",level:2},{value:"<code>pretty-format</code>",id:"pretty-format",level:2},{value:"<code>jest-mock</code>",id:"jest-mock",level:3},{value:"TypeScript",id:"typescript",level:2},{value:"<code>jest.mocked()</code>",id:"jestmocked",level:3}];function h(e){const s=Object.assign({p:"p",admonition:"admonition",a:"a",h2:"h2",code:"code",pre:"pre",h3:"h3"},(0,n.ah)(),e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s.p,{children:"Upgrading Jest from v28 to v29? This guide aims to help refactoring your configuration and tests."}),"\n",(0,o.jsx)(s.admonition,{type:"info",children:(0,o.jsxs)(s.p,{children:["See ",(0,o.jsx)(s.a,{href:"https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2900",children:"changelog"})," for the full list of changes."]})}),"\n",(0,o.jsx)(s.admonition,{type:"note",children:(0,o.jsxs)(s.p,{children:["Upgrading from an older version? You can see the upgrade guide from v27 to v28 ",(0,o.jsx)(s.a,{href:"/docs/28.x/upgrading-to-jest28",children:"here"}),"."]})}),"\n",(0,o.jsx)(s.h2,{id:"compatibility",children:"Compatibility"}),"\n",(0,o.jsx)(s.p,{children:"The supported Node versions are 14.15, 16.10, 18.0 and above."}),"\n",(0,o.jsx)(s.h2,{id:"snapshot-format",children:"Snapshot format"}),"\n",(0,o.jsxs)(s.p,{children:["As announced in the ",(0,o.jsx)(s.a,{href:"/blog/2022/04/25/jest-28#future",children:"Jest 28 blog post"}),", Jest 29 has changed the default snapshot formatting to ",(0,o.jsx)(s.code,{children:"{escapeString: false, printBasicPrototype: false}"}),"."]}),"\n",(0,o.jsxs)(s.p,{children:["If you want to keep the old behavior, you can set the ",(0,o.jsx)(s.code,{children:"snapshotFormat"})," property to:"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-diff",children:"+ snapshotFormat: {\n+   escapeString: true,\n+   printBasicPrototype: true\n+ }\n"})}),"\n",(0,o.jsx)(s.h2,{id:"jsdom-upgrade",children:"JSDOM upgrade"}),"\n",(0,o.jsxs)(s.p,{children:[(0,o.jsx)(s.code,{children:"jest-environment-jsdom"})," has upgraded ",(0,o.jsx)(s.code,{children:"jsdom"})," from v19 to v20."]}),"\n",(0,o.jsx)(s.admonition,{type:"info",children:(0,o.jsxs)(s.p,{children:["If you use ",(0,o.jsx)(s.code,{children:"jest-environment-jsdom"}),", the minimum TypeScript version is set to ",(0,o.jsx)(s.code,{children:"4.5"}),"."]})}),"\n",(0,o.jsxs)(s.p,{children:["Notably, ",(0,o.jsx)(s.code,{children:"jsdom@20"})," includes support for ",(0,o.jsx)(s.code,{children:"crypto.getRandomValues()"}),", which means packages like ",(0,o.jsx)(s.code,{children:"uuid"})," and ",(0,o.jsx)(s.code,{children:"nanoid"}),", which doesn't work properly in Jest@28, can work without extra polyfills."]}),"\n",(0,o.jsx)(s.h2,{id:"pretty-format",children:(0,o.jsx)(s.code,{children:"pretty-format"})}),"\n",(0,o.jsxs)(s.p,{children:[(0,o.jsx)(s.code,{children:"ConvertAnsi"})," plugin is removed from ",(0,o.jsx)(s.code,{children:"pretty-format"})," package in favour of ",(0,o.jsx)(s.a,{href:"https://github.com/mrazauskas/jest-serializer-ansi-escapes",children:(0,o.jsx)(s.code,{children:"jest-serializer-ansi-escapes"})}),"."]}),"\n",(0,o.jsx)(s.h3,{id:"jest-mock",children:(0,o.jsx)(s.code,{children:"jest-mock"})}),"\n",(0,o.jsxs)(s.p,{children:["Exports of ",(0,o.jsx)(s.code,{children:"Mocked*"})," utility types from ",(0,o.jsx)(s.code,{children:"jest-mock"})," package have changed. ",(0,o.jsx)(s.code,{children:"MaybeMockedDeep"})," and ",(0,o.jsx)(s.code,{children:"MaybeMocked"})," now are exported as ",(0,o.jsx)(s.code,{children:"Mocked"})," and ",(0,o.jsx)(s.code,{children:"MockedShallow"})," respectively; only deep mocked variants of ",(0,o.jsx)(s.code,{children:"MockedClass"}),", ",(0,o.jsx)(s.code,{children:"MockedFunction"})," and ",(0,o.jsx)(s.code,{children:"MockedObject"})," are exposed."]}),"\n",(0,o.jsx)(s.h2,{id:"typescript",children:"TypeScript"}),"\n","\n","\n",(0,o.jsx)(r.ZP,{}),"\n",(0,o.jsx)(s.h3,{id:"jestmocked",children:(0,o.jsx)(s.code,{children:"jest.mocked()"})}),"\n",(0,o.jsxs)(s.p,{children:["The ",(0,o.jsx)(s.a,{href:"MockFunctionAPI.md/#jestmockedsource-options",children:(0,o.jsx)(s.code,{children:"jest.mocked()"})})," helper method now wraps types of deep members of passed object by default. If you have used the method with ",(0,o.jsx)(s.code,{children:"true"})," as the second argument, remove it to avoid type errors:"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-diff",children:"- const mockedObject = jest.mocked(someObject, true);\n+ const mockedObject = jest.mocked(someObject);\n"})}),"\n",(0,o.jsxs)(s.p,{children:["To have the old shallow mocked behavior, pass ",(0,o.jsx)(s.code,{children:"{shallow: true}"})," as the second argument:"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-diff",children:"- const mockedObject = jest.mocked(someObject);\n+ const mockedObject = jest.mocked(someObject, {shallow: true});\n"})})]})}const p=function(e={}){const{wrapper:s}=Object.assign({},(0,n.ah)(),e.components);return s?(0,o.jsx)(s,Object.assign({},e,{children:(0,o.jsx)(h,e)})):h(e)}},3039:(e,s,t)=>{t.d(s,{ZP:()=>c});var o=t(4246),n=t(1670);function r(e){const s=Object.assign({admonition:"admonition",p:"p",pre:"pre",code:"code",a:"a"},(0,n.ah)(),e.components);return(0,o.jsxs)(s.admonition,{type:"info",children:[(0,o.jsx)(s.p,{children:"\u041f\u0440\u0438\u043c\u0435\u0440\u044b TypeScript \u0441 \u044d\u0442\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0431\u0443\u0434\u0443\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u0432\u044b \u044f\u0432\u043d\u043e \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442\u0435 Jest API:"}),(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-ts",children:"Import {expect, jest, test} from '@jest/globals';\n"})}),(0,o.jsxs)(s.p,{children:["\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435\u0441\u044c \u043a ",(0,o.jsx)(s.a,{href:"/ru/docs/29.5/getting-started#using-typescript",children:"\u041d\u0430\u0447\u0430\u043b\u0443 \u0440\u0430\u0431\u043e\u0442\u044b"})," \u0437\u0430 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u044f\u043c\u0438 \u043e \u0442\u043e\u043c, \u043a\u0430\u043a \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c Jest \u0441 TypeScript."]})]})}const c=function(e={}){const{wrapper:s}=Object.assign({},(0,n.ah)(),e.components);return s?(0,o.jsx)(s,Object.assign({},e,{children:(0,o.jsx)(r,e)})):r(e)}},1670:(e,s,t)=>{t.d(s,{Zo:()=>d,ah:()=>r});var o=t(7378);const n=o.createContext({});function r(e){const s=o.useContext(n);return o.useMemo((()=>"function"==typeof e?e(s):{...s,...e}),[s,e])}const c={};function d({components:e,children:s,disableParentContext:t}){let d;return d=t?"function"==typeof e?e({}):e||c:r(e),o.createElement(n.Provider,{value:d},s)}}}]);