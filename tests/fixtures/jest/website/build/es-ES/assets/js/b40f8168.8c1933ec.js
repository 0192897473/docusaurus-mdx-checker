"use strict";(self.webpackChunkjest_website=self.webpackChunkjest_website||[]).push([[8799],{2170:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>i,contentTitle:()=>r,default:()=>u,frontMatter:()=>t,metadata:()=>c,toc:()=>d});var o=s(4246),a=s(1670);const t={id:"using-matchers",title:"Utilizando Comparadores"},r=void 0,c={unversionedId:"using-matchers",id:"version-29.4/using-matchers",title:"Utilizando Comparadores",description:'Jest utiliza "matchers" para permitirte probar valores de diferentes maneras. Este documento introducir\xe1 algunos matchers com\xfanmente usados. Para la lista completa, vea el documento expect API.',source:"@site/i18n/es-ES/docusaurus-plugin-content-docs/version-29.4/UsingMatchers.md",sourceDirName:".",slug:"/using-matchers",permalink:"/es-ES/docs/29.4/using-matchers",draft:!1,unlisted:!1,editUrl:"https://crowdin.com/project/jest-v2/es-ES",tags:[],version:"29.4",frontMatter:{id:"using-matchers",title:"Utilizando Comparadores"},sidebar:"docs",previous:{title:"Empezando",permalink:"/es-ES/docs/29.4/getting-started"},next:{title:"Tests de c\xf3digo as\xedncrono",permalink:"/es-ES/docs/29.4/asynchronous"}},i={},d=[{value:"Marcadores m\xe1s comunes",id:"marcadores-m\xe1s-comunes",level:2},{value:"Veracidad",id:"veracidad",level:2},{value:"N\xfameros",id:"n\xfameros",level:2},{value:"Cadenas de Texto",id:"cadenas-de-texto",level:2},{value:"Vectores e iterables",id:"vectores-e-iterables",level:2},{value:"Excepciones",id:"excepciones",level:2},{value:"Hay m\xe1s",id:"hay-m\xe1s",level:2}];function l(e){const n=Object.assign({p:"p",a:"a",code:"code",h2:"h2",pre:"pre",admonition:"admonition",ul:"ul",li:"li"},(0,a.ah)(),e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:['Jest utiliza "matchers" para permitirte probar valores de diferentes maneras. Este documento introducir\xe1 algunos matchers com\xfanmente usados. Para la lista completa, vea el documento ',(0,o.jsxs)(n.a,{href:"/es-ES/docs/29.4/expect",children:[(0,o.jsx)(n.code,{children:"expect"})," API"]}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"marcadores-m\xe1s-comunes",children:"Marcadores m\xe1s comunes"}),"\n",(0,o.jsx)(n.p,{children:"El camino m\xe1s simple para comprobar un valor es con una igualdad."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"test('dos mas dos son cuatro', () => {\n  expect(2 + 2).toBe(4);\n});\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Este c\xf3digo, ",(0,o.jsx)(n.code,{children:"expect (2 + 2)"}),' devuelve un objeto de "expectativa". T\xedpicamente no har\xe1 mucho con esos objetos de tipo expectations, excepto llamar a matchers en ellos. Este c\xf3digo, ',(0,o.jsx)(n.code,{children:".toBe(4)"})," es el matcher. Cuando Jest es ejecutado, este sigue la huella de los matchers as\xed que puede imprimir un mensaje de error m\xe1s agradable."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"toBe"})," usa ",(0,o.jsx)(n.code,{children:"Object.is"})," para probar la igualdad exacta. If you want to check the value of an object, use ",(0,o.jsx)(n.code,{children:"toEqual"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"test('asignaci\xf3n de un objeto', () => {\n  const datos = {uno: 1};\n  datos['dos'] = 2;\n  expect(datos).toEqual({uno: 1, dos: 2});\n});\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"toEqual"})," verifica recursivamente cada campo de un objeto o de un arreglo."]}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"toEqual"})," ignores object keys with ",(0,o.jsx)(n.code,{children:"undefined"})," properties, ",(0,o.jsx)(n.code,{children:"undefined"})," array items, array sparseness, or object type mismatch. To take these into account use ",(0,o.jsx)(n.code,{children:"toStrictEqual"})," instead."]})}),"\n",(0,o.jsxs)(n.p,{children:["You can also test for the opposite of a matcher using ",(0,o.jsx)(n.code,{children:"not"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"test('agregando un numero positivo que no sea 0', () => {\n  for (let a = 1; a < 10; a++) {\n    for (let b = 1; b < 10; b++) {\n      expect(a + b).not.toBe(0);\n    }\n  }\n});\n"})}),"\n",(0,o.jsx)(n.h2,{id:"veracidad",children:"Veracidad"}),"\n",(0,o.jsxs)(n.p,{children:["En los tests, a veces es necesario distinguir entre ",(0,o.jsx)(n.code,{children:"undefined"}),", ",(0,o.jsx)(n.code,{children:"null"}),", y ",(0,o.jsx)(n.code,{children:"false"}),", pero en otras ocasiones quiz\xe1s deseas tratarlos por igual. Jest contiene helpers que te permitir\xe1n ser expl\xedcito acerca de lo que deseas."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"toBeNull"})," coincide solo con ",(0,o.jsx)(n.code,{children:"null"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"toBeUndefined"})," coincide solo con ",(0,o.jsx)(n.code,{children:"undefined"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"toBeDefined"}),"es el opuesto a ",(0,o.jsx)(n.code,{children:"toBeUndefined"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"toBeTruthy"})," coincide con lo que sea que el condicional ",(0,o.jsx)(n.code,{children:"if"})," devuelva como verdadero"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"toBeFalsy"})," coincide con lo que sea que el condicional ",(0,o.jsx)(n.code,{children:"if"})," devuelva como falso"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Por ejemplo:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"test('null', () => {\n  const n = null;\n  expect(n).toBeNull();\n  expect(n).toBeDefined();\n  expect(n).not.toBeUndefined();\n  expect(n).not.toBeTruthy();\n  expect(n).toBeFalsy();\n});\n\ntest('cero', () => {\n  const z = 0;\n  expect(z).not.toBeNull();\n  expect(z).toBeDefined();\n  expect(z).not.toBeUndefined();\n  expect(z).not.toBeTruthy();\n  expect(z).toBeFalsy();\n});\n"})}),"\n",(0,o.jsx)(n.p,{children:"Deber\xedas usar el matcher que corresponda de manera m\xe1s precisa a lo que quiera que su c\xf3digo haga."}),"\n",(0,o.jsx)(n.h2,{id:"n\xfameros",children:"N\xfameros"}),"\n",(0,o.jsx)(n.p,{children:"Existen m\xfaltiples matchers equivalentes para la comprobaci\xf3n de n\xfameros."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"test('dos mas dos', () => {\n  const value = 2 + 2;\n  expect(value).toBeGreaterThan(3);\n  expect(value).toBeGreaterThanOrEqual(3.5);\n  expect(value).toBeLessThan(5);\n  expect(value).toBeLessThanOrEqual(4.5);\n\n  // toBe y toEqual son equivalentes para n\xfameros\n  expect(value).toBe(4);\n  expect(value).toEqual(4);\n});\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Para la igualdad de puntos flotantes, usa ",(0,o.jsx)(n.code,{children:"toBeCloseTo"})," en lugar de ",(0,o.jsx)(n.code,{children:"toEqual"}),", porque no quiere que una prueba dependa de un peque\xf1o error de redondeo."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"test('agregando n\xfameros de punto flotante', () => {\n  const value = 0.1 + 0.2;\n  //expect(value).toBe(0.3); Esto no funcionar\xe1 debido al error de redondeo\n  expect(value).toBeCloseTo(0.3); // Esto funciona.\n});\n"})}),"\n",(0,o.jsx)(n.h2,{id:"cadenas-de-texto",children:"Cadenas de Texto"}),"\n",(0,o.jsxs)(n.p,{children:["Puede probar cadenas contra expresiones regulares con ",(0,o.jsx)(n.code,{children:"toMatch"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"test('no hay I en Team', () => {\n  expect('team').not.toMatch(/I/);\n});\n\ntest('hay \"stop\" en Christoph', () => {\n  expect('Christoph').toMatch(/stop/);\n});\n"})}),"\n",(0,o.jsx)(n.h2,{id:"vectores-e-iterables",children:"Vectores e iterables"}),"\n",(0,o.jsxs)(n.p,{children:["Puedes comprobar si un array o iterable contiene un elemento en particular usando ",(0,o.jsx)(n.code,{children:"toContain"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"const listaDeCompras = [\n  'pa\xf1ales',\n  'pa\xf1uelos',\n  'bolsas de basura',\n  'toallas de papel',\n  'leche',\n];\n\ntest('la leche se encuentra en la lista de compras', () => {\n  expect(listaDeCompras).toContain('leche');\n  expect(new Set(listaDeCompras)).toContain('leche');\n});\n"})}),"\n",(0,o.jsx)(n.h2,{id:"excepciones",children:"Excepciones"}),"\n",(0,o.jsxs)(n.p,{children:["Si quiere probar que si una funci\xf3n particular lanza un error al llamarse, use ",(0,o.jsx)(n.code,{children:"toThrow"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"function compileAndroidCode() {\n  throw new Error('you are using the wrong JDK!');\n}\n\ntest('compiling android goes as expected', () => {\n  expect(() => compileAndroidCode()).toThrow();\n  expect(() => compileAndroidCode()).toThrow(Error);\n\n  // You can also use a string that must be contained in the error message or a regexp\n  expect(() => compileAndroidCode()).toThrow('you are using the wrong JDK');\n  expect(() => compileAndroidCode()).toThrow(/JDK/);\n\n  // Or you can match an exact error message using a regexp like below\n  expect(() => compileAndroidCode()).toThrow(/^you are using the wrong JDK$/); // Test fails\n  expect(() => compileAndroidCode()).toThrow(/^you are using the wrong JDK!$/); // Test pass\n});\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["The function that throws an exception needs to be invoked within a wrapping function otherwise the ",(0,o.jsx)(n.code,{children:"toThrow"})," assertion will fail."]})}),"\n",(0,o.jsx)(n.h2,{id:"hay-m\xe1s",children:"Hay m\xe1s"}),"\n",(0,o.jsxs)(n.p,{children:["Esto es s\xf3lo un ejemplo. Para una lista completa de matchers, revise los documentos de referencia ",(0,o.jsx)(n.a,{href:"/es-ES/docs/29.4/expect",children:"reference docs"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Una vez que haya aprendido sobre los matchers que est\xe1n disponibles, como recomendaci\xf3n, verifique ",(0,o.jsx)(n.a,{href:"/es-ES/docs/29.4/asynchronous",children:"Probando c\xf3digo as\xedncrono"}),"."]})]})}const u=function(e={}){const{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,o.jsx)(n,Object.assign({},e,{children:(0,o.jsx)(l,e)})):l(e)}},1670:(e,n,s)=>{s.d(n,{Zo:()=>c,ah:()=>t});var o=s(7378);const a=o.createContext({});function t(e){const n=o.useContext(a);return o.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}const r={};function c({components:e,children:n,disableParentContext:s}){let c;return c=s?"function"==typeof e?e({}):e||r:t(e),o.createElement(a.Provider,{value:c},n)}}}]);