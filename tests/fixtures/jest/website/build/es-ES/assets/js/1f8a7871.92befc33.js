"use strict";(self.webpackChunkjest_website=self.webpackChunkjest_website||[]).push([[8693],{709:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>r,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var o=n(4246),t=n(1670);const i={id:"manual-mocks",title:"Manual Mocks"},a=void 0,c={unversionedId:"manual-mocks",id:"version-29.6/manual-mocks",title:"Manual Mocks",description:"Las simulaciones mock manuales son usadas para sustituir funcionalidad con datos falsos. Por ejemplo, en lugar de acceder a un recurso remoto como un sitio web o una base de datos, puede que se desee crear una simulaci\xf3n manual que permita usar datos falsos. Esto asegura que las pruebas ser\xe1n r\xe1pidas y estables.",source:"@site/i18n/es-ES/docusaurus-plugin-content-docs/version-29.6/ManualMocks.md",sourceDirName:".",slug:"/manual-mocks",permalink:"/es-ES/docs/manual-mocks",draft:!1,unlisted:!1,editUrl:"https://crowdin.com/project/jest-v2/es-ES",tags:[],version:"29.6",frontMatter:{id:"manual-mocks",title:"Manual Mocks"},sidebar:"docs",previous:{title:"Mocks Temporizados",permalink:"/es-ES/docs/timer-mocks"},next:{title:"Mocks de clase ES6",permalink:"/es-ES/docs/es6-class-mocks"}},r={},l=[{value:"Mocking user modules",id:"mocking-user-modules",level:2},{value:"Mocking Node modules",id:"mocking-node-modules",level:2},{value:"Ejemplos",id:"ejemplos",level:2},{value:"Usando con imports de m\xf3dulos ES",id:"usando-con-imports-de-m\xf3dulos-es",level:2},{value:"Mocking methods which are not implemented in JSDOM",id:"mocking-methods-which-are-not-implemented-in-jsdom",level:2}];function d(e){const s=Object.assign({p:"p",h2:"h2",code:"code",admonition:"admonition",a:"a",strong:"strong",pre:"pre"},(0,t.ah)(),e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s.p,{children:"Las simulaciones mock manuales son usadas para sustituir funcionalidad con datos falsos. Por ejemplo, en lugar de acceder a un recurso remoto como un sitio web o una base de datos, puede que se desee crear una simulaci\xf3n manual que permita usar datos falsos. Esto asegura que las pruebas ser\xe1n r\xe1pidas y estables."}),"\n",(0,o.jsx)(s.h2,{id:"mocking-user-modules",children:"Mocking user modules"}),"\n",(0,o.jsxs)(s.p,{children:["Las simulaciones mock manuales se definen escribiendo un modulo en el subdirectorio ",(0,o.jsx)(s.code,{children:"__mocks__"})," el cual se debe encontrar adyacente al m\xf3dulo. Por ejemplo, para simular un m\xf3dulo llamado ",(0,o.jsx)(s.code,{children:"user"})," en el directorio ",(0,o.jsx)(s.code,{children:"models"}),", se debe crear un archivo ",(0,o.jsx)(s.code,{children:"user.js"})," y colocarse en el directorio ",(0,o.jsx)(s.code,{children:"models/__mocks__"}),"."]}),"\n",(0,o.jsx)(s.admonition,{type:"caution",children:(0,o.jsxs)(s.p,{children:["The ",(0,o.jsx)(s.code,{children:"__mocks__"})," folder is case-sensitive, so naming the directory ",(0,o.jsx)(s.code,{children:"__MOCKS__"})," will break on some systems."]})}),"\n",(0,o.jsx)(s.admonition,{type:"note",children:(0,o.jsxs)(s.p,{children:["Cuando necesitemos ese m\xf3dulo en nuestros tests (entendiendo que queremos usar la simulaci\xf3n en lugar de la implementaci\xf3n real), ser\xe1 necesario llamarlo expl\xedcitamente ",(0,o.jsx)(s.code,{children:"jest.mock('./nombreModulo')"}),"."]})}),"\n",(0,o.jsx)(s.h2,{id:"mocking-node-modules",children:"Mocking Node modules"}),"\n",(0,o.jsxs)(s.p,{children:["Si el m\xf3dulo que estamos simulando es un m\xf3dulo de Node (ej: ",(0,o.jsx)(s.code,{children:"lodash"}),"), la simulaci\xf3n (mock) deber\xeda colocarse en el directorio ",(0,o.jsx)(s.code,{children:"__mocks__"})," adyacente a ",(0,o.jsx)(s.code,{children:"node_modules"})," (a menos que se haya confiturado ",(0,o.jsx)(s.a,{href:"/es-ES/docs/configuration#roots-arrastring",children:(0,o.jsx)(s.code,{children:"roots"})})," apuntando a otra carpeta que no sea la ra\xedz del proyecto) y ser\xe1 ",(0,o.jsx)(s.strong,{children:"autom\xe1ticamente"})," simulado. No es necesario llamar expl\xedcitamente a ",(0,o.jsx)(s.code,{children:"jest.mock('nombre_modulo')"})]}),"\n",(0,o.jsxs)(s.p,{children:["Scoped modules (also known as ",(0,o.jsx)(s.a,{href:"https://docs.npmjs.com/cli/v6/using-npm/scope",children:"scoped packages"}),") can be mocked by creating a file in a directory structure that matches the name of the scoped module. For example, to mock a scoped module called ",(0,o.jsx)(s.code,{children:"@scope/project-name"}),", create a file at ",(0,o.jsx)(s.code,{children:"__mocks__/@scope/project-name.js"}),", creating the ",(0,o.jsx)(s.code,{children:"@scope/"})," directory accordingly."]}),"\n",(0,o.jsx)(s.admonition,{type:"caution",children:(0,o.jsxs)(s.p,{children:["If we want to mock Node's built-in modules (e.g.: ",(0,o.jsx)(s.code,{children:"fs"})," or ",(0,o.jsx)(s.code,{children:"path"}),"), then explicitly calling e.g. ",(0,o.jsx)(s.code,{children:"jest.mock('path')"})," is ",(0,o.jsx)(s.strong,{children:"required"}),", because built-in modules are not mocked by default."]})}),"\n",(0,o.jsx)(s.h2,{id:"ejemplos",children:"Ejemplos"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-bash",children:".\n\u251c\u2500\u2500 config\n\u251c\u2500\u2500 __mocks__\n\u2502\xa0\xa0 \u2514\u2500\u2500 fs.js\n\u251c\u2500\u2500 models\n\u2502\xa0\xa0 \u251c\u2500\u2500 __mocks__\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 user.js\n\u2502\xa0\xa0 \u2514\u2500\u2500 user.js\n\u251c\u2500\u2500 node_modules\n\u2514\u2500\u2500 views\n"})}),"\n",(0,o.jsxs)(s.p,{children:["Cuando una simulaci\xf3n mock manual existe para un m\xf3dulo, el sistema de m\xf3dulos de Jest usar\xe1 dicho mock cuando se llame a la funci\xf3n ",(0,o.jsx)(s.code,{children:"jest.mock('nombreModulo')"}),". However, when ",(0,o.jsx)(s.code,{children:"automock"})," is set to ",(0,o.jsx)(s.code,{children:"true"}),", the manual mock implementation will be used instead of the automatically created mock, even if ",(0,o.jsx)(s.code,{children:"jest.mock('moduleName')"})," is not called. Para omitir este comportamiento, se debe llamar de manera explicita a ",(0,o.jsx)(s.code,{children:"jest.unmock('nombreModulo')"})," en pruebas donde se desee usar la implementaci\xf3n real del m\xf3dulo."]}),"\n",(0,o.jsx)(s.admonition,{type:"info",children:(0,o.jsxs)(s.p,{children:["In order to mock properly, Jest needs ",(0,o.jsx)(s.code,{children:"jest.mock('moduleName')"})," to be in the same scope as the ",(0,o.jsx)(s.code,{children:"require/import"})," statement."]})}),"\n",(0,o.jsxs)(s.p,{children:["Here's a contrived example where we have a module that provides a summary of all the files in a given directory. In this case, we use the core (built in) ",(0,o.jsx)(s.code,{children:"fs"})," module."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-javascript",metastring:'title="FileSummarizer.js"',children:"'use strict';\n\nconst fs = require('fs');\n\nfunction summarizeFilesInDirectorySync(directory) {\n  return fs.readdirSync(directory).map(fileName => ({\n    directory,\n    fileName,\n  }));\n}\n\nexports.summarizeFilesInDirectorySync = summarizeFilesInDirectorySync;\n"})}),"\n",(0,o.jsxs)(s.p,{children:["Since we'd like our tests to avoid actually hitting the disk (that's pretty slow and fragile), we create a manual mock for the ",(0,o.jsx)(s.code,{children:"fs"})," module by extending an automatic mock. Our manual mock will implement custom versions of the ",(0,o.jsx)(s.code,{children:"fs"})," APIs that we can build on for our tests:"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-javascript",metastring:'title="__mocks__/fs.js"',children:"'use strict';\n\nconst path = require('path');\n\nconst fs = jest.createMockFromModule('fs');\n\n// This is a custom function that our tests can use during setup to specify\n// what the files on the \"mock\" filesystem should look like when any of the\n// `fs` APIs are used.\nlet mockFiles = Object.create(null);\nfunction __setMockFiles(newMockFiles) {\n  mockFiles = Object.create(null);\n  for (const file in newMockFiles) {\n    const dir = path.dirname(file);\n\n    if (!mockFiles[dir]) {\n      mockFiles[dir] = [];\n    }\n    mockFiles[dir].push(path.basename(file));\n  }\n}\n\n// A custom version of `readdirSync` that reads from the special mocked out\n// file list set via __setMockFiles\nfunction readdirSync(directoryPath) {\n  return mockFiles[directoryPath] || [];\n}\n\nfs.__setMockFiles = __setMockFiles;\nfs.readdirSync = readdirSync;\n\nmodule.exports = fs;\n"})}),"\n",(0,o.jsxs)(s.p,{children:["Now we write our test. In this case ",(0,o.jsx)(s.code,{children:"jest.mock('fs')"})," must be called explicitly, because ",(0,o.jsx)(s.code,{children:"fs"})," is Node\u2019s built-in module:"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-javascript",metastring:'title="__tests__/FileSummarizer-test.js"',children:"'use strict';\n\njest.mock('fs');\n\ndescribe('listFilesInDirectorySync', () => {\n  const MOCK_FILE_INFO = {\n    '/path/to/file1.js': 'console.log(\"file1 contents\");',\n    '/path/to/file2.txt': 'file2 contents',\n  };\n\n  beforeEach(() => {\n    // Set up some mocked out file info before each test\n    require('fs').__setMockFiles(MOCK_FILE_INFO);\n  });\n\n  test('includes all files in the directory in the summary', () => {\n    const FileSummarizer = require('../FileSummarizer');\n    const fileSummary =\n      FileSummarizer.summarizeFilesInDirectorySync('/path/to');\n\n    expect(fileSummary.length).toBe(2);\n  });\n});\n"})}),"\n",(0,o.jsxs)(s.p,{children:["The example mock shown here uses ",(0,o.jsx)(s.a,{href:"/es-ES/docs/jest-object#jestcreatemockfrommodulemodulename",children:(0,o.jsx)(s.code,{children:"jest.createMockFromModule"})})," to generate an automatic mock, and overrides its default behavior. This is the recommended approach, but is completely optional. If you do not want to use the automatic mock at all, you can export your own functions from the mock file. One downside to fully manual mocks is that they're manual \u2013 meaning you have to manually update them any time the module they are mocking changes. Because of this, it's best to use or extend the automatic mock when it works for your needs."]}),"\n",(0,o.jsxs)(s.p,{children:["To ensure that a manual mock and its real implementation stay in sync, it might be useful to require the real module using ",(0,o.jsx)(s.a,{href:"/es-ES/docs/jest-object#jestrequireactualmodulename",children:(0,o.jsx)(s.code,{children:"jest.requireActual(moduleName)"})})," in your manual mock and amending it with mock functions before exporting it."]}),"\n",(0,o.jsxs)(s.p,{children:["The code for this example is available at ",(0,o.jsx)(s.a,{href:"https://github.com/jestjs/jest/tree/main/examples/manual-mocks",children:"examples/manual-mocks"}),"."]}),"\n",(0,o.jsx)(s.h2,{id:"usando-con-imports-de-m\xf3dulos-es",children:"Usando con imports de m\xf3dulos ES"}),"\n",(0,o.jsxs)(s.p,{children:["If you're using ",(0,o.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import",children:"ES module imports"})," then you'll normally be inclined to put your ",(0,o.jsx)(s.code,{children:"import"})," statements at the top of the test file. But often you need to instruct Jest to use a mock before modules use it. For this reason, Jest will automatically hoist ",(0,o.jsx)(s.code,{children:"jest.mock"})," calls to the top of the module (before any imports). To learn more about this and see it in action, see ",(0,o.jsx)(s.a,{href:"https://github.com/kentcdodds/how-jest-mocking-works",children:"this repo"}),"."]}),"\n",(0,o.jsx)(s.admonition,{type:"caution",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)(s.code,{children:"jest.mock"})," calls cannot be hoisted to the top of the module if you enabled ECMAScript modules support. The ESM module loader always evaluates the static imports before executing code. See ",(0,o.jsx)(s.a,{href:"/es-ES/docs/ecmascript-modules",children:"ECMAScriptModules"})," for details."]})}),"\n",(0,o.jsx)(s.h2,{id:"mocking-methods-which-are-not-implemented-in-jsdom",children:"Mocking methods which are not implemented in JSDOM"}),"\n",(0,o.jsxs)(s.p,{children:["If some code uses a method which JSDOM (the DOM implementation used by Jest) hasn't implemented yet, testing it is not easily possible. This is e.g. the case with ",(0,o.jsx)(s.code,{children:"window.matchMedia()"}),". Jest returns ",(0,o.jsx)(s.code,{children:"TypeError: window.matchMedia is not a function"})," and doesn't properly execute the test."]}),"\n",(0,o.jsxs)(s.p,{children:["In this case, mocking ",(0,o.jsx)(s.code,{children:"matchMedia"})," in the test file should solve the issue:"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-js",children:"Object.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: jest.fn().mockImplementation(query => ({\n    matches: false,\n    media: query,\n    onchange: null,\n    addListener: jest.fn(), // deprecated\n    removeListener: jest.fn(), // deprecated\n    addEventListener: jest.fn(),\n    removeEventListener: jest.fn(),\n    dispatchEvent: jest.fn(),\n  })),\n});\n"})}),"\n",(0,o.jsxs)(s.p,{children:["This works if ",(0,o.jsx)(s.code,{children:"window.matchMedia()"})," is used in a function (or method) which is invoked in the test. If ",(0,o.jsx)(s.code,{children:"window.matchMedia()"})," is executed directly in the tested file, Jest reports the same error. In this case, the solution is to move the manual mock into a separate file and include this one in the test ",(0,o.jsx)(s.strong,{children:"before"})," the tested file:"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-js",children:"import './matchMedia.mock'; // Must be imported before the tested file\nimport {myMethod} from './file-to-test';\n\ndescribe('myMethod()', () => {\n  // Test the method here...\n});\n"})})]})}const m=function(e={}){const{wrapper:s}=Object.assign({},(0,t.ah)(),e.components);return s?(0,o.jsx)(s,Object.assign({},e,{children:(0,o.jsx)(d,e)})):d(e)}},1670:(e,s,n)=>{n.d(s,{Zo:()=>c,ah:()=>i});var o=n(7378);const t=o.createContext({});function i(e){const s=o.useContext(t);return o.useMemo((()=>"function"==typeof e?e(s):{...s,...e}),[s,e])}const a={};function c({components:e,children:s,disableParentContext:n}){let c;return c=n?"function"==typeof e?e({}):e||a:i(e),o.createElement(t.Provider,{value:c},s)}}}]);