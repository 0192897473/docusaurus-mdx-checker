"use strict";(self.webpackChunkjest_website=self.webpackChunkjest_website||[]).push([[1347],{1291:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>c,toc:()=>a});var o=n(4246),t=n(1670);const r={id:"ecmascript-modules",title:"M\xf3dulos ECMAScript"},i=void 0,c={unversionedId:"ecmascript-modules",id:"version-29.5/ecmascript-modules",title:"M\xf3dulos ECMAScript",description:"Jest vem com suporte experimental para M\xf3dulos ECMAScript (ESM).",source:"@site/i18n/pt-BR/docusaurus-plugin-content-docs/version-29.5/ECMAScriptModules.md",sourceDirName:".",slug:"/ecmascript-modules",permalink:"/pt-BR/docs/29.5/ecmascript-modules",draft:!1,unlisted:!1,editUrl:"https://crowdin.com/project/jest-v2/pt-BR",tags:[],version:"29.5",frontMatter:{id:"ecmascript-modules",title:"M\xf3dulos ECMAScript"},sidebar:"docs",previous:{title:"Passando pelo m\xf3dulo de mock",permalink:"/pt-BR/docs/29.5/bypassing-module-mocks"},next:{title:"Usando com webpack",permalink:"/pt-BR/docs/29.5/webpack"}},d={},a=[{value:"Diferen\xe7as entre ESM e CommonJS",id:"diferen\xe7as-entre-esm-e-commonjs",level:2},{value:"M\xf3dulo simulado no ESM",id:"m\xf3dulo-simulado-no-esm",level:2}];function l(e){const s=Object.assign({admonition:"admonition",p:"p",strong:"strong",a:"a",code:"code",ol:"ol",li:"li",em:"em",h2:"h2",pre:"pre"},(0,t.ah)(),e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(s.admonition,{type:"caution",children:[(0,o.jsxs)(s.p,{children:["Jest vem com ",(0,o.jsx)(s.strong,{children:"suporte experimental"})," para M\xf3dulos ECMAScript (ESM)."]}),(0,o.jsxs)(s.p,{children:["A implementa\xe7\xe3o pode haver bugs e falta de recursos. For the latest status check out the ",(0,o.jsx)(s.a,{href:"https://github.com/jestjs/jest/issues/9430",children:"issue"})," and the ",(0,o.jsx)(s.a,{href:"https://github.com/jestjs/jest/labels/ES%20Modules",children:"label"})," on the issue tracker."]}),(0,o.jsxs)(s.p,{children:["Tamb\xe9m note que, as APIs que o Jest usa para implementar o suporte ESM ainda s\xe3o ",(0,o.jsx)(s.a,{href:"https://nodejs.org/api/vm.html#vm_class_vm_module",children:"consideradas experimentais pelo Node"})," (como da vers\xe3o ",(0,o.jsx)(s.code,{children:"18.8.0"}),")."]})]}),"\n",(0,o.jsx)(s.p,{children:"With the warnings out of the way, this is how you activate ESM support in your tests."}),"\n",(0,o.jsxs)(s.ol,{children:["\n",(0,o.jsxs)(s.li,{children:["\n",(0,o.jsxs)(s.p,{children:["Certifique-se de desativar ",(0,o.jsx)(s.a,{href:"/pt-BR/docs/29.5/configuration#transform-objectstring-pathtotransformer--pathtotransformer-object",children:"code transforms"})," passando ",(0,o.jsx)(s.code,{children:"transform: {}"})," ou configurando seu transformador para emitir ESM em vez do CommonJS padr\xe3o (CJS)."]}),"\n"]}),"\n",(0,o.jsxs)(s.li,{children:["\n",(0,o.jsxs)(s.p,{children:["Execute ",(0,o.jsx)(s.code,{children:"node"})," with ",(0,o.jsx)(s.code,{children:"--experimental-vm-modules"}),", e.g. ",(0,o.jsx)(s.code,{children:"node --experimental-vm-modules node_modules/jest/bin/jest.js"})," or ",(0,o.jsx)(s.code,{children:"NODE_OPTIONS=--experimental-vm-modules npx jest"})," etc."]}),"\n",(0,o.jsxs)(s.p,{children:["No Windows, voc\xea pode utilizar ",(0,o.jsx)(s.a,{href:"https://github.com/kentcdodds/cross-env",children:(0,o.jsx)(s.code,{children:"cross-env"})}),", para definir as vari\xe1veis de ambiente."]}),"\n",(0,o.jsxs)(s.p,{children:["Se voc\xea utiliza o Yarn, poder\xe1 usar ",(0,o.jsx)(s.code,{children:"yarn node --experimental-vm-modules $(yarn bin jest)"}),". This command will also work if you use ",(0,o.jsx)(s.a,{href:"https://yarnpkg.com/features/pnp",children:"Yarn Plug'n'Play"}),"."]}),"\n",(0,o.jsxs)(s.p,{children:["If your codebase includes ESM imports from ",(0,o.jsx)(s.code,{children:"*.wasm"})," files, you do ",(0,o.jsx)(s.em,{children:"not"})," need to pass ",(0,o.jsx)(s.code,{children:"--experimental-wasm-modules"})," to ",(0,o.jsx)(s.code,{children:"node"}),". Current implementation of WebAssembly imports in Jest relies on experimental VM modules, however, this may change in the future."]}),"\n"]}),"\n",(0,o.jsxs)(s.li,{children:["\n",(0,o.jsxs)(s.p,{children:["Beyond that, we attempt to follow ",(0,o.jsx)(s.code,{children:"node"}),'\'s logic for activating "ESM mode" (such as looking at ',(0,o.jsx)(s.code,{children:"type"})," in ",(0,o.jsx)(s.code,{children:"package.json"})," or ",(0,o.jsx)(s.code,{children:".mjs"})," files), see ",(0,o.jsx)(s.a,{href:"https://nodejs.org/api/esm.html#esm_enabling",children:"their docs"})," for details."]}),"\n"]}),"\n",(0,o.jsxs)(s.li,{children:["\n",(0,o.jsxs)(s.p,{children:["Se voc\xea deseja tratar outras extens\xf5es de arquivo (como ",(0,o.jsx)(s.code,{children:".jsx"})," ou ",(0,o.jsx)(s.code,{children:".ts"}),") como ESM, por favor, utilize a op\xe7\xe3o ",(0,o.jsx)(s.a,{href:"/pt-BR/docs/29.5/configuration#extensionstotreatasesm-arraystring",children:(0,o.jsx)(s.code,{children:" extensionsToTreatAsEsm"})}),"."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(s.h2,{id:"diferen\xe7as-entre-esm-e-commonjs",children:"Diferen\xe7as entre ESM e CommonJS"}),"\n",(0,o.jsxs)(s.p,{children:["Most of the differences are explained in ",(0,o.jsx)(s.a,{href:"https://nodejs.org/api/esm.html#esm_differences_between_es_modules_and_commonjs",children:"Node's documentation"}),", but in addition to the things mentioned there, Jest injects a special variable into all executed files - the ",(0,o.jsxs)(s.a,{href:"/pt-BR/docs/29.5/jest-object",children:[(0,o.jsx)(s.code,{children:"jest"})," object"]}),". To access this object in ESM, you need to import it from the ",(0,o.jsx)(s.code,{children:"@jest/globals"})," module or use ",(0,o.jsx)(s.code,{children:"import.meta"}),"."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-js",children:"import {jest} from '@jest/globals';\n\njest.useFakeTimers();\n\n// etc.\n\n// alternatively\nimport.meta.jest.useFakeTimers();\n\n// jest === import.meta.jest => true\n"})}),"\n",(0,o.jsx)(s.h2,{id:"m\xf3dulo-simulado-no-esm",children:"M\xf3dulo simulado no ESM"}),"\n",(0,o.jsxs)(s.p,{children:["Since ESM evaluates static ",(0,o.jsx)(s.code,{children:"import"})," statements before looking at the code, the hoisting of ",(0,o.jsx)(s.code,{children:"jest.mock"})," calls that happens in CJS won't work for ESM. To mock modules in ESM, you need to use ",(0,o.jsx)(s.code,{children:"require"})," or dynamic ",(0,o.jsx)(s.code,{children:"import()"})," after ",(0,o.jsx)(s.code,{children:"jest.mock"})," calls to load the mocked modules - the same applies to modules which load the mocked modules."]}),"\n",(0,o.jsxs)(s.p,{children:["ESM mocking is supported through ",(0,o.jsx)(s.code,{children:"jest.unstable_mockModule"}),". As the name suggests, this API is still work in progress, please follow ",(0,o.jsx)(s.a,{href:"https://github.com/jestjs/jest/issues/10025",children:"this issue"})," for updates."]}),"\n",(0,o.jsxs)(s.p,{children:["The usage of ",(0,o.jsx)(s.code,{children:"jest.unstable_mockModule"})," is essentially the same as ",(0,o.jsx)(s.code,{children:"jest.mock"})," with two differences: the factory function is required and it can be sync or async:"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-js",children:"import {jest} from '@jest/globals';\n\njest.unstable_mockModule('node:child_process', () => ({\n  execSync: jest.fn(),\n  // etc.\n}));\n\nconst {execSync} = await import('node:child_process');\n\n// etc.\n"})}),"\n",(0,o.jsxs)(s.p,{children:["For mocking CJS modules, you should continue to use ",(0,o.jsx)(s.code,{children:"jest.mock"}),". See the example below:"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-js",metastring:'title="main.cjs"',children:"const {BrowserWindow, app} = require('electron');\n\n// etc.\n\nmodule.exports = {example};\n"})}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-js",metastring:'title="main.test.cjs"',children:"import {createRequire} from 'node:module';\nimport {jest} from '@jest/globals';\n\nconst require = createRequire(import.meta.url);\n\njest.mock('electron', () => ({\n  app: {\n    on: jest.fn(),\n    whenReady: jest.fn(() => Promise.resolve()),\n  },\n  BrowserWindow: jest.fn().mockImplementation(() => ({\n    // partial mocks.\n  })),\n}));\n\nconst {BrowserWindow} = require('electron');\nconst exported = require('./main.cjs');\n\n// alternatively\nconst {BrowserWindow} = (await import('electron')).default;\nconst exported = await import('./main.cjs');\n\n// etc.\n"})})]})}const m=function(e={}){const{wrapper:s}=Object.assign({},(0,t.ah)(),e.components);return s?(0,o.jsx)(s,Object.assign({},e,{children:(0,o.jsx)(l,e)})):l(e)}},1670:(e,s,n)=>{n.d(s,{Zo:()=>c,ah:()=>r});var o=n(7378);const t=o.createContext({});function r(e){const s=o.useContext(t);return o.useMemo((()=>"function"==typeof e?e(s):{...s,...e}),[s,e])}const i={};function c({components:e,children:s,disableParentContext:n}){let c;return c=n?"function"==typeof e?e({}):e||i:r(e),o.createElement(t.Provider,{value:c},s)}}}]);