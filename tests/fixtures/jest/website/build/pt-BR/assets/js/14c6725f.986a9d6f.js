"use strict";(self.webpackChunkjest_website=self.webpackChunkjest_website||[]).push([[5953],{6294:(e,n,t)=>{t.d(n,{Z:()=>i});t(7378);var s=t(7614);const a={tableOfContentsInline:"tableOfContentsInline_pY9K"};var c=t(4246);function i(e){let{toc:n,minHeadingLevel:t,maxHeadingLevel:i}=e;return(0,c.jsx)("div",{className:a.tableOfContentsInline,children:(0,c.jsx)(s.Z,{toc:n,minHeadingLevel:t,maxHeadingLevel:i,className:"table-of-contents",linkClassName:null})})}},7614:(e,n,t)=>{t.d(n,{Z:()=>p});var s=t(7378),a=t(9899);function c(e){const n=e.map((e=>({...e,parentIndex:-1,children:[]}))),t=Array(7).fill(-1);n.forEach(((e,n)=>{const s=t.slice(2,e.level);e.parentIndex=Math.max(...s),t[e.level]=n}));const s=[];return n.forEach((e=>{const{parentIndex:t,...a}=e;t>=0?n[t].children.push(a):s.push(a)})),s}function i(e){let{toc:n,minHeadingLevel:t,maxHeadingLevel:s}=e;return n.flatMap((e=>{const n=i({toc:e.children,minHeadingLevel:t,maxHeadingLevel:s});return function(e){return e.level>=t&&e.level<=s}(e)?[{...e,children:n}]:n}))}function o(e){const n=e.getBoundingClientRect();return n.top===n.bottom?o(e.parentNode):n}function r(e,n){let{anchorTopOffset:t}=n;const s=e.find((e=>o(e).top>=t));if(s){return function(e){return e.top>0&&e.bottom<window.innerHeight/2}(o(s))?s:e[e.indexOf(s)-1]??null}return e[e.length-1]??null}function d(){const e=(0,s.useRef)(0),{navbar:{hideOnScroll:n}}=(0,a.L)();return(0,s.useEffect)((()=>{e.current=n?0:document.querySelector(".navbar").clientHeight}),[n]),e}function l(e){const n=(0,s.useRef)(void 0),t=d();(0,s.useEffect)((()=>{if(!e)return()=>{};const{linkClassName:s,linkActiveClassName:a,minHeadingLevel:c,maxHeadingLevel:i}=e;function o(){const e=function(e){return Array.from(document.getElementsByClassName(e))}(s),o=function(e){let{minHeadingLevel:n,maxHeadingLevel:t}=e;const s=[];for(let a=n;a<=t;a+=1)s.push(`h${a}.anchor`);return Array.from(document.querySelectorAll(s.join()))}({minHeadingLevel:c,maxHeadingLevel:i}),d=r(o,{anchorTopOffset:t.current}),l=e.find((e=>d&&d.id===function(e){return decodeURIComponent(e.href.substring(e.href.indexOf("#")+1))}(e)));e.forEach((e=>{!function(e,t){t?(n.current&&n.current!==e&&n.current.classList.remove(a),e.classList.add(a),n.current=e):e.classList.remove(a)}(e,e===l)}))}return document.addEventListener("scroll",o),document.addEventListener("resize",o),o(),()=>{document.removeEventListener("scroll",o),document.removeEventListener("resize",o)}}),[e,t])}var h=t(1191),u=t(4246);function x(e){let{toc:n,className:t,linkClassName:s,isChild:a}=e;return n.length?(0,u.jsx)("ul",{className:a?void 0:t,children:n.map((e=>(0,u.jsxs)("li",{children:[(0,u.jsx)(h.Z,{to:`#${e.id}`,className:s??void 0,dangerouslySetInnerHTML:{__html:e.value}}),(0,u.jsx)(x,{isChild:!0,toc:e.children,className:t,linkClassName:s})]},e.id)))}):null}const m=s.memo(x);function p(e){let{toc:n,className:t="table-of-contents table-of-contents__left-border",linkClassName:o="table-of-contents__link",linkActiveClassName:r,minHeadingLevel:d,maxHeadingLevel:h,...x}=e;const p=(0,a.L)(),j=d??p.tableOfContents.minHeadingLevel,f=h??p.tableOfContents.maxHeadingLevel,b=function(e){let{toc:n,minHeadingLevel:t,maxHeadingLevel:a}=e;return(0,s.useMemo)((()=>i({toc:c(n),minHeadingLevel:t,maxHeadingLevel:a})),[n,t,a])}({toc:n,minHeadingLevel:j,maxHeadingLevel:f});return l((0,s.useMemo)((()=>{if(o&&r)return{linkClassName:o,linkActiveClassName:r,minHeadingLevel:j,maxHeadingLevel:f}}),[o,r,j,f])),(0,u.jsx)(m,{toc:b,className:t,linkClassName:o,...x})}},6850:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>x,frontMatter:()=>o,metadata:()=>d,toc:()=>h});var s=t(4246),a=t(1670),c=t(2353),i=t(6294);const o={id:"api",title:"Globais"},r=void 0,d={unversionedId:"api",id:"version-29.6/api",title:"Globais",description:"O Jest coloca cada um desses m\xe9todos e objetos no ambiente global dos seus arquivos de teste. Voc\xea n\xe3o precisar fazer nenhuma importa\xe7\xe3o para poder us\xe1-los. No entanto, se voc\xea prefere import\xe1-los explicitamente, basta escrever import {describe, expect, test} from '@jest/globals'.",source:"@site/i18n/pt-BR/docusaurus-plugin-content-docs/version-29.6/GlobalAPI.md",sourceDirName:".",slug:"/api",permalink:"/pt-BR/docs/api",draft:!1,unlisted:!1,editUrl:"https://crowdin.com/project/jest-v2/pt-BR",tags:[],version:"29.6",frontMatter:{id:"api",title:"Globais"},sidebar:"api",next:{title:"Expect",permalink:"/pt-BR/docs/expect"}},l={},h=[{value:"M\xe9todos",id:"m\xe9todos",level:2},{value:"Refer\xeancia",id:"refer\xeancia",level:2},{value:"<code>afterAll(fn, timeout)</code>",id:"afterallfn-timeout",level:3},{value:"<code>afterEach(fn, timeout)</code>",id:"aftereachfn-timeout",level:3},{value:"<code>beforeAll(fn, timeout)</code>",id:"beforeallfn-timeout",level:3},{value:"<code>beforeEach(fn, timeout)</code>",id:"beforeeachfn-timeout",level:3},{value:"<code>describe(name, fn)</code>",id:"describename-fn",level:3},{value:"<code>describe.each(table)(name, fn, timeout)</code>",id:"describeeachtablename-fn-timeout",level:3},{value:"1. <code>describe.each(table)(name, fn, timeout)</code>",id:"1-describeeachtablename-fn-timeout",level:4},{value:"2. <code>describe.each`table`(name, fn, timeout)</code>",id:"2-describeeachtablename-fn-timeout",level:4},{value:"<code>describe.only(name, fn)</code>",id:"describeonlyname-fn",level:3},{value:"<code>describe.only.each(table)(name, fn)</code>",id:"describeonlyeachtablename-fn",level:3},{value:"<code>describe.only.each(table)(name, fn)</code>",id:"describeonlyeachtablename-fn-1",level:4},{value:"<code>describe.only.each`table`(name, fn)</code>",id:"describeonlyeachtablename-fn-2",level:4},{value:"<code>describe.skip(name, fn)</code>",id:"describeskipname-fn",level:3},{value:"<code>describe.skip.each(table)(name, fn)</code>",id:"describeskipeachtablename-fn",level:3},{value:"<code>describe.skip.each(table)(name, fn)</code>",id:"describeskipeachtablename-fn-1",level:4},{value:"<code>describe.skip.each`table`(name, fn)</code>",id:"describeskipeachtablename-fn-2",level:4},{value:"<code>test(name, fn, timeout)</code>",id:"testname-fn-timeout",level:3},{value:"<code>test.concurrent(name, fn, timeout)</code>",id:"testconcurrentname-fn-timeout",level:3},{value:"<code>test.concurrent.each(table)(name, fn, timeout)</code>",id:"testconcurrenteachtablename-fn-timeout",level:3},{value:"1. <code>test.concurrent.each(table)(name, fn, timeout)</code>",id:"1-testconcurrenteachtablename-fn-timeout",level:4},{value:"2. <code>test.concurrent.each`table`(name, fn, timeout)</code>",id:"2-testconcurrenteachtablename-fn-timeout",level:4},{value:"<code>test.concurrent.only.each(table)(name, fn)</code>",id:"testconcurrentonlyeachtablename-fn",level:3},{value:"<code>test.concurrent.only.each(table)(name, fn)</code>",id:"testconcurrentonlyeachtablename-fn-1",level:4},{value:"<code>test.only.each`table`(name, fn)</code>",id:"testonlyeachtablename-fn",level:4},{value:"<code>test.concurrent.skip.each(table)(name, fn)</code>",id:"testconcurrentskipeachtablename-fn",level:3},{value:"<code>test.concurrent.skip.each(table)(name, fn)</code>",id:"testconcurrentskipeachtablename-fn-1",level:4},{value:"<code>test.concurrent.skip.each`table`(name, fn)</code>",id:"testconcurrentskipeachtablename-fn-2",level:4},{value:"<code>test.each(table)(name, fn, timeout)</code>",id:"testeachtablename-fn-timeout",level:3},{value:"1. <code>test.each(table)(name, fn, timeout)</code>",id:"1-testeachtablename-fn-timeout",level:4},{value:"2. <code>test.each`table`(name, fn, timeout)</code>",id:"2-testeachtablename-fn-timeout",level:4},{value:"<code>test.failing(name, fn, timeout)</code>",id:"testfailingname-fn-timeout",level:3},{value:"<code>test.failing.each(name, fn, timeout)</code>",id:"testfailingeachname-fn-timeout",level:3},{value:"<code>test.only.failing(name, fn, timeout)</code>",id:"testonlyfailingname-fn-timeout",level:3},{value:"<code>test.skip.failing(name, fn, timeout)</code>",id:"testskipfailingname-fn-timeout",level:3},{value:"<code>test.only(name, fn, timeout)</code>",id:"testonlyname-fn-timeout",level:3},{value:"<code>test.only.each(table)(name, fn)</code>",id:"testonlyeachtablename-fn-1",level:3},{value:"<code>test.only.each(table)(name, fn)</code>",id:"testonlyeachtablename-fn-2",level:4},{value:"<code>test.only.each`table`(name, fn)</code>",id:"testonlyeachtablename-fn-3",level:4},{value:"<code>test.skip(name, fn)</code>",id:"testskipname-fn",level:3},{value:"<code>test.skip.each(table)(name, fn)</code>",id:"testskipeachtablename-fn",level:3},{value:"<code>test.skip.each(table)(name, fn)</code>",id:"testskipeachtablename-fn-1",level:4},{value:"<code>test.skip.each`table`(name, fn)</code>",id:"testskipeachtablename-fn-2",level:4},{value:"<code>test.todo(name)</code>",id:"testtodoname",level:3},{value:"TypeScript Usage",id:"typescript-usage",level:2},{value:"<code>.each</code>",id:"each",level:3},{value:"Array of objects",id:"array-of-objects",level:4},{value:"Array of arrays",id:"array-of-arrays",level:4},{value:"Template literal",id:"template-literal",level:4}];function u(e){const n=Object.assign({p:"p",code:"code",h2:"h2",hr:"hr",h3:"h3",pre:"pre",h4:"h4",ul:"ul",li:"li",a:"a",strong:"strong",admonition:"admonition"},(0,a.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["O Jest coloca cada um desses m\xe9todos e objetos no ambiente global dos seus arquivos de teste. Voc\xea n\xe3o precisar fazer nenhuma importa\xe7\xe3o para poder us\xe1-los. No entanto, se voc\xea prefere import\xe1-los explicitamente, basta escrever ",(0,s.jsx)(n.code,{children:"import {describe, expect, test} from '@jest/globals'"}),"."]}),"\n","\n",(0,s.jsx)(c.ZP,{}),"\n",(0,s.jsx)(n.h2,{id:"m\xe9todos",children:"M\xe9todos"}),"\n","\n","\n",(0,s.jsx)(i.Z,{toc:h.slice(1)}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"refer\xeancia",children:"Refer\xeancia"}),"\n",(0,s.jsx)(n.h3,{id:"afterallfn-timeout",children:(0,s.jsx)(n.code,{children:"afterAll(fn, timeout)"})}),"\n",(0,s.jsx)(n.p,{children:"Executa uma fun\xe7\xe3o depois que todos os testes neste arquivo forem conclu\xeddos. Se a fun\xe7\xe3o retorna uma promise ou \xe9 um generator, Jest aguarda essa promise resolver antes de continuar."}),"\n",(0,s.jsxs)(n.p,{children:["Opcionalmente, voc\xea pode fornecer um ",(0,s.jsx)(n.code,{children:"timeout"})," (em milissegundos) para especificar quanto tempo esperar antes de abortar. The default timeout is 5 seconds."]}),"\n",(0,s.jsx)(n.p,{children:"Por exemplo:"}),"\n",(0,s.jsx)(n.p,{children:"Por exemplo:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const globalDatabase = makeGlobalDatabase();\n\nfunction cleanUpDatabase(db) {\n  db.cleanUp();\n}\n\nafterAll(() => {\n  cleanUpDatabase(globalDatabase);\n});\n\ntest('can find things', () => {\n  return globalDatabase.find('thing', {}, results => {\n    expect(results.length).toBeGreaterThan(0);\n  });\n});\n\ntest('can insert a thing', () => {\n  return globalDatabase.insert('thing', makeThing(), response => {\n    expect(response.success).toBeTruthy();\n  });\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Se ",(0,s.jsx)(n.code,{children:"afterAll"})," est\xe1 dentro de um bloco ",(0,s.jsx)(n.code,{children:"describe"}),', ele \xe9 executado ao final do bloco "describe".']}),"\n",(0,s.jsxs)(n.p,{children:["Se voc\xea deseja executar uma limpeza ap\xf3s cada teste em vez de ap\xf3s todos os testes, use ao inv\xe9s ",(0,s.jsx)(n.code,{children:"afterEach"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Se voc\xea deseja executar uma limpeza ap\xf3s cada teste em vez de ap\xf3s todos os testes, use ao inv\xe9s ",(0,s.jsx)(n.code,{children:"afterEach"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"aftereachfn-timeout",children:(0,s.jsx)(n.code,{children:"afterEach(fn, timeout)"})}),"\n",(0,s.jsx)(n.p,{children:"Executa uma fun\xe7\xe3o ap\xf3s cada um dos testes deste arquivo completar. Se a fun\xe7\xe3o retorna uma promise ou \xe9 um generator, Jest aguarda essa promise resolver antes de continuar."}),"\n",(0,s.jsxs)(n.p,{children:["Opcionalmente, voc\xea pode fornecer um ",(0,s.jsx)(n.code,{children:"timeout"})," (em milissegundos) para especificar quanto tempo esperar antes de abortar. The default timeout is 5 seconds."]}),"\n",(0,s.jsx)(n.p,{children:"Por exemplo:"}),"\n",(0,s.jsx)(n.p,{children:"Por exemplo:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const globalDatabase = makeGlobalDatabase();\n\nfunction cleanUpDatabase(db) {\n  db.cleanUp();\n}\n\nafterEach(() => {\n  cleanUpDatabase(globalDatabase);\n});\n\ntest('can find things', () => {\n  return globalDatabase.find('thing', {}, results => {\n    expect(results.length).toBeGreaterThan(0);\n  });\n});\n\ntest('can insert a thing', () => {\n  return globalDatabase.insert('thing', makeThing(), response => {\n    expect(response.success).toBeTruthy();\n  });\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Se ",(0,s.jsx)(n.code,{children:"afterEach"})," est\xe1 dentro de um bloco ",(0,s.jsx)(n.code,{children:"describe"}),', ele \xe9 executado somente ap\xf3s os testes que est\xe3o dentro deste bloco "describe".']}),"\n",(0,s.jsxs)(n.p,{children:["Se voc\xea deseja executar uma limpeza apenas uma vez, depois que todos os testes s\xe3o executados, use ",(0,s.jsx)(n.code,{children:"afterAll"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Se voc\xea deseja executar uma limpeza apenas uma vez, depois que todos os testes s\xe3o executados, use ",(0,s.jsx)(n.code,{children:"afterAll"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"beforeallfn-timeout",children:(0,s.jsx)(n.code,{children:"beforeAll(fn, timeout)"})}),"\n",(0,s.jsxs)(n.p,{children:["Executa uma fun\xe7\xe3o antes de qualquer um dos testes neste arquivo ser executado. Se a fun\xe7\xe3o retornar uma ",(0,s.jsx)("span",{lang:"en-us",children:"promise"})," ou for um ",(0,s.jsx)("span",{lang:"en-us",children:"generator"}),", o Jest vai esperar at\xe9 que ela esteja resolvida para executar os testes."]}),"\n",(0,s.jsxs)(n.p,{children:["Opcionalmente, voc\xea pode fornecer um ",(0,s.jsx)(n.code,{children:"timeout"})," (em milissegundos) para especificar quanto tempo esperar antes de abortar. The default timeout is 5 seconds."]}),"\n",(0,s.jsx)(n.p,{children:"Por exemplo:"}),"\n",(0,s.jsx)(n.p,{children:"Por exemplo:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const globalDatabase = makeGlobalDatabase();\n\nbeforeAll(() => {\n  // Limpa o banco de dados e adiciona alguns dados de teste.\n  // O Jest aguardar\xe1 que essa promessa seja resolvida antes de executar os testes.\n  return globalDatabase.clear().then(() => {\n    return globalDatabase.insert({testData: 'foo'});\n  });\n});\n\n  // Jest ir\xe1 esperar que essa promessa seja resolvida antes de executar testes.\n  // Como configuramos o banco de dados apenas uma vez neste exemplo, \xe9 importante\n//que nossos testes n\xe3o o modifiquem.\ntest('can find things', () => {\n  return globalDatabase.find('thing', {}, results => {\n    expect(results.length).toBeGreaterThan(0);\n  });\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Aqui ",(0,s.jsx)(n.code,{children:"beforeAll"})," garante que o banco de dados est\xe1 configurado antes dos testes serem executados. Se a configura\xe7\xe3o for s\xedncrona, voc\xea pode fazer tudo sem precisar usar o ",(0,s.jsx)(n.code,{children:"beforeAll"}),". A chave \xe9 que Jest esperar\xe1 por uma promessa resolver, para que voc\xea possa ter configura\xe7\xe3o ass\xedncrona tamb\xe9m."]}),"\n",(0,s.jsxs)(n.p,{children:["Se voc\xea deseja executar algo antes de cada teste, em vez de antes que qualquer teste seja executado, use ",(0,s.jsx)(n.code,{children:"beforeEach"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Se voc\xea deseja executar algo antes de cada teste, em vez de antes que qualquer teste seja executado, use ",(0,s.jsx)(n.code,{children:"beforeEach"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"beforeeachfn-timeout",children:(0,s.jsx)(n.code,{children:"beforeEach(fn, timeout)"})}),"\n",(0,s.jsxs)(n.p,{children:["Executa uma fun\xe7\xe3o antes que cada um dos testes neste arquivo seja executado. Se a fun\xe7\xe3o retornar uma ",(0,s.jsx)("span",{lang:"en-us",children:"promise"})," ou for um ",(0,s.jsx)("span",{lang:"en-us",children:"generator"}),", o Jest vai esperar at\xe9 que ela esteja resolvida para executar os testes."]}),"\n",(0,s.jsxs)(n.p,{children:["Opcionalmente, voc\xea pode fornecer um ",(0,s.jsx)(n.code,{children:"timeout"})," (em milissegundos) para especificar quanto tempo esperar antes de abortar. The default timeout is 5 seconds."]}),"\n",(0,s.jsx)(n.p,{children:"Por exemplo:"}),"\n",(0,s.jsx)(n.p,{children:"Por exemplo:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const globalDatabase = makeGlobalDatabase();\n\nbeforeEach(() => {\n  // Clears the database and adds some testing data.\n  // Jest ir\xe1 esperar que essa promessa seja resolvida antes de executar testes.\n  return globalDatabase.clear().then(() => {\n    return globalDatabase.insert({testData: 'foo'});\n  });\n});\n\n// Since we only set up the database once in this example, it's important\n// that our tests don't modify it. test('can find things', () => {\n  return globalDatabase.find('thing', {}, results => {\n    expect(results.length).toBeGreaterThan(0);\n  });\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Se ",(0,s.jsx)(n.code,{children:"beforeEach"})," est\xe1 dentro de um bloco ",(0,s.jsx)(n.code,{children:"describe"}),', ele \xe9 executado para cada teste no bloco "describe".']}),"\n",(0,s.jsxs)(n.p,{children:["Se voc\xea s\xf3 precisa executar algum c\xf3digo de configura\xe7\xe3o uma vez, antes que qualquer teste execute, use ao inv\xe9s ",(0,s.jsx)(n.code,{children:"beforeAll"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Se voc\xea s\xf3 precisa executar algum c\xf3digo de configura\xe7\xe3o uma vez, antes que qualquer teste execute, use ao inv\xe9s ",(0,s.jsx)(n.code,{children:"beforeAll"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"describename-fn",children:(0,s.jsx)(n.code,{children:"describe(name, fn)"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"describe(name, fn)"})," cria um bloco que agrupa v\xe1rios testes relacionados. Por exemplo, se voc\xea tiver um objeto ",(0,s.jsx)(n.code,{children:"myBeverage"})," que deve ser delicioso, mas n\xe3o azedo, voc\xea pode test\xe1-lo com:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const myBeverage = {\n  delicious: true,\n  sour: false,\n};\n\ndescribe('my beverage', () => {\n  test('is delicious', () => {\n    expect(myBeverage.delicious).toBeTruthy();\n  });\n\n  test('is not sour', () => {\n    expect(myBeverage.sour).toBeFalsy();\n  });\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Isso n\xe3o \xe9 necess\xe1rio - voc\xea pode escrever os blocos de ",(0,s.jsx)(n.code,{children:"teste"})," diretamente em n\xedvel superior. Mas isso pode ser \xfatil se preferir que os seus testes sejam organizados em grupos."]}),"\n",(0,s.jsxs)(n.p,{children:["Voc\xea tamb\xe9m pode aninhar blocos ",(0,s.jsx)(n.code,{children:"describe"})," se voc\xea tem uma hierarquia de testes:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const binaryStringToNumber = binString => {\n  if (!/^[01]+$/.test(binString)) {\n    throw new CustomError('Not a binary number.');\n  }\n\n  return parseInt(binString, 2);\n};\n\ndescribe('binaryStringToNumber', () => {\n  describe('given an invalid binary string', () => {\n    test('composed of non-numbers throws CustomError', () => {\n      expect(() => binaryStringToNumber('abc')).toThrow(CustomError);\n    });\n\n    test('with extra whitespace throws CustomError', () => {\n      expect(() => binaryStringToNumber('  100')).toThrow(CustomError);\n    });\n  });\n\n  describe('given a valid binary string', () => {\n    test('returns the correct number', () => {\n      expect(binaryStringToNumber('100')).toBe(4);\n    });\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"describeeachtablename-fn-timeout",children:(0,s.jsx)(n.code,{children:"describe.each(table)(name, fn, timeout)"})}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"describe.each"})," se voc\xea continuar duplicando a mesma su\xedte de testes com dados diferentes. ",(0,s.jsx)(n.code,{children:"describe.each"})," permite que voc\xea escreva a su\xedte de testes apenas uma vez passando os dados para cada execu\xe7\xe3o."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"describe.each"})," est\xe1 dispon\xedvel com duas APIs:"]}),"\n",(0,s.jsxs)(n.h4,{id:"1-describeeachtablename-fn-timeout",children:["1. ",(0,s.jsx)(n.code,{children:"describe.each(table)(name, fn, timeout)"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"table"}),": ",(0,s.jsx)(n.code,{children:"Array"})," de Arrays com os argumentos que ser\xe3o passados \xe0 fun\xe7\xe3o do argumento ",(0,s.jsx)(n.code,{children:"fn"})," de cada execu\xe7\xe3o. If you pass in a 1D array of primitives, internally it will be mapped to a table i.e. ",(0,s.jsx)(n.code,{children:"[1, 2, 3] -> [[1], [2], [3]]"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"name"}),": ",(0,s.jsx)(n.code,{children:"String"})," com o nome da su\xedte de testes."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Escreva t\xedtulos \xfanicos para os testes injetando par\xe2metros na string com a ",(0,s.jsxs)(n.a,{href:"https://nodejs.org/api/util.html#util_util_format_format_args",children:["formata\xe7\xe3o ",(0,s.jsx)(n.code,{children:"printf"})]}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%p"})," - ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/pretty-format",children:"pretty-format"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%s"}),"- String."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%d"}),"- Number."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%i"})," - Integer."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%f"})," - Floating point value."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%j"})," - JSON."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%o"})," - Object."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%#"})," - Index of the test case."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%%"})," - single percent sign ('%'). Isto n\xe3o consome nenhum argumento."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Ou escreva t\xedtulos \xfanicos ao injetar propriedades do objeto de teste com uma ",(0,s.jsx)(n.code,{children:"$variavel"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Para injetar valores de objetos aninhados, voc\xea pode prover um ",(0,s.jsx)("span",{lang:"en-us",children:"keyPath"}),", por exemplo: ",(0,s.jsx)(n.code,{children:"$variavel.caminho.do.valor"})]}),"\n",(0,s.jsxs)(n.li,{children:["Voc\xea pode usar ",(0,s.jsx)(n.code,{children:"$#"})," para injetar o \xedndice do caso de teste"]}),"\n",(0,s.jsxs)(n.li,{children:["You cannot use ",(0,s.jsx)(n.code,{children:"$variable"})," with the ",(0,s.jsx)(n.code,{children:"printf"})," formatting except for ",(0,s.jsx)(n.code,{children:"%%"})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"fn"}),": ",(0,s.jsx)(n.code,{children:"Function"})," the suite of tests to be run, this is the function that will receive the parameters in each row as function arguments."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Opcionalmente, voc\xea pode fornecer um ",(0,s.jsx)(n.code,{children:"timeout"})," (em milissegundos) para especificar quanto tempo esperar antes de abortar a execu\xe7\xe3o. The default timeout is 5 seconds."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"describe.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test(`returned value not be greater than ${expected}`, () => {\n    expect(a + b).not.toBeGreaterThan(expected);\n  });\n\n  test(`returned value not be less than ${expected}`, () => {\n    expect(a + b).not.toBeLessThan(expected);\n  });\n});\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"describe.each([\n  {a: 1, b: 1, expected: 2},\n  {a: 1, b: 2, expected: 3},\n  {a: 2, b: 1, expected: 3},\n])('.add($a, $b)', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test(`returned value not be greater than ${expected}`, () => {\n    expect(a + b).not.toBeGreaterThan(expected);\n  });\n\n  test(`returned value not be less than ${expected}`, () => {\n    expect(a + b).not.toBeLessThan(expected);\n  });\n});\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"2-describeeachtablename-fn-timeout",children:["2. ",(0,s.jsx)(n.code,{children:"describe.each`table`(name, fn, timeout)"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"table"}),": ",(0,s.jsx)(n.code,{children:"Tagged Template Literal"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["A primeira linha \xe9 o cabe\xe7alho que cont\xe9m o nome das vari\xe1veis de cada coluna separadas por ",(0,s.jsx)(n.code,{children:"|"})]}),"\n",(0,s.jsxs)(n.li,{children:["Uma ou mais linhas de dados declaradas como express\xf5es de ",(0,s.jsx)("span",{lang:"en-us",children:"template literal"})," usando a sintaxe ",(0,s.jsx)(n.code,{children:"${value}"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"name"}),": ",(0,s.jsx)(n.code,{children:"String"})," o t\xedtulo da su\xedte de testes. Use uma ",(0,s.jsx)(n.code,{children:"$variavel"})," para injetar os dados declarados dentro da express\xe3o ",(0,s.jsx)("span",{lang:"en-us",children:"tagged template"})," no t\xedtulo da su\xedte e ",(0,s.jsx)(n.code,{children:"$#"})," para acessar o \xedndice de cada linha.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Para injetar valores de objetos aninhados, voc\xea pode prover um ",(0,s.jsx)("span",{lang:"en-us",children:"keyPath"}),", por exemplo: ",(0,s.jsx)(n.code,{children:"$variavel.caminho.do.valor"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"fn"}),": ",(0,s.jsx)(n.code,{children:"Function"})," the suite of tests to be run, this is the function that will receive the test data object."]}),"\n",(0,s.jsxs)(n.li,{children:["Opcionalmente, voc\xea pode fornecer um ",(0,s.jsx)(n.code,{children:"timeout"})," (em milissegundos) para especificar quanto tempo esperar antes de abortar a execu\xe7\xe3o. The default timeout is 5 seconds."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"describe.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('$a + $b', ({a, b, expected}) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n\n  test(`returned value not be greater than ${expected}`, () => {\n    expect(a + b).not.toBeGreaterThan(expected);\n  });\n\n  test(`returned value not be less than ${expected}`, () => {\n    expect(a + b).not.toBeLessThan(expected);\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"describeonlyname-fn",children:(0,s.jsx)(n.code,{children:"describe.only(name, fn)"})}),"\n",(0,s.jsxs)(n.p,{children:["Voc\xea pode usar ",(0,s.jsx)(n.code,{children:"describe.only"}),' se voc\xea deseja executar apenas um bloco "describe":']}),"\n",(0,s.jsxs)(n.p,{children:["Se ",(0,s.jsx)(n.code,{children:"beforeAll"})," est\xe1 dentro de um bloco ",(0,s.jsx)(n.code,{children:"describe"}),', ele \xe9 executado no in\xedcio do bloco de "describe".']}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"describe.only('my beverage', () => {\n  test('is delicious', () => {\n    expect(myBeverage.delicious).toBeTruthy();\n  });\n\n  test('is not sour', () => {\n    expect(myBeverage.sour).toBeFalsy();\n  });\n});\n\ndescribe('my other beverage', () => {\n  // ... will be skipped\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"describeonlyeachtablename-fn",children:(0,s.jsx)(n.code,{children:"describe.only.each(table)(name, fn)"})}),"\n",(0,s.jsxs)(n.p,{children:["Tamb\xe9m pode ser chamada com ",(0,s.jsx)(n.code,{children:"fdescribe.each(table)(name, fn)"})," e ",(0,s.jsx)(n.code,{children:"fdescribe.each`table`(name, fn)"})]}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"describe.only.each"})," se voc\xea deseja executar apenas su\xedtes espec\xedficas de testes orientadas a dados."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"describe.only.each"})," est\xe1 dispon\xedvel com duas APIs:"]}),"\n",(0,s.jsx)(n.h4,{id:"describeonlyeachtablename-fn-1",children:(0,s.jsx)(n.code,{children:"describe.only.each(table)(name, fn)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"describe.only.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected);\n  });\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"describeonlyeachtablename-fn-2",children:(0,s.jsx)(n.code,{children:"describe.only.each`table`(name, fn)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"describe.only.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', ({a, b, expected}) => {\n  test('passes', () => {\n    expect(a + b).toBe(expected);\n  });\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"describeskipname-fn",children:(0,s.jsx)(n.code,{children:"describe.skip(name, fn)"})}),"\n",(0,s.jsxs)(n.p,{children:["Tamb\xe9m pode ser chamada com ",(0,s.jsx)(n.code,{children:"xdescribe(name, fn)"})]}),"\n",(0,s.jsxs)(n.p,{children:["You can use ",(0,s.jsx)(n.code,{children:"describe.skip"})," if you do not want to run the tests of a particular ",(0,s.jsx)(n.code,{children:"describe"})," block:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"describe('my beverage', () => {\n  test('is delicious', () => {\n    expect(myBeverage.delicious).toBeTruthy();\n  });\n\n  test('is not sour', () => {\n    expect(myBeverage.sour).toBeFalsy();\n  });\n});\n\ndescribe.skip('my other beverage', () => {\n  // ... will be skipped\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Usar ",(0,s.jsx)(n.code,{children:"describe.skip"})," muitas vezes \xe9 uma alternativa mais limpa de temporariamente pular um trecho do teste. Beware that the ",(0,s.jsx)(n.code,{children:"describe"})," block will still run. If you have some setup that also should be skipped, do it in a ",(0,s.jsx)(n.code,{children:"beforeAll"})," or ",(0,s.jsx)(n.code,{children:"beforeEach"})," block."]}),"\n",(0,s.jsx)(n.h3,{id:"describeskipeachtablename-fn",children:(0,s.jsx)(n.code,{children:"describe.skip.each(table)(name, fn)"})}),"\n",(0,s.jsxs)(n.p,{children:["Tamb\xe9m pode ser chamada com ",(0,s.jsx)(n.code,{children:"xdescribe.each(table)(name, fn)"})," e ",(0,s.jsx)(n.code,{children:"xdescribe.each`table`(name, fn)"})]}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"describe.skip.each"})," se voc\xea deseja parar a execu\xe7\xe3o de uma su\xedte de testes orientada a dados."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"describe.skip.each"})," est\xe1 dispon\xedvel com duas APIs:"]}),"\n",(0,s.jsx)(n.h4,{id:"describeskipeachtablename-fn-1",children:(0,s.jsx)(n.code,{children:"describe.skip.each(table)(name, fn)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"describe.skip.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  test(`returns ${expected}`, () => {\n    expect(a + b).toBe(expected); // will not be run\n  });\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"describeskipeachtablename-fn-2",children:(0,s.jsx)(n.code,{children:"describe.skip.each`table`(name, fn)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"describe.skip.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', ({a, b, expected}) => {\n  test('will not be run', () => {\n    expect(a + b).toBe(expected); // will not be run\n  });\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"testname-fn-timeout",children:(0,s.jsx)(n.code,{children:"test(name, fn, timeout)"})}),"\n",(0,s.jsxs)(n.p,{children:["Tamb\xe9m pode ser chamada com ",(0,s.jsx)(n.code,{children:"it(name, fn, timeout)"})]}),"\n",(0,s.jsxs)(n.p,{children:["Tudo que voc\xea precisa em um arquivo de teste \xe9 o m\xe9todo ",(0,s.jsx)(n.code,{children:"test"})," que executa um teste. Por exemplo, digamos que h\xe1 uma fun\xe7\xe3o ",(0,s.jsx)(n.code,{children:"inchesOfRain()"})," que deve ser zero. O teste inteiro poderia ser:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('did not rain', () => {\n  expect(inchesOfRain()).toBe(0);\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["O primeiro argumento \xe9 o nome do teste; o segundo argumento \xe9 uma fun\xe7\xe3o que cont\xe9m as expectativas para testar. O terceiro argumento (opcional) \xe9 o ",(0,s.jsx)(n.code,{children:"timeout"})," (em milissegundos) que determina o tempo de espera antes da execu\xe7\xe3o ser abortada. The default timeout is 5 seconds."]}),"\n",(0,s.jsxs)(n.p,{children:["If a ",(0,s.jsx)(n.strong,{children:"promise is returned"})," from ",(0,s.jsx)(n.code,{children:"test"}),", Jest will wait for the promise to resolve before letting the test complete. Por exemplo, digamos que a fun\xe7\xe3o ",(0,s.jsx)(n.code,{children:"fetchBeverageList()"})," retorna uma ",(0,s.jsx)("span",{lang:"en-us",children:"promise"})," que \xe9 esperada para resolver uma lista que cont\xe9m o valor ",(0,s.jsx)(n.code,{children:"lemon"})," nela. Voc\xea pode testar isso com:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('has lemon in it', () => {\n  return fetchBeverageList().then(list => {\n    expect(list).toContain('lemon');\n  });\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Even though the call to ",(0,s.jsx)(n.code,{children:"test"})," will return right away, the test doesn't complete until the promise resolves. For more details, see ",(0,s.jsx)(n.a,{href:"/pt-BR/docs/asynchronous",children:"Testing Asynchronous Code"})," page."]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["O Jest tamb\xe9m vai esperar caso voc\xea ",(0,s.jsx)(n.strong,{children:"forne\xe7a um argumento para a fun\xe7\xe3o de teste"}),", geralmente chamado ",(0,s.jsx)(n.code,{children:"done"}),". This could be handy when you want to test ",(0,s.jsx)(n.a,{href:"/pt-BR/docs/asynchronous#callbacks",children:"callbacks"}),"."]})}),"\n",(0,s.jsx)(n.h3,{id:"testconcurrentname-fn-timeout",children:(0,s.jsx)(n.code,{children:"test.concurrent(name, fn, timeout)"})}),"\n",(0,s.jsxs)(n.p,{children:["Tamb\xe9m pode ser chamada com ",(0,s.jsx)(n.code,{children:"it.concurrent(name, fn, timeout)"})]}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"test.concurrent"})," is considered experimental - see ",(0,s.jsx)(n.a,{href:"https://github.com/jestjs/jest/labels/Area%3A%20Concurrent",children:"here"})," for details on missing features and other issues."]})}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"test.concurrent"})," se voc\xea quiser que o teste seja executado simultaneamente."]}),"\n",(0,s.jsxs)(n.p,{children:["O primeiro argumento \xe9 o nome do teste; o segundo argumento \xe9 uma fun\xe7\xe3o que cont\xe9m as asser\xe7\xf5es do teste. O terceiro argumento (opcional) \xe9 o ",(0,s.jsx)(n.code,{children:"timeout"})," (em milissegundos) que determina o tempo de espera antes da execu\xe7\xe3o ser abortada. The default timeout is 5 seconds."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test.concurrent('addition of 2 numbers', async () => {\n  expect(5 + 3).toBe(8);\n});\n\ntest.concurrent('subtraction 2 numbers', async () => {\n  expect(5 - 3).toBe(2);\n});\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["Use the ",(0,s.jsx)(n.a,{href:"Configuration.md/#maxconcurrency-number",children:(0,s.jsx)(n.code,{children:"maxConcurrency"})})," configuration option to prevent Jest from executing more than the specified amount of tests at the same time."]})}),"\n",(0,s.jsx)(n.h3,{id:"testconcurrenteachtablename-fn-timeout",children:(0,s.jsx)(n.code,{children:"test.concurrent.each(table)(name, fn, timeout)"})}),"\n",(0,s.jsxs)(n.p,{children:["Tamb\xe9m pode ser chamada com ",(0,s.jsx)(n.code,{children:"it.concurrent.each(table)(name, fn, timeout)"})]}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"test.concurrent.each"})," se voc\xea duplica com frequ\xeancia a mesma su\xedte de testes com dados diferentes. ",(0,s.jsx)(n.code,{children:"test.each"})," permite que voc\xea escreva o teste uma vez passando os dados para cada execu\xe7\xe3o, todos os testes s\xe3o executados de forma ass\xedncrona."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"test.concurrent.each"})," est\xe1 dispon\xedvel com duas APIs:"]}),"\n",(0,s.jsxs)(n.h4,{id:"1-testconcurrenteachtablename-fn-timeout",children:["1. ",(0,s.jsx)(n.code,{children:"test.concurrent.each(table)(name, fn, timeout)"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"table"}),": ",(0,s.jsx)(n.code,{children:"Array"})," de Arrays com os argumentos que ser\xe3o passados \xe0 fun\xe7\xe3o ",(0,s.jsx)(n.code,{children:"fn"})," para cada execu\xe7\xe3o. If you pass in a 1D array of primitives, internally it will be mapped to a table i.e. ",(0,s.jsx)(n.code,{children:"[1, 2, 3] -> [[1], [2], [3]]"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"name"}),": ",(0,s.jsx)(n.code,{children:"String"})," com o nome do bloco de teste.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Escreva t\xedtulos \xfanicos para os testes injetando par\xe2metros na string com a ",(0,s.jsxs)(n.a,{href:"https://nodejs.org/api/util.html#util_util_format_format_args",children:["formata\xe7\xe3o ",(0,s.jsx)(n.code,{children:"printf"})]}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%p"})," - ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/pretty-format",children:"pretty-format"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%s"}),"- String."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%d"}),"- Number."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%i"})," - Integer."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%f"})," - Floating point value."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%j"})," - JSON."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%o"})," - Object."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%#"})," - Index of the test case."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%%"})," - single percent sign ('%'). Isto n\xe3o consome nenhum argumento."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"fn"}),": ",(0,s.jsx)(n.code,{children:"Function"})," the test to be run, this is the function that will receive the parameters in each row as function arguments, ",(0,s.jsx)(n.strong,{children:"this will have to be an asynchronous function"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Opcionalmente, voc\xea pode fornecer um ",(0,s.jsx)(n.code,{children:"timeout"})," (em milissegundos) para especificar quanto tempo esperar antes de abortar a execu\xe7\xe3o. The default timeout is 5 seconds."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test.concurrent.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', async (a, b, expected) => {\n  expect(a + b).toBe(expected);\n});\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"2-testconcurrenteachtablename-fn-timeout",children:["2. ",(0,s.jsx)(n.code,{children:"test.concurrent.each`table`(name, fn, timeout)"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"table"}),": ",(0,s.jsx)(n.code,{children:"Tagged Template Literal"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["A primeira linha \xe9 o cabe\xe7alho que cont\xe9m o nome das vari\xe1veis de cada coluna separadas por ",(0,s.jsx)(n.code,{children:"|"})]}),"\n",(0,s.jsxs)(n.li,{children:["Uma ou mais linhas de dados declaradas como express\xf5es de ",(0,s.jsx)("span",{lang:"en-us",children:"template literal"})," usando a sintaxe ",(0,s.jsx)(n.code,{children:"${value}"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"name"}),": ",(0,s.jsx)(n.code,{children:"String"})," o t\xedtulo do teste. Use uma ",(0,s.jsx)(n.code,{children:"$variavel"})," para injetar os dados declarados dentro da express\xe3o ",(0,s.jsx)("span",{lang:"en-us",children:"tagged template"})," no t\xedtulo do teste.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Para injetar valores de objetos aninhados, voc\xea pode prover um ",(0,s.jsx)("span",{lang:"en-us",children:"keyPath"}),", por exemplo: ",(0,s.jsx)(n.code,{children:"$variavel.caminho.do.valor"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"fn"}),": ",(0,s.jsx)(n.code,{children:"Function"})," the test to be run, this is the function that will receive the test data object, ",(0,s.jsx)(n.strong,{children:"this will have to be an asynchronous function"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Opcionalmente, voc\xea pode fornecer um ",(0,s.jsx)(n.code,{children:"timeout"})," (em milissegundos) para especificar quanto tempo esperar antes de abortar a execu\xe7\xe3o. The default timeout is 5 seconds."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test.concurrent.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', async ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"testconcurrentonlyeachtablename-fn",children:(0,s.jsx)(n.code,{children:"test.concurrent.only.each(table)(name, fn)"})}),"\n",(0,s.jsxs)(n.p,{children:["Tamb\xe9m pode ser chamada com ",(0,s.jsx)(n.code,{children:"it.concurrent.only.each(table)(name, fn)"})]}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"test.concurrent.only.each"})," if you want to only run specific tests with different test data concurrently."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"test.concurrent.only.each"})," is available with two APIs:"]}),"\n",(0,s.jsx)(n.h4,{id:"testconcurrentonlyeachtablename-fn-1",children:(0,s.jsx)(n.code,{children:"test.concurrent.only.each(table)(name, fn)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test.concurrent.only.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', async (a, b, expected) => {\n  expect(a + b).toBe(expected);\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"testonlyeachtablename-fn",children:(0,s.jsx)(n.code,{children:"test.only.each`table`(name, fn)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test.concurrent.only.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', async ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"testconcurrentskipeachtablename-fn",children:(0,s.jsx)(n.code,{children:"test.concurrent.skip.each(table)(name, fn)"})}),"\n",(0,s.jsxs)(n.p,{children:["Also under the alias: ",(0,s.jsx)(n.code,{children:"it.concurrent.skip.each(table)(name, fn)"})]}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"test.concurrent.skip.each"})," if you want to stop running a collection of asynchronous data driven tests."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"test.concurrent.skip.each"})," is available with two APIs:"]}),"\n",(0,s.jsx)(n.h4,{id:"testconcurrentskipeachtablename-fn-1",children:(0,s.jsx)(n.code,{children:"test.concurrent.skip.each(table)(name, fn)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test.concurrent.skip.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', async (a, b, expected) => {\n  expect(a + b).toBe(expected); // will not be run\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"testconcurrentskipeachtablename-fn-2",children:(0,s.jsx)(n.code,{children:"test.concurrent.skip.each`table`(name, fn)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test.concurrent.skip.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', async ({a, b, expected}) => {\n  expect(a + b).toBe(expected); // will not be run\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"testeachtablename-fn-timeout",children:(0,s.jsx)(n.code,{children:"test.each(table)(name, fn, timeout)"})}),"\n",(0,s.jsxs)(n.p,{children:["Also under the alias: ",(0,s.jsx)(n.code,{children:"it.each(table)(name, fn)"})," and ",(0,s.jsx)(n.code,{children:"it.each`table`(name, fn)"})]}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"test.each"})," if you keep duplicating the same test with different data. ",(0,s.jsx)(n.code,{children:"test.each"})," allows you to write the test once and pass data in."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"test.each"})," is available with two APIs:"]}),"\n",(0,s.jsxs)(n.h4,{id:"1-testeachtablename-fn-timeout",children:["1. ",(0,s.jsx)(n.code,{children:"test.each(table)(name, fn, timeout)"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"table"}),": ",(0,s.jsx)(n.code,{children:"Array"})," de Arrays com os argumentos que ser\xe3o passados \xe0 fun\xe7\xe3o ",(0,s.jsx)(n.code,{children:"fn"})," para cada execu\xe7\xe3o. If you pass in a 1D array of primitives, internally it will be mapped to a table i.e. ",(0,s.jsx)(n.code,{children:"[1, 2, 3] -> [[1], [2], [3]]"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"name"}),": ",(0,s.jsx)(n.code,{children:"String"})," com o nome do bloco de teste.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Escreva t\xedtulos \xfanicos para os testes injetando par\xe2metros na string com a ",(0,s.jsxs)(n.a,{href:"https://nodejs.org/api/util.html#util_util_format_format_args",children:["formata\xe7\xe3o ",(0,s.jsx)(n.code,{children:"printf"})]}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%p"})," - ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/pretty-format",children:"pretty-format"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%s"}),"- String."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%d"}),"- Number."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%i"})," - Integer."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%f"})," - Floating point value."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%j"})," - JSON."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%o"})," - Object."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%#"})," - Index of the test case."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"%%"})," - single percent sign ('%'). Isto n\xe3o consome nenhum argumento."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Ou escreva t\xedtulos \xfanicos ao injetar propriedades do objeto de teste com uma ",(0,s.jsx)(n.code,{children:"$variavel"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Para injetar valores de objetos aninhados, voc\xea pode prover um ",(0,s.jsx)("span",{lang:"en-us",children:"keyPath"}),", por exemplo: ",(0,s.jsx)(n.code,{children:"$variavel.caminho.do.valor"})]}),"\n",(0,s.jsxs)(n.li,{children:["Voc\xea pode usar ",(0,s.jsx)(n.code,{children:"$#"})," para injetar o \xedndice do caso de teste"]}),"\n",(0,s.jsxs)(n.li,{children:["You cannot use ",(0,s.jsx)(n.code,{children:"$variable"})," with the ",(0,s.jsx)(n.code,{children:"printf"})," formatting except for ",(0,s.jsx)(n.code,{children:"%%"})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"fn"}),": ",(0,s.jsx)(n.code,{children:"Function"})," the test to be run, this is the function that will receive the parameters in each row as function arguments."]}),"\n",(0,s.jsxs)(n.li,{children:["Opcionalmente, voc\xea pode fornecer um ",(0,s.jsx)(n.code,{children:"timeout"})," (em milissegundos) para especificar quanto tempo esperar antes de abortar a execu\xe7\xe3o. The default timeout is 5 seconds."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  expect(a + b).toBe(expected);\n});\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test.each([\n  {a: 1, b: 1, expected: 2},\n  {a: 1, b: 2, expected: 3},\n  {a: 2, b: 1, expected: 3},\n])('.add($a, $b)', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"2-testeachtablename-fn-timeout",children:["2. ",(0,s.jsx)(n.code,{children:"test.each`table`(name, fn, timeout)"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"table"}),": ",(0,s.jsx)(n.code,{children:"Tagged Template Literal"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["A primeira linha \xe9 o cabe\xe7alho que cont\xe9m o nome das vari\xe1veis de cada coluna separadas por ",(0,s.jsx)(n.code,{children:"|"})]}),"\n",(0,s.jsxs)(n.li,{children:["Uma ou mais linhas de dados declaradas como express\xf5es de ",(0,s.jsx)("span",{lang:"en-us",children:"template literal"})," usando a sintaxe ",(0,s.jsx)(n.code,{children:"${value}"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"name"}),": ",(0,s.jsx)(n.code,{children:"String"})," o t\xedtulo do teste. Use uma ",(0,s.jsx)(n.code,{children:"$variavel"})," para injetar os dados declarados dentro da express\xe3o ",(0,s.jsx)("span",{lang:"en-us",children:"tagged template"})," no t\xedtulo do teste.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Para injetar valores de objetos aninhados, voc\xea pode prover um ",(0,s.jsx)("span",{lang:"en-us",children:"keyPath"}),", por exemplo: ",(0,s.jsx)(n.code,{children:"$variavel.caminho.do.valor"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"fn"}),": ",(0,s.jsx)(n.code,{children:"Function"})," the test to be run, this is the function that will receive the test data object."]}),"\n",(0,s.jsxs)(n.li,{children:["Opcionalmente, voc\xea pode fornecer um ",(0,s.jsx)(n.code,{children:"timeout"})," (em milissegundos) para especificar quanto tempo esperar antes de abortar a execu\xe7\xe3o. The default timeout is 5 seconds."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"testfailingname-fn-timeout",children:(0,s.jsx)(n.code,{children:"test.failing(name, fn, timeout)"})}),"\n",(0,s.jsxs)(n.p,{children:["Also under the alias: ",(0,s.jsx)(n.code,{children:"it.failing(name, fn, timeout)"})]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["This is only available with the default ",(0,s.jsx)(n.a,{href:"https://github.com/jestjs/jest/tree/main/packages/jest-circus",children:"jest-circus"})," runner."]})}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"test.failing"})," when you are writing a test and expecting it to fail. These tests will behave the other way normal tests do. If ",(0,s.jsx)(n.code,{children:"failing"})," test will throw any errors then it will pass. If it does not throw it will fail."]}),"\n",(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsxs)(n.p,{children:["You can use this type of test i.e. when writing code in a BDD way. In that case the tests will not show up as failing until they pass. Then you can just remove the ",(0,s.jsx)(n.code,{children:"failing"})," modifier to make them pass."]}),(0,s.jsx)(n.p,{children:"It can also be a nice way to contribute failing tests to a project, even if you don't know how to fix the bug."})]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test.failing('it is not equal', () => {\n  expect(5).toBe(6); // this test will pass\n});\n\ntest.failing('it is equal', () => {\n  expect(10).toBe(10); // this test will fail\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"testfailingeachname-fn-timeout",children:(0,s.jsx)(n.code,{children:"test.failing.each(name, fn, timeout)"})}),"\n",(0,s.jsxs)(n.p,{children:["Also under the alias: ",(0,s.jsx)(n.code,{children:"it.failing.each(table)(name, fn)"})," and ",(0,s.jsx)(n.code,{children:"it.failing.each`table`(name, fn)"})]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["This is only available with the default ",(0,s.jsx)(n.a,{href:"https://github.com/jestjs/jest/tree/main/packages/jest-circus",children:"jest-circus"})," runner."]})}),"\n",(0,s.jsxs)(n.p,{children:["You can also run multiple tests at once by adding ",(0,s.jsx)(n.code,{children:"each"})," after ",(0,s.jsx)(n.code,{children:"failing"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test.failing.each([\n  {a: 1, b: 1, expected: 2},\n  {a: 1, b: 2, expected: 3},\n  {a: 2, b: 1, expected: 3},\n])('.add($a, $b)', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"testonlyfailingname-fn-timeout",children:(0,s.jsx)(n.code,{children:"test.only.failing(name, fn, timeout)"})}),"\n",(0,s.jsxs)(n.p,{children:["Also under the aliases: ",(0,s.jsx)(n.code,{children:"it.only.failing(name, fn, timeout)"}),", ",(0,s.jsx)(n.code,{children:"fit.failing(name, fn, timeout)"})]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["This is only available with the default ",(0,s.jsx)(n.a,{href:"https://github.com/jestjs/jest/tree/main/packages/jest-circus",children:"jest-circus"})," runner."]})}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"test.only.failing"})," if you want to only run a specific failing test."]}),"\n",(0,s.jsx)(n.h3,{id:"testskipfailingname-fn-timeout",children:(0,s.jsx)(n.code,{children:"test.skip.failing(name, fn, timeout)"})}),"\n",(0,s.jsxs)(n.p,{children:["Also under the aliases: ",(0,s.jsx)(n.code,{children:"it.skip.failing(name, fn, timeout)"}),", ",(0,s.jsx)(n.code,{children:"xit.failing(name, fn, timeout)"}),", ",(0,s.jsx)(n.code,{children:"xtest.failing(name, fn, timeout)"})]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["This is only available with the default ",(0,s.jsx)(n.a,{href:"https://github.com/jestjs/jest/tree/main/packages/jest-circus",children:"jest-circus"})," runner."]})}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"test.skip.failing"})," if you want to skip running a specific failing test."]}),"\n",(0,s.jsx)(n.h3,{id:"testonlyname-fn-timeout",children:(0,s.jsx)(n.code,{children:"test.only(name, fn, timeout)"})}),"\n",(0,s.jsxs)(n.p,{children:["Also under the aliases: ",(0,s.jsx)(n.code,{children:"it.only(name, fn, timeout)"}),", and ",(0,s.jsx)(n.code,{children:"fit(name, fn, timeout)"})]}),"\n",(0,s.jsxs)(n.p,{children:["When you are debugging a large test file, you will often only want to run a subset of tests. You can use ",(0,s.jsx)(n.code,{children:".only"})," to specify which tests are the only ones you want to run in that test file."]}),"\n",(0,s.jsxs)(n.p,{children:["Opcionalmente, voc\xea pode fornecer um ",(0,s.jsx)(n.code,{children:"timeout"})," (em milissegundos) para especificar quanto tempo esperar antes de abortar. The default timeout is 5 seconds."]}),"\n",(0,s.jsx)(n.p,{children:"Por exemplo, digamos que voc\xea tenha estes testes:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test.only('it is raining', () => {\n  expect(inchesOfRain()).toBeGreaterThan(0);\n});\n\ntest('it is not snowing', () => {\n  expect(inchesOfSnow()).toBe(0);\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:['Only the "it is raining" test will run in that test file, since it is run with ',(0,s.jsx)(n.code,{children:"test.only"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Usually you wouldn't check code using ",(0,s.jsx)(n.code,{children:"test.only"})," into source control - you would use it for debugging, and remove it once you have fixed the broken tests."]}),"\n",(0,s.jsx)(n.h3,{id:"testonlyeachtablename-fn-1",children:(0,s.jsx)(n.code,{children:"test.only.each(table)(name, fn)"})}),"\n",(0,s.jsxs)(n.p,{children:["Also under the aliases: ",(0,s.jsx)(n.code,{children:"it.only.each(table)(name, fn)"}),", ",(0,s.jsx)(n.code,{children:"fit.each(table)(name, fn)"}),", ",(0,s.jsx)(n.code,{children:"it.only.each`table`(name, fn)"})," and ",(0,s.jsx)(n.code,{children:"fit.each`table`(name, fn)"})]}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"test.only.each"})," if you want to only run specific tests with different test data."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"test.only.each"})," is available with two APIs:"]}),"\n",(0,s.jsx)(n.h4,{id:"testonlyeachtablename-fn-2",children:(0,s.jsx)(n.code,{children:"test.only.each(table)(name, fn)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test.only.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  expect(a + b).toBe(expected);\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"testonlyeachtablename-fn-3",children:(0,s.jsx)(n.code,{children:"test.only.each`table`(name, fn)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test.only.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected);\n});\n\ntest('will not be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"testskipname-fn",children:(0,s.jsx)(n.code,{children:"test.skip(name, fn)"})}),"\n",(0,s.jsxs)(n.p,{children:["Also under the aliases: ",(0,s.jsx)(n.code,{children:"it.skip(name, fn)"}),", ",(0,s.jsx)(n.code,{children:"xit(name, fn)"}),", and ",(0,s.jsx)(n.code,{children:"xtest(name, fn)"})]}),"\n",(0,s.jsxs)(n.p,{children:["Quando voc\xea est\xe1 mantendo uma grande base de c\xf3digo, voc\xea pode \xe0s vezes encontrar um teste que est\xe1 quebrado temporariamente por algum motivo. If you want to skip running this test, but you don't want to delete this code, you can use ",(0,s.jsx)(n.code,{children:"test.skip"})," to specify some tests to skip."]}),"\n",(0,s.jsx)(n.p,{children:"Por exemplo, digamos que voc\xea tenha estes testes:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test('it is raining', () => {\n  expect(inchesOfRain()).toBeGreaterThan(0);\n});\n\ntest.skip('it is not snowing', () => {\n  expect(inchesOfSnow()).toBe(0);\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:['Somente o teste "it is raining" ser\xe1 executado, j\xe1 que o outro teste \xe9 executado com ',(0,s.jsx)(n.code,{children:"test.skip"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["You could comment the test out, but it's often a bit nicer to use ",(0,s.jsx)(n.code,{children:"test.skip"})," because it will maintain indentation and syntax highlighting."]}),"\n",(0,s.jsx)(n.h3,{id:"testskipeachtablename-fn",children:(0,s.jsx)(n.code,{children:"test.skip.each(table)(name, fn)"})}),"\n",(0,s.jsxs)(n.p,{children:["Also under the aliases: ",(0,s.jsx)(n.code,{children:"it.skip.each(table)(name, fn)"}),", ",(0,s.jsx)(n.code,{children:"xit.each(table)(name, fn)"}),", ",(0,s.jsx)(n.code,{children:"xtest.each(table)(name, fn)"}),", ",(0,s.jsx)(n.code,{children:"it.skip.each`table`(name, fn)"}),", ",(0,s.jsx)(n.code,{children:"xit.each`table`(name, fn)"})," and ",(0,s.jsx)(n.code,{children:"xtest.each`table`(name, fn)"})]}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"test.skip.each"})," if you want to stop running a collection of data driven tests."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"test.skip.each"})," is available with two APIs:"]}),"\n",(0,s.jsx)(n.h4,{id:"testskipeachtablename-fn-1",children:(0,s.jsx)(n.code,{children:"test.skip.each(table)(name, fn)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test.skip.each([\n  [1, 1, 2],\n  [1, 2, 3],\n  [2, 1, 3],\n])('.add(%i, %i)', (a, b, expected) => {\n  expect(a + b).toBe(expected); // will not be run\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"testskipeachtablename-fn-2",children:(0,s.jsx)(n.code,{children:"test.skip.each`table`(name, fn)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"test.skip.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`('returns $expected when $a is added to $b', ({a, b, expected}) => {\n  expect(a + b).toBe(expected); // will not be run\n});\n\ntest('will be run', () => {\n  expect(1 / 0).toBe(Infinity);\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"testtodoname",children:(0,s.jsx)(n.code,{children:"test.todo(name)"})}),"\n",(0,s.jsxs)(n.p,{children:["Also under the alias: ",(0,s.jsx)(n.code,{children:"it.todo(name)"})]}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"test.todo"})," when you are planning on writing tests. These tests will be highlighted in the summary output at the end so you know how many tests you still need todo."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const add = (a, b) => a + b;\n\ntest.todo('add should be associative');\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"test.todo"})," will throw an error if you pass it a test callback function. Use ",(0,s.jsx)(n.a,{href:"#testskipname-fn",children:(0,s.jsx)(n.code,{children:"test.skip"})})," instead, if you already implemented the test, but do not want it to run."]})}),"\n",(0,s.jsx)(n.h2,{id:"typescript-usage",children:"TypeScript Usage"}),"\n",(0,s.jsx)(c.ZP,{}),"\n",(0,s.jsx)(n.h3,{id:"each",children:(0,s.jsx)(n.code,{children:".each"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:".each"})," modifier offers few different ways to define a table of the test cases. Some of the APIs have caveats related with the type inference of the arguments which are passed to ",(0,s.jsx)(n.code,{children:"describe"})," or ",(0,s.jsx)(n.code,{children:"test"})," callback functions. Let's take a look at each of them."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["For simplicity ",(0,s.jsx)(n.code,{children:"test.each"})," is picked for the examples, but the type inference is identical in all cases where ",(0,s.jsx)(n.code,{children:".each"})," modifier can be used: ",(0,s.jsx)(n.code,{children:"describe.each"}),", ",(0,s.jsx)(n.code,{children:"test.concurrent.only.each"}),", ",(0,s.jsx)(n.code,{children:"test.skip.each"}),", etc."]})}),"\n",(0,s.jsx)(n.h4,{id:"array-of-objects",children:"Array of objects"}),"\n",(0,s.jsxs)(n.p,{children:["The array of objects API is most verbose, but it makes the type inference a painless task. A ",(0,s.jsx)(n.code,{children:"table"})," can be inlined:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import {test} from '@jest/globals';\n\ntest.each([\n  {name: 'a', path: 'path/to/a', count: 1, write: true},\n  {name: 'b', path: 'path/to/b', count: 3},\n])('inline table', ({name, path, count, write}) => {\n  // arguments are typed as expected, e.g. `write: boolean | undefined`\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"Or declared separately as a variable:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import {test} from '@jest/globals';\n\nconst table = [\n  {a: 1, b: 2, expected: 'three', extra: true},\n  {a: 3, b: 4, expected: 'seven', extra: false},\n  {a: 5, b: 6, expected: 'eleven'},\n];\n\ntest.each(table)('table as a variable', ({a, b, expected, extra}) => {\n  // again everything is typed as expected, e.g. `extra: boolean | undefined`\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"array-of-arrays",children:"Array of arrays"}),"\n",(0,s.jsx)(n.p,{children:"The array of arrays style will work smoothly with inlined tables:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import {test} from '@jest/globals';\n\ntest.each([\n  [1, 2, 'three', true],\n  [3, 4, 'seven', false],\n  [5, 6, 'eleven'],\n])('inline table example', (a, b, expected, extra) => {\n  // arguments are typed as expected, e.g. `extra: boolean | undefined`\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"However, if a table is declared as a separate variable, it must be typed as an array of tuples for correct type inference (this is not needed only if all elements of a row are of the same type):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import {test} from '@jest/globals';\n\nconst table: Array<[number, number, string, boolean?]> = [\n  [1, 2, 'three', true],\n  [3, 4, 'seven', false],\n  [5, 6, 'eleven'],\n];\n\ntest.each(table)('table as a variable example', (a, b, expected, extra) => {\n  // without the annotation types are incorrect, e.g. `a: number | string | boolean`\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"template-literal",children:"Template literal"}),"\n",(0,s.jsx)(n.p,{children:"If all values are of the same type, the template literal API will type the arguments correctly:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import {test} from '@jest/globals';\n\ntest.each`\n  a    | b    | expected\n  ${1} | ${2} | ${3}\n  ${3} | ${4} | ${7}\n  ${5} | ${6} | ${11}\n`('template literal example', ({a, b, expected}) => {\n  // all arguments are of type `number`\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"Otherwise it will require a generic type argument:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import {test} from '@jest/globals';\n\ntest.each<{a: number; b: number; expected: string; extra?: boolean}>`\n  a    | b    | expected    | extra\n  ${1} | ${2} | ${'three'}  | ${true}\n  ${3} | ${4} | ${'seven'}  | ${false}\n  ${5} | ${6} | ${'eleven'}\n`('template literal example', ({a, b, expected, extra}) => {\n  // without the generic argument in this case types would default to `unknown`\n});\n"})})]})}const x=function(e={}){const{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(u,e)})):u(e)}},2353:(e,n,t)=>{t.d(n,{ZP:()=>i});var s=t(4246),a=t(1670);function c(e){const n=Object.assign({admonition:"admonition",p:"p",pre:"pre",code:"code",a:"a"},(0,a.ah)(),e.components);return(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)(n.p,{children:"Os exemplos de TypeScript desta p\xe1gina s\xf3 funcionar\xe3o como documentados se voc\xea importar explicitamente APIs do Jest:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import {expect, jest, test} from '@jest/globals';\n"})}),(0,s.jsxs)(n.p,{children:["Consulte o guia ",(0,s.jsx)(n.a,{href:"/pt-BR/docs/getting-started#using-typescript",children:"Iniciando"})," para obter detalhes sobre como configurar Jest com TypeScript."]})]})}const i=function(e={}){const{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(c,e)})):c(e)}},1670:(e,n,t)=>{t.d(n,{Zo:()=>o,ah:()=>c});var s=t(7378);const a=s.createContext({});function c(e){const n=s.useContext(a);return s.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}const i={};function o({components:e,children:n,disableParentContext:t}){let o;return o=t?"function"==typeof e?e({}):e||i:c(e),s.createElement(a.Provider,{value:o},n)}}}]);